{
  "Widgets": {
    "dxAccordion": {
      "Description": "The Accordion widget contains several panels displayed one under another. These panels can be collapsed or expanded by an end user, which makes this widget very useful for presenting information in a limited amount of space.",
      "Module": "ui/accordion",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering Accordion items."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data field provides keys for widget items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The index number of the currently selected item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The selected item object."
        },
        "selectedItemKeys": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "selectedItemKey",
          "Description": "Specifies an array of currently selected item keys."
        },
        "selectedItems": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "selectedItem",
          "Description": "An array of currently selected item objects."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "icon": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the icon displayed by the widget item title."
            },
            "iconSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the icon field instead."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item title."
            }
          }
        },
        "animationDuration": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "A number specifying the time in milliseconds spent on the animation of the expanding or collapsing of a panel."
        },
        "collapsible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether all items can be collapsed or whether at least one item must always be expanded."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "itemTitleTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering an item title."
        },
        "multiple": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can expand several items or only a single item at once."
        },
        "onItemTitleClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemTitleClick event."
        }
      }
    },
    "dxActionSheet": {
      "Description": "The ActionSheet widget is a sheet containing a set of buttons located one under the other. These buttons usually represent several choices relating to a single task.",
      "Module": "ui/action_sheet",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the ActionSheet widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "icon": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the icon to be displayed on an action sheet button."
            },
            "onClick": {
              "IsFunc": true,
              "IsEvent": true,
              "Description": "A handler for the click event raised for the button representing the given action sheet button."
            },
            "type": {
              "EnumName": "ButtonType",
              "Description": "Specifies the type of the button that represents an action sheet item."
            }
          }
        },
        "cancelText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed in the button that closes the action sheet."
        },
        "onCancelClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cancelClick event."
        },
        "showCancelButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to display the Cancel button in action sheet."
        },
        "showTitle": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the title of the action sheet is visible."
        },
        "target": {
          "PrimitiveTypes": [
            "jquery"
          ],
          "Description": "Specifies the element the action sheet popover points at."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The title of the action sheet."
        },
        "usePopover": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to show the action sheet within a Popover widget."
        }
      }
    },
    "dxAutocomplete": {
      "Description": "The Autocomplete widget is a textbox that provides suggestions while a user types into it.",
      "Module": "ui/autocomplete",
      "IsEditor": true,
      "Options": {
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsDeprecated": true,
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "valueExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of a data source item field whose value is held in the value configuration option."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onFocusIn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusIn event."
        },
        "onFocusOut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusOut event."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the current value displayed by the widget."
        },
        "attr": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "onChange": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the change event."
        },
        "onCopy": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the copy event."
        },
        "onCut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cut event."
        },
        "onEnterKey": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the enterKey event."
        },
        "onInput": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the input event."
        },
        "onKeyDown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyDown event."
        },
        "onKeyPress": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyPress event."
        },
        "onKeyUp": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyUp event."
        },
        "onPaste": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the paste event."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is empty."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "spellcheck": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget checks the inner text for spelling mistakes."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "maxLength": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the maximum number of characters you can enter into the textbox."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "dropDownButtonTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "onClosed": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the closed event."
        },
        "onOpened": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the opened event."
        },
        "opened": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "displayValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Returns the value currently displayed by the widget."
        },
        "grouped": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether data items should be grouped."
        },
        "groupTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for group captions."
        },
        "minSearchLength": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The minimum number of characters that must be entered into the text box to begin a search."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "searchExpr": {
          "PrimitiveTypes": [
            "getter"
          ],
          "IsCollection": true,
          "SingularName": "searchExpr",
          "Description": "Specifies the name of a data source item field or an expression whose value is compared to the search criterion."
        },
        "searchMode": {
          "EnumName": "DropDownSearchMode",
          "Description": "Specifies the binary operation used to filter data."
        },
        "searchTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsReadonly": true,
          "Description": "Gets the currently selected item."
        },
        "maxItemCount": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the maximum count of items displayed by the widget."
        }
      }
    },
    "dxBarGauge": {
      "Description": "The BarGauge widget contains several circular bars that each indicates a single value.",
      "Module": "viz/bar_gauge",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports right-to-left representation."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "IsCollection": true,
              "EnumName": "ExportFormat",
              "SingularName": "format",
              "Description": "Specifies a set of formats available for exporting into."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export | enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in IE9 and Safari browsers."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDrawn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the drawn event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "onIncidentOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the incidentOccurred event."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "size": {
          "Description": "Specifies the size of the widget in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "EnumName": "VizTheme",
          "Description": "Sets the name of the theme to be used in the widget."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget title.",
          "Options": {
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the widget subtitle.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title text."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies the title's alignment in a vertical direction."
            },
            "position": {
              "IsDeprecated": true,
              "EnumName": "GaugeTitlePosition",
              "Description": "Use the horizontalAlignment and verticalAlignment options instead."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Specifies the appearance of the tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether the tooltip's border is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "jquery"
              ],
              "Description": "Specifies the container to draw tooltips inside of it."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies the font of the text displayed by a tooltip."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies the format of the value displayed by a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of tooltips."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space on the left and the right of the text displayed by a tooltip."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space above and below the text displayed by a tooltip."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | format | precision option instead."
            },
            "shadow": {
              "Description": "Specifies the appearance of the tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the blur distance of the tooltip's shadow."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the horizontal offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the vertical offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the z-index of tooltips."
            },
            "customizeTooltip": {
              "IsFunc": true,
              "Description": "Allows you to change tooltip appearance."
            }
          }
        },
        "animation": {
          "Description": "Specifies animation options.",
          "Options": {
            "duration": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Determines how long animation runs."
            },
            "easing": {
              "EnumName": "VizAnimationEasing",
              "Description": "Specifies the animation easing mode."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not animation is enabled."
            }
          }
        },
        "backgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a color for the remaining segment of the bar's track."
        },
        "barSpacing": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a distance between bars in pixels."
        },
        "baseValue": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a base value for bars."
        },
        "endValue": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies an end value for the gauge's invisible scale."
        },
        "geometry": {
          "Description": "Defines the shape of the gauge's arc.",
          "Options": {
            "endAngle": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the end angle of the bar gauge's arc."
            },
            "startAngle": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the start angle of the bar gauge's arc."
            }
          }
        },
        "label": {
          "Description": "Specifies the options of the labels that accompany gauge bars.",
          "Options": {
            "connectorColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the label connector text."
            },
            "connectorWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the label connector in pixels."
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns a text for labels."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for bar labels."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for bar labels."
            },
            "indent": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the distance between the upper bar and bar labels in pixels."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the label | format | precision option instead."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether bar labels appear on a gauge or not."
            }
          }
        },
        "onTooltipHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipHidden event."
        },
        "onTooltipShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipShown event."
        },
        "palette": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "EnumName": "VizPalette",
          "SingularName": "palette",
          "Description": "Sets the name of the palette or an array of colors to be used for coloring the gauge range container."
        },
        "relativeInnerRadius": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Defines the radius of the bar that is closest to the center relatively to the radius of the topmost bar."
        },
        "startValue": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a start value for the gauge's invisible scale."
        },
        "subtitle": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsDeprecated": true,
          "Description": "Use the title | subtitle option instead.",
          "Options": {
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "IsDeprecated": true,
              "Description": "Use the title | subtitle | font option instead."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the title | subtitle | text option instead."
            }
          }
        },
        "values": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "value",
          "Description": "Specifies the array of values to be indicated on a bar gauge."
        }
      }
    },
    "dxBox": {
      "Description": "The Box widget allows you to arrange various elements within it. Separate and adaptive, the Box widget acts as a building block for the layout.",
      "Module": "ui/box",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "baseSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "Mode",
              "Description": "Specifies the base size of an item element along the main direction."
            },
            "box": {
              "ComplexTypes": [
                "dxBoxOptions"
              ],
              "Description": "Holds a Box configuration object for the item."
            },
            "ratio": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the ratio value used to count the item element size along the main direction."
            }
          }
        },
        "align": {
          "EnumName": "BoxAlign",
          "Description": "Specifies how widget items are aligned along the main direction."
        },
        "crossAlign": {
          "EnumName": "BoxCrossAlign",
          "Description": "Specifies how widget items are aligned cross-wise."
        },
        "direction": {
          "EnumName": "BoxDirection",
          "Description": "Specifies the direction of item positioning in the widget."
        }
      }
    },
    "dxBullet": {
      "Description": "The Bullet widget is useful when you need to compare a single measure to a target value. The widget comprises a horizontal bar indicating the measure and a vertical line indicating the target value.",
      "Module": "viz/bullet",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports right-to-left representation."
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDrawn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the drawn event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "onIncidentOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the incidentOccurred event."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "size": {
          "Description": "Specifies the size of the widget in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "EnumName": "VizTheme",
          "Description": "Sets the name of the theme to be used in the widget."
        },
        "tooltip": {
          "Description": "Configures the tooltip.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Specifies the appearance of the tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether the tooltip's border is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "jquery"
              ],
              "Description": "Specifies the container to draw tooltips inside of it."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies the font of the text displayed by a tooltip."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies the format of the value displayed by a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of tooltips."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space on the left and the right of the text displayed by a tooltip."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space above and below the text displayed by a tooltip."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | format | precision option instead."
            },
            "shadow": {
              "Description": "Specifies the appearance of the tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the blur distance of the tooltip's shadow."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the horizontal offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the vertical offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the z-index of tooltips."
            },
            "customizeTooltip": {
              "IsFunc": true,
              "Description": "Overridden by descriptions for particular widgets."
            },
            "horizontalAlignment": {
              "IsDeprecated": true,
              "EnumName": "HorizontalAlignment",
              "Description": "Tooltip alignment is no longer useful because the tooltips are aligned automatically."
            },
            "verticalAlignment": {
              "IsDeprecated": true,
              "EnumName": "VerticalEdge",
              "Description": "Tooltip alignment is no longer useful because the tooltips are aligned automatically."
            }
          }
        },
        "onTooltipHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipHidden event."
        },
        "onTooltipShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipShown event."
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a color for the bullet bar."
        },
        "endScaleValue": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies an end value for the invisible scale."
        },
        "showTarget": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to show the target line."
        },
        "showZeroLevel": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to show the line indicating zero on the invisible scale."
        },
        "startScaleValue": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a start value for the invisible scale."
        },
        "target": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the value indicated by the target line."
        },
        "targetColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a color for both the target and zero level lines."
        },
        "targetWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the width of the target line."
        },
        "value": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the primary value indicated by the bullet bar."
        }
      }
    },
    "dxButton": {
      "Description": "The Button widget is a simple button that performs specified commands when a user clicks it.",
      "Module": "ui/button",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "icon": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the icon to be displayed on the button."
        },
        "iconSrc": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "onClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the click event."
        },
        "template": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering the Button widget."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the button."
        },
        "type": {
          "EnumName": "ButtonType",
          "Description": "Specifies the button type."
        },
        "useSubmitBehavior": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the button must submit an HTML form."
        },
        "validationGroup": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the validation group to be accessed in the click event handler."
        }
      }
    },
    "dxCalendar": {
      "Description": "The Calendar is a widget that displays a calendar and allows an end user to select the required date within a specified date range.",
      "Module": "ui/calendar",
      "IsEditor": true,
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "date",
            "double",
            "string"
          ],
          "Description": "An object or a value specifying the date and time currently selected in the calendar."
        },
        "cellTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering calendar cells."
        },
        "dateSerializationFormat": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the serialization format for a date-time value."
        },
        "firstDayOfWeek": {
          "EnumName": "FirstDayOfWeek",
          "Description": "Specifies the first day of a week."
        },
        "max": {
          "PrimitiveTypes": [
            "date",
            "double",
            "string"
          ],
          "Description": "The latest date the widget allows to select."
        },
        "maxZoomLevel": {
          "EnumName": "CalendarZoomLevel",
          "Description": "Specifies the maximum zoom level of the calendar."
        },
        "min": {
          "PrimitiveTypes": [
            "date",
            "double",
            "string"
          ],
          "Description": "The earliest date the widget allows to select."
        },
        "minZoomLevel": {
          "EnumName": "CalendarZoomLevel",
          "Description": "Specifies the minimum zoom level of the calendar."
        },
        "showTodayButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget displays a button that selects the current date."
        },
        "zoomLevel": {
          "EnumName": "CalendarZoomLevel",
          "Description": "Specifies the current calendar zoom level."
        }
      }
    },
    "dxChart": {
      "Description": "The Chart is a widget that visualizes data from a local or remote storage using a great variety of series types along with different interactive elements, such as tooltips, crosshair pointer, legend, etc.",
      "Module": "viz/chart",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports right-to-left representation."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "IsCollection": true,
              "EnumName": "ExportFormat",
              "SingularName": "format",
              "Description": "Specifies a set of formats available for exporting into."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export | enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in IE9 and Safari browsers."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDrawn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the drawn event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "onIncidentOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the incidentOccurred event."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "size": {
          "Description": "Specifies the size of the widget in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "EnumName": "VizTheme",
          "Description": "Sets the name of the theme to be used in the widget."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget title.",
          "Options": {
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the widget subtitle.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title text."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Specifies the appearance of the tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether the tooltip's border is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "jquery"
              ],
              "Description": "Specifies the container to draw tooltips inside of it."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies the font of the text displayed by a tooltip."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies the format of the value displayed by a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of tooltips."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space on the left and the right of the text displayed by a tooltip."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space above and below the text displayed by a tooltip."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | format | precision option instead."
            },
            "shadow": {
              "Description": "Specifies the appearance of the tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the blur distance of the tooltip's shadow."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the horizontal offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the vertical offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the z-index of tooltips."
            },
            "argumentFormat": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for arguments of the chart's series points."
            },
            "argumentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | argumentFormat | precision option instead."
            },
            "customizeTooltip": {
              "IsFunc": true,
              "Description": "Allows you to change the appearance of specified tooltips."
            },
            "percentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | format | percentPrecision option instead."
            },
            "location": {
              "EnumName": "ChartTooltipLocation",
              "Description": "Specifies whether the tooltip must be located in the center of a series point or on its edge. Applies to bar-like and bubble series only."
            },
            "shared": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies the kind of information to display in a tooltip."
            }
          }
        },
        "adaptiveLayout": {
          "Description": "Specifies adaptive layout options.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the widget's height small enough for the layout to begin adapting."
            },
            "keepLabels": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not point labels should be kept when the layout is adapting."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the widget's width small enough for the layout to begin adapting."
            }
          }
        },
        "animation": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies animation options.",
          "Options": {
            "duration": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies how long the animation runs in milliseconds."
            },
            "easing": {
              "EnumName": "VizAnimationEasing",
              "Description": "Specifies the easing function of the animation."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the animation in the widget."
            },
            "maxPointCountSupported": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many series points the widget should have before the animation will be disabled."
            }
          }
        },
        "customizeLabel": {
          "IsFunc": true,
          "Description": "Customizes the appearance of an individual point label."
        },
        "customizePoint": {
          "IsFunc": true,
          "Description": "Customizes the appearance of an individual series point."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "Specifies the origin of data for the widget."
        },
        "legend": {
          "Description": "Specifies the options of a chart's legend.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the legend's background."
            },
            "border": {
              "Description": "Specifies legend border options.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies border color."
                },
                "cornerRadius": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a radius of a border's corners in degrees."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the border's dash style in the legend."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a border's opacity."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets a legend's border visibility state."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a border's width, in pixels."
                }
              }
            },
            "columnCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many columns it takes to arrange legend items."
            },
            "columnItemSpacing": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a blank space between legend columns in pixels."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in the legend."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies a legend's position on the chart."
            },
            "itemsAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the alignment of legend items."
            },
            "itemTextPosition": {
              "EnumName": "Position",
              "Description": "Specifies the position of text relative to the item marker."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the distance between the legend and surrounding widget elements or container borders in pixels.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's left margin in pixels."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's right margin in pixels."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                }
              }
            },
            "markerSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the size of item markers in the legend in pixels."
            },
            "orientation": {
              "EnumName": "Orientation",
              "Description": "Specifies whether to place legend items horizontally or vertically."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a blank space between a legend's left/right boundaries and the inner item boundaries in pixels."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a blank space between a legend's top/bottom boundaries and the inner item boundaries in pixels."
            },
            "rowCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many rows it takes to arrange legend items."
            },
            "rowItemSpacing": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a blank space between legend rows in pixels."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies a legend's position on the chart."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies the visibility state of the chart's legend."
            },
            "customizeHint": {
              "IsFunc": true,
              "Description": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item."
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by a legend item."
            },
            "hoverMode": {
              "EnumName": "ChartLegendHoverMode",
              "Description": "Specifies what series elements to highlight when a corresponding item in the legend is hovered over."
            },
            "position": {
              "EnumName": "RelativePosition",
              "Description": "Specifies whether the legend is located outside or inside the chart's plot."
            }
          }
        },
        "onDone": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the done event."
        },
        "onPointClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pointClick event."
        },
        "onPointHoverChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pointHoverChanged event."
        },
        "onPointSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pointSelectionChanged event."
        },
        "onTooltipHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipHidden event."
        },
        "onTooltipShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipShown event."
        },
        "palette": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "EnumName": "VizPalette",
          "SingularName": "palette",
          "Description": "Sets the name of the palette to be used in the chart. Alternatively, an array of colors can be set as a custom palette to be used within this chart."
        },
        "pointSelectionMode": {
          "EnumName": "ChartElementSelectionMode",
          "Description": "Specifies whether a single point or multiple points can be selected in the chart."
        },
        "adjustOnZoom": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to adjust the value axis when zooming the widget."
        },
        "argumentAxis": {
          "Description": "Configures the argument axis.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the axis line."
            },
            "constantLineStyle": {
              "Description": "Specifies the appearance of those constant lines that belong to the argument axis.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of constant lines."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of constant lines."
                },
                "label": {
                  "Description": "Specifies the appearance of the labels of those constant lines that belong to the argument axis.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for constant line labels."
                    },
                    "position": {
                      "EnumName": "RelativePosition",
                      "Description": "Specifies the position of constant line labels on the chart plot."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Makes constant line labels visible."
                    },
                    "horizontalAlignment": {
                      "EnumName": "HorizontalAlignment",
                      "Description": "Aligns constant line labels in the horizontal direction."
                    },
                    "verticalAlignment": {
                      "EnumName": "VerticalAlignment",
                      "Description": "Aligns constant line labels in the vertical direction."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right side of a constant line and the constant line label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom side of a constant line and the constant line label."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of constant lines in pixels."
                }
              }
            },
            "discreteAxisDivisionMode": {
              "EnumName": "DiscreteAxisDivisionMode",
              "Description": "Specifies whether ticks and grid lines should cross axis labels or lie between them. Applies only to the axes of the \"discrete\" type."
            },
            "grid": {
              "Description": "Configures the grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of grid lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent grid lines should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes grid lines visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of grid lines in pixels."
                }
              }
            },
            "inverted": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Inverts the axis."
            },
            "label": {
              "Description": "Configures the labels of the argument axis.",
              "Options": {
                "alignment": {
                  "EnumName": "HorizontalAlignment",
                  "Description": "Aligns axis labels in relation to ticks."
                },
                "displayMode": {
                  "EnumName": "ChartLabelDisplayMode",
                  "Description": "Allows you to rotate or stagger axis labels."
                },
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for axis labels."
                },
                "indentFromAxis": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Adds a pixel-measured empty space between an axis and its labels."
                },
                "overlappingBehavior": {
                  "EnumName": "OverlappingBehavior",
                  "Description": "Decides how to arrange axis labels when there is not enough space to keep all of them.",
                  "Options": {
                    "mode": {
                      "IsDeprecated": true,
                      "EnumName": "OverlappingBehavior",
                      "Description": "Instead, use the overlappingBehavior option directly."
                    },
                    "rotationAngle": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "IsDeprecated": true,
                      "Description": "Use the rotationAngle option instead."
                    },
                    "staggeringSpacing": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "IsDeprecated": true,
                      "Description": "Use the staggeringSpacing option instead."
                    }
                  }
                },
                "rotationAngle": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the rotation angle of axis labels. Applies only if displayMode or overlappingBehavior is \"rotate\"."
                },
                "staggeringSpacing": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Adds a pixel-measured empty space between two staggered rows of axis labels. Applies only if displayMode or overlappingBehavior is \"stagger\"."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows/hides axis labels."
                },
                "customizeHint": {
                  "IsFunc": true,
                  "Description": "Specifies the hint that appears when a user points to an axis label."
                },
                "customizeText": {
                  "IsFunc": true,
                  "Description": "Customizes the text displayed by axis labels."
                },
                "format": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "EnumName": "Format",
                  "Description": "Specifies the format of the arguments displayed by axis labels."
                },
                "precision": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the argumentAxis | label | format | precision option instead."
                }
              }
            },
            "maxValueMargin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Controls the empty space between the maximum series points and the axis. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "minorGrid": {
              "Description": "Configures the minor grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the lines of the minor grid."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent the lines of the minor grid should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes the minor grid visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a width for the lines of the minor grid in pixels."
                }
              }
            },
            "minorTick": {
              "Description": "Configures the appearance of minor axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the length of minor ticks in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent minor ticks should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes minor ticks visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of minor ticks in pixels."
                }
              }
            },
            "minValueMargin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Controls the empty space between the minimum series points and the axis. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies how transparent the axis line should be."
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Reserves a pixel-measured space for the axis."
            },
            "setTicksAtUnitBeginning": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Rounds off date-time values to the nearest tick interval. Applies only to the axes of the \"continuous\" type containing date-time values."
            },
            "stripStyle": {
              "Description": "Configures the appearance of strips.",
              "Options": {
                "label": {
                  "Description": "Configures the appearance of strip labels.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for strip labels."
                    },
                    "horizontalAlignment": {
                      "EnumName": "HorizontalAlignment",
                      "Description": "Aligns strip labels in the horizontal direction."
                    },
                    "verticalAlignment": {
                      "EnumName": "VerticalAlignment",
                      "Description": "Aligns strip labels in the vertical direction."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right border of a strip and the strip label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom border of a strip and the strip label."
                }
              }
            },
            "tick": {
              "Description": "Configures the appearance of major axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the length of ticks in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent ticks should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes ticks visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of ticks in pixels."
                }
              }
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the axis title.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the axis title."
                },
                "margin": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Adds a pixel-measured empty space between the axis title and axis labels."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the axis title."
                }
              }
            },
            "valueMarginsEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Adds an empty space between the axis and the minimum and maximum series points."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Makes the axis line visible."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the axis line in pixels."
            },
            "argumentType": {
              "EnumName": "ChartDataType",
              "Description": "Casts arguments to a specified data type."
            },
            "axisDivisionFactor": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the minimum distance between two neighboring major ticks in pixels. Applies only to the axes of the \"continuous\" and \"logarithmic\" types."
            },
            "categories": {
              "PrimitiveTypes": [
                "double",
                "string",
                "date"
              ],
              "IsCollection": true,
              "SingularName": "category",
              "Description": "Specifies the order of categories on an axis of the \"discrete\" type."
            },
            "constantLines": {
              "IsCollection": true,
              "SingularName": "constantLine",
              "Description": "Declares a collection of constant lines belonging to the argument axis.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of constant lines."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of constant lines."
                },
                "label": {
                  "Description": "Configures the constant line label.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for constant line labels."
                    },
                    "position": {
                      "EnumName": "RelativePosition",
                      "Description": "Specifies the position of constant line labels on the chart plot."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Makes constant line labels visible."
                    },
                    "horizontalAlignment": {
                      "EnumName": "HorizontalAlignment",
                      "Description": "Aligns constant line labels in the horizontal direction."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text of a constant line label. By default, equals to the value of the constant line."
                    },
                    "verticalAlignment": {
                      "EnumName": "VerticalAlignment",
                      "Description": "Aligns constant line labels in the vertical direction."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right side of a constant line and the constant line label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom side of a constant line and the constant line label."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of constant lines in pixels."
                },
                "value": {
                  "PrimitiveTypes": [
                    "date",
                    "double",
                    "string"
                  ],
                  "Description": "Specifies the value indicated by a constant line. Setting this option is necessary."
                }
              }
            },
            "hoverMode": {
              "EnumName": "ArgumentAxisHoverMode",
              "Description": "Specifies chart elements to be highlighted when a user points to an axis label."
            },
            "logarithmBase": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the value to be raised to a power when generating ticks for an axis of the \"logarithmic\" type."
            },
            "max": {
              "PrimitiveTypes": [
                "date",
                "double",
                "string"
              ],
              "Description": "Coupled with the min option, focuses the widget on a specific chart segment. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "min": {
              "PrimitiveTypes": [
                "date",
                "double",
                "string"
              ],
              "Description": "Coupled with the max option, focuses the widget on a specific chart segment. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "minorTickCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many minor ticks to place between two neighboring major ticks."
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "VizTimeInterval",
              "Description": "Specifies the interval between minor ticks. Applies only to the axes of the \"continuous\" type.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "position": {
              "EnumName": "Position",
              "Description": "Relocates the argument axis."
            },
            "strips": {
              "IsCollection": true,
              "SingularName": "strip",
              "Description": "Declares a collection of strips belonging to the argument axis.",
              "Options": {
                "label": {
                  "Description": "Configures the strip label.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for strip labels."
                    },
                    "horizontalAlignment": {
                      "EnumName": "HorizontalAlignment",
                      "Description": "Aligns strip labels in the horizontal direction."
                    },
                    "verticalAlignment": {
                      "EnumName": "VerticalAlignment",
                      "Description": "Aligns strip labels in the vertical direction."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text of the strip label."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right border of a strip and the strip label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom border of a strip and the strip label."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the strip."
                },
                "endValue": {
                  "PrimitiveTypes": [
                    "date",
                    "double",
                    "string"
                  ],
                  "Description": "Along with the startValue option, limits the strip."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "date",
                    "double",
                    "string"
                  ],
                  "Description": "Along with the endValue option, limits the strip."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "VizTimeInterval",
              "Description": "Specifies the interval between major ticks.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "type": {
              "EnumName": "AxisScaleType",
              "Description": "Specifies the type of the argument axis."
            }
          }
        },
        "barWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Controls the width of bars in the widget. Applies only to bar-like series and when the equalBarWidth option is true."
        },
        "commonAxisSettings": {
          "Description": "Defines common settings for both the argument and value axis in a chart.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the axis line."
            },
            "constantLineStyle": {
              "Description": "Configures the appearance of all constant lines in the widget.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of constant lines."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of constant lines."
                },
                "label": {
                  "Description": "Configures constant line labels.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for constant line labels."
                    },
                    "position": {
                      "EnumName": "RelativePosition",
                      "Description": "Specifies the position of constant line labels on the chart plot."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Makes constant line labels visible."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right side of a constant line and the constant line label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom side of a constant line and the constant line label."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of constant lines in pixels."
                }
              }
            },
            "discreteAxisDivisionMode": {
              "EnumName": "DiscreteAxisDivisionMode",
              "Description": "Specifies whether ticks and grid lines should cross axis labels or lie between them. Applies only to the axes of the \"discrete\" type."
            },
            "grid": {
              "Description": "Configures the grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of grid lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent grid lines should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes grid lines visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of grid lines in pixels."
                }
              }
            },
            "inverted": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Inverts the axis."
            },
            "label": {
              "Description": "Configures axis labels.",
              "Options": {
                "alignment": {
                  "EnumName": "HorizontalAlignment",
                  "Description": "Aligns axis labels in relation to ticks."
                },
                "displayMode": {
                  "EnumName": "ChartLabelDisplayMode",
                  "Description": "Allows you to rotate or stagger axis labels."
                },
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for axis labels."
                },
                "indentFromAxis": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Adds a pixel-measured empty space between an axis and its labels."
                },
                "overlappingBehavior": {
                  "EnumName": "OverlappingBehavior",
                  "Description": "Decides how to arrange axis labels when there is not enough space to keep all of them.",
                  "Options": {
                    "mode": {
                      "IsDeprecated": true,
                      "EnumName": "OverlappingBehavior",
                      "Description": "Instead, use the overlappingBehavior option directly."
                    },
                    "rotationAngle": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "IsDeprecated": true,
                      "Description": "Use the rotationAngle option instead."
                    },
                    "staggeringSpacing": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "IsDeprecated": true,
                      "Description": "Use the staggeringSpacing option instead."
                    }
                  }
                },
                "rotationAngle": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the rotation angle of axis labels. Applies only if displayMode or overlappingBehavior is \"rotate\"."
                },
                "staggeringSpacing": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Adds a pixel-measured empty space between two staggered rows of axis labels. Applies only if displayMode or overlappingBehavior is \"stagger\"."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows/hides axis labels."
                }
              }
            },
            "maxValueMargin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Controls the empty space between the maximum series points and the axis. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "minorGrid": {
              "Description": "Configures the minor grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the lines of the minor grid."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent the lines of the minor grid should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes the minor grid visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a width for the lines of the minor grid in pixels."
                }
              }
            },
            "minorTick": {
              "Description": "Configures the appearance of minor axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the length of minor ticks in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent minor ticks should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes minor ticks visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of minor ticks in pixels."
                }
              }
            },
            "minValueMargin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Controls the empty space between the minimum series points and the axis. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies how transparent the axis line should be."
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Reserves a pixel-measured space for the axis."
            },
            "setTicksAtUnitBeginning": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Rounds off date-time values to the nearest tick interval. Applies only to the axes of the \"continuous\" type containing date-time values."
            },
            "stripStyle": {
              "Description": "Configures the appearance of strips.",
              "Options": {
                "label": {
                  "Description": "Configures the appearance of strip labels.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for strip labels."
                    },
                    "horizontalAlignment": {
                      "EnumName": "HorizontalAlignment",
                      "Description": "Aligns strip labels in the horizontal direction."
                    },
                    "verticalAlignment": {
                      "EnumName": "VerticalAlignment",
                      "Description": "Aligns strip labels in the vertical direction."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right border of a strip and the strip label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom border of a strip and the strip label."
                }
              }
            },
            "tick": {
              "Description": "Configures the appearance of major axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the length of ticks in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent ticks should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes ticks visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of ticks in pixels."
                }
              }
            },
            "title": {
              "Description": "Configures axis titles.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the axis title."
                },
                "margin": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Adds a pixel-measured empty space between the axis title and axis labels."
                }
              }
            },
            "valueMarginsEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Adds an empty space between the axis and the minimum and maximum series points."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Makes the axis line visible."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the axis line in pixels."
            }
          }
        },
        "commonPaneSettings": {
          "Description": "Defines common settings for all panes in a chart.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the pane's background."
            },
            "border": {
              "Description": "Configures the pane border.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows/hides the bottom border of the pane. Applies only when the border | visible option is true."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the pane border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the pane border."
                },
                "left": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows/hides the left border of the pane. Applies only when the border | visible option is true."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent the pane border should be."
                },
                "right": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows/hides the right border of the pane. Applies only when the border | visible option is true."
                },
                "top": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows/hides the top border of the pane. Applies only when the border | visible option is true."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows the pane border."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the pane border in pixels."
                }
              }
            }
          }
        },
        "commonSeriesSettings": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Specifies settings common for all series in the chart."
        },
        "containerBackgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Colors the background of the chart container."
        },
        "crosshair": {
          "Description": "Configures the crosshair feature.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the crosshair lines."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies the dash style of the crosshair lines."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the crosshair."
            },
            "horizontalLine": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Configures the horizontal crosshair line individually.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the horizontal crosshair line."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the horizontal crosshair line."
                },
                "label": {
                  "Description": "Configures the label that belongs to the horizontal crosshair line.",
                  "Options": {
                    "backgroundColor": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Paints the background of the label that belongs to the horizontal crosshair line."
                    },
                    "customizeText": {
                      "IsFunc": true,
                      "Description": "Customizes the text displayed by the label that belongs to the horizontal crosshair line."
                    },
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for the label of the horizontal crosshair line."
                    },
                    "format": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "ComplexTypes": [
                        "Format"
                      ],
                      "EnumName": "Format",
                      "Description": "Formats the point value before it will be displayed in the crosshair label."
                    },
                    "precision": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "IsDeprecated": true,
                      "Description": "Use the crosshair | horizontalLine | label | format | precision option instead."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Makes the label of the horizontal crosshair line visible. Applies only if the crosshair feature is enabled and the horizontal line is visible."
                    }
                  }
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent the horizontal crosshair line should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether to show the horizontal crosshair line or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the horizontal crosshair line in pixels."
                }
              }
            },
            "label": {
              "Description": "Configures the crosshair labels.",
              "Options": {
                "backgroundColor": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Paints the background of the crosshair labels."
                },
                "customizeText": {
                  "IsFunc": true,
                  "Description": "Customizes the text displayed by the crosshair labels."
                },
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the crosshair labels."
                },
                "format": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "EnumName": "Format",
                  "Description": "Formats the point value/argument before it will be displayed in the crosshair label."
                },
                "precision": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the crosshair | label | format | precision option instead."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes the crosshair labels visible. Applies only if the crosshair feature is enabled."
                }
              }
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies how transparent the crosshair lines should be."
            },
            "verticalLine": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Configures the vertical crosshair line individually.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the vertical crosshair line."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the vertical crosshair line."
                },
                "label": {
                  "Description": "Configures the label that belongs to the vertical crosshair line.",
                  "Options": {
                    "backgroundColor": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Paints the background of the label that belongs to the vertical crosshair line."
                    },
                    "customizeText": {
                      "IsFunc": true,
                      "Description": "Customizes the text displayed by the label that belongs to the vertical crosshair line."
                    },
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for the label of the vertical crosshair line."
                    },
                    "format": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "ComplexTypes": [
                        "Format"
                      ],
                      "EnumName": "Format",
                      "Description": "Formats the point argument before it will be displayed in the crosshair label."
                    },
                    "precision": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "IsDeprecated": true,
                      "Description": "Use the crosshair | verticalLine | label | format | precision option instead."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Makes the label of the vertical crosshair line visible. Applies only if the crosshair feature is enabled and the vertical line is visible."
                    }
                  }
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent the vertical crosshair line should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether to show the vertical crosshair line or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the vertical crosshair line in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the crosshair lines."
            }
          }
        },
        "dataPrepareSettings": {
          "Description": "Processes data before visualizing it.",
          "Options": {
            "checkTypeForAllData": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Validates the type of each value coming from the data source."
            },
            "convertToAxisDataType": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Converts data coming from a data source into a data type supported by the axis."
            },
            "sortingMethod": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies the sorting order in which series points should be drawn."
            }
          }
        },
        "defaultPane": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which pane should be used by default."
        },
        "equalBarWidth": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether all bars should have equal width, even if some values are missing from a series. Applies only to bar-like series."
        },
        "maxBubbleSize": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a coefficient determining the diameter of the largest bubble."
        },
        "minBubbleSize": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the diameter of the smallest bubble measured in pixels."
        },
        "negativesAsZeroes": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Forces the widget to treat negative values as zeroes. Applies to stacked-like series only."
        },
        "onArgumentAxisClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the argumentAxisClick event."
        },
        "onLegendClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the legendClick event."
        },
        "onSeriesClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the seriesClick event."
        },
        "onSeriesHoverChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the seriesHoverChanged event."
        },
        "onSeriesSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the seriesSelectionChanged event."
        },
        "onZoomEnd": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the zoomEnd event."
        },
        "onZoomStart": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the zoomStart event."
        },
        "panes": {
          "IsCollection": true,
          "SingularName": "pane",
          "Description": "Declares a collection of panes.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the pane's background."
            },
            "border": {
              "Description": "Configures the pane border.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows/hides the bottom border of the pane. Applies only when the border | visible option is true."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the pane border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the pane border."
                },
                "left": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows/hides the left border of the pane. Applies only when the border | visible option is true."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent the pane border should be."
                },
                "right": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows/hides the right border of the pane. Applies only when the border | visible option is true."
                },
                "top": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows/hides the top border of the pane. Applies only when the border | visible option is true."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows the pane border."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the pane border in pixels."
                }
              }
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the pane."
            }
          }
        },
        "resolveLabelOverlapping": {
          "EnumName": "ChartResolveLabelOverlapping",
          "Description": "Specifies how the chart must behave when series point labels overlap."
        },
        "rotated": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Swaps the axes around making the value axis horizontal and the argument axis vertical."
        },
        "scrollBar": {
          "Description": "Specifies the settings of the scroll bar.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the scroll bar."
            },
            "offset": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the spacing between the scroll bar and the chart's plot in pixels."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of the scroll bar."
            },
            "position": {
              "EnumName": "Position",
              "Description": "Specifies the position of the scroll bar in the chart."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether the scroll bar is visible or not."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the scroll bar in pixels."
            }
          }
        },
        "scrollingMode": {
          "EnumName": "ChartPointerType",
          "Description": "Enables scrolling in your chart."
        },
        "series": {
          "ComplexTypes": [
            "ChartSeries"
          ],
          "IsCollection": true,
          "SingularName": "series",
          "Description": "Specifies options for Chart widget series."
        },
        "seriesSelectionMode": {
          "EnumName": "ChartElementSelectionMode",
          "Description": "Specifies whether a single series or multiple series can be selected in the chart."
        },
        "seriesTemplate": {
          "Description": "Defines options for the series template.",
          "Options": {
            "customizeSeries": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns a series object with individual series settings."
            },
            "nameField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a data source field that represents the series name."
            }
          }
        },
        "synchronizeMultiAxes": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates whether or not to synchronize value axes when they are displayed on a single pane."
        },
        "useAggregation": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to filter the series points depending on their quantity."
        },
        "valueAxis": {
          "IsCollection": true,
          "SingularName": "valueAxis",
          "Description": "Configures the value axis.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the axis line."
            },
            "constantLineStyle": {
              "Description": "Specifies the appearance of those constant lines that belong to the value axis.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of constant lines."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of constant lines."
                },
                "label": {
                  "Description": "Specifies the appearance of the labels of those constant lines that belong to the value axis.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for constant line labels."
                    },
                    "position": {
                      "EnumName": "RelativePosition",
                      "Description": "Specifies the position of constant line labels on the chart plot."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Makes constant line labels visible."
                    },
                    "horizontalAlignment": {
                      "EnumName": "HorizontalAlignment",
                      "Description": "Aligns constant line labels in the horizontal direction."
                    },
                    "verticalAlignment": {
                      "EnumName": "VerticalAlignment",
                      "Description": "Aligns constant line labels in the vertical direction."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right side of a constant line and the constant line label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom side of a constant line and the constant line label."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of constant lines in pixels."
                }
              }
            },
            "discreteAxisDivisionMode": {
              "EnumName": "DiscreteAxisDivisionMode",
              "Description": "Specifies whether ticks and grid lines should cross axis labels or lie between them. Applies only to the axes of the \"discrete\" type."
            },
            "grid": {
              "Description": "Configures the grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of grid lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent grid lines should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes grid lines visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of grid lines in pixels."
                }
              }
            },
            "inverted": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Inverts the axis."
            },
            "label": {
              "Description": "Configures the labels of the value axis.",
              "Options": {
                "alignment": {
                  "EnumName": "HorizontalAlignment",
                  "Description": "Aligns axis labels in relation to ticks."
                },
                "displayMode": {
                  "EnumName": "ChartLabelDisplayMode",
                  "Description": "Allows you to rotate or stagger axis labels."
                },
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for axis labels."
                },
                "indentFromAxis": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Adds a pixel-measured empty space between an axis and its labels."
                },
                "overlappingBehavior": {
                  "EnumName": "OverlappingBehavior",
                  "Description": "Decides how to arrange axis labels when there is not enough space to keep all of them.",
                  "Options": {
                    "mode": {
                      "IsDeprecated": true,
                      "EnumName": "OverlappingBehavior",
                      "Description": "Instead, use the overlappingBehavior option directly."
                    },
                    "rotationAngle": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "IsDeprecated": true,
                      "Description": "Use the rotationAngle option instead."
                    },
                    "staggeringSpacing": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "IsDeprecated": true,
                      "Description": "Use the staggeringSpacing option instead."
                    }
                  }
                },
                "rotationAngle": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the rotation angle of axis labels. Applies only if displayMode or overlappingBehavior is \"rotate\"."
                },
                "staggeringSpacing": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Adds a pixel-measured empty space between two staggered rows of axis labels. Applies only if displayMode or overlappingBehavior is \"stagger\"."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows/hides axis labels."
                },
                "customizeHint": {
                  "IsFunc": true,
                  "Description": "Specifies the hint that appears when a user points to an axis label."
                },
                "customizeText": {
                  "IsFunc": true,
                  "Description": "Customizes the text displayed by axis labels."
                },
                "format": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "EnumName": "Format",
                  "Description": "Specifies the format of the values displayed by axis labels."
                },
                "precision": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the valueAxis | label | format | precision option instead."
                }
              }
            },
            "maxValueMargin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Controls the empty space between the maximum series points and the axis. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "minorGrid": {
              "Description": "Configures the minor grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the lines of the minor grid."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent the lines of the minor grid should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes the minor grid visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a width for the lines of the minor grid in pixels."
                }
              }
            },
            "minorTick": {
              "Description": "Configures the appearance of minor axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the length of minor ticks in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent minor ticks should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes minor ticks visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of minor ticks in pixels."
                }
              }
            },
            "minValueMargin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Controls the empty space between the minimum series points and the axis. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies how transparent the axis line should be."
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Reserves a pixel-measured space for the axis."
            },
            "setTicksAtUnitBeginning": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Rounds off date-time values to the nearest tick interval. Applies only to the axes of the \"continuous\" type containing date-time values."
            },
            "stripStyle": {
              "Description": "Configures the appearance of strips.",
              "Options": {
                "label": {
                  "Description": "Configures the appearance of strip labels.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for strip labels."
                    },
                    "horizontalAlignment": {
                      "EnumName": "HorizontalAlignment",
                      "Description": "Aligns strip labels in the horizontal direction."
                    },
                    "verticalAlignment": {
                      "EnumName": "VerticalAlignment",
                      "Description": "Aligns strip labels in the vertical direction."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right border of a strip and the strip label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom border of a strip and the strip label."
                }
              }
            },
            "tick": {
              "Description": "Configures the appearance of major axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the length of ticks in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent ticks should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes ticks visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of ticks in pixels."
                }
              }
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the axis title.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the axis title."
                },
                "margin": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Adds a pixel-measured empty space between the axis title and axis labels."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the axis title."
                }
              }
            },
            "valueMarginsEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Adds an empty space between the axis and the minimum and maximum series points."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Makes the axis line visible."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the axis line in pixels."
            },
            "axisDivisionFactor": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the minimum distance between two neighboring major ticks in pixels. Applies only to the axes of the \"continuous\" and \"logarithmic\" types."
            },
            "categories": {
              "PrimitiveTypes": [
                "double",
                "string",
                "date"
              ],
              "IsCollection": true,
              "SingularName": "category",
              "Description": "Specifies the order of categories on an axis of the \"discrete\" type."
            },
            "constantLines": {
              "IsCollection": true,
              "SingularName": "constantLine",
              "Description": "Declares a collection of constant lines belonging to the value axis.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of constant lines."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of constant lines."
                },
                "label": {
                  "Description": "Configures the constant line label.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for constant line labels."
                    },
                    "position": {
                      "EnumName": "RelativePosition",
                      "Description": "Specifies the position of constant line labels on the chart plot."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Makes constant line labels visible."
                    },
                    "horizontalAlignment": {
                      "EnumName": "HorizontalAlignment",
                      "Description": "Aligns constant line labels in the horizontal direction."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text of a constant line label. By default, equals to the value of the constant line."
                    },
                    "verticalAlignment": {
                      "EnumName": "VerticalAlignment",
                      "Description": "Aligns constant line labels in the vertical direction."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right side of a constant line and the constant line label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom side of a constant line and the constant line label."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of constant lines in pixels."
                },
                "value": {
                  "PrimitiveTypes": [
                    "date",
                    "double",
                    "string"
                  ],
                  "Description": "Specifies the value indicated by a constant line. Setting this option is necessary."
                }
              }
            },
            "logarithmBase": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the value to be raised to a power when generating ticks for an axis of the \"logarithmic\" type."
            },
            "max": {
              "PrimitiveTypes": [
                "date",
                "double",
                "string"
              ],
              "Description": "Coupled with the min option, focuses the widget on a specific chart segment. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "min": {
              "PrimitiveTypes": [
                "date",
                "double",
                "string"
              ],
              "Description": "Coupled with the max option, focuses the widget on a specific chart segment. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "minorTickCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many minor ticks to place between two neighboring major ticks."
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "VizTimeInterval",
              "Description": "Specifies the interval between minor ticks. Applies only to the axes of the \"continuous\" type.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "multipleAxesSpacing": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Adds a pixel-measured empty space between two side-by-side value axes. Applies if several value axes are located on one side of the chart."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the value axis."
            },
            "pane": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Binds the value axis to a pane."
            },
            "position": {
              "EnumName": "Position",
              "Description": "Relocates the value axis."
            },
            "showZero": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to show zero on the value axis."
            },
            "strips": {
              "IsCollection": true,
              "SingularName": "strip",
              "Description": "Declares a collection of strips belonging to the value axis.",
              "Options": {
                "label": {
                  "Description": "Configures the strip label.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for strip labels."
                    },
                    "horizontalAlignment": {
                      "EnumName": "HorizontalAlignment",
                      "Description": "Aligns strip labels in the horizontal direction."
                    },
                    "verticalAlignment": {
                      "EnumName": "VerticalAlignment",
                      "Description": "Aligns strip labels in the vertical direction."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text of the strip label."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right border of a strip and the strip label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom border of a strip and the strip label."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the strip."
                },
                "endValue": {
                  "PrimitiveTypes": [
                    "date",
                    "double",
                    "string"
                  ],
                  "Description": "Along with the startValue option, limits the strip."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "date",
                    "double",
                    "string"
                  ],
                  "Description": "Along with the endValue option, limits the strip."
                }
              }
            },
            "synchronizedValue": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Synchronizes two or more value axes with each other at a specific value."
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "VizTimeInterval",
              "Description": "Specifies the interval between major ticks.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "type": {
              "EnumName": "AxisScaleType",
              "Description": "Specifies the type of the value axis."
            },
            "valueType": {
              "EnumName": "ChartDataType",
              "Description": "Casts values to a specified data type."
            }
          }
        },
        "zoomingMode": {
          "EnumName": "ChartPointerType",
          "Description": "Enables zooming in your chart."
        }
      }
    },
    "dxCheckBox": {
      "Description": "The CheckBox is a small box, which when selected by the end user, shows that a particular feature has been enabled or a specific option has been chosen.",
      "Module": "ui/check_box",
      "IsEditor": true,
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies the widget state."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed by the check box."
        }
      }
    },
    "dxCircularGauge": {
      "Description": "The CircularGauge is a widget that indicates values on a circular numeric scale.",
      "Module": "viz/circular_gauge",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports right-to-left representation."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "IsCollection": true,
              "EnumName": "ExportFormat",
              "SingularName": "format",
              "Description": "Specifies a set of formats available for exporting into."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export | enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in IE9 and Safari browsers."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDrawn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the drawn event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "onIncidentOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the incidentOccurred event."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "size": {
          "Description": "Specifies the size of the widget in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "EnumName": "VizTheme",
          "Description": "Sets the name of the theme to be used in the widget."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget title.",
          "Options": {
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the widget subtitle.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title text."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies the title's alignment in a vertical direction."
            },
            "position": {
              "IsDeprecated": true,
              "EnumName": "GaugeTitlePosition",
              "Description": "Use the horizontalAlignment and verticalAlignment options instead."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Specifies the appearance of the tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether the tooltip's border is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "jquery"
              ],
              "Description": "Specifies the container to draw tooltips inside of it."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies the font of the text displayed by a tooltip."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies the format of the value displayed by a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of tooltips."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space on the left and the right of the text displayed by a tooltip."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space above and below the text displayed by a tooltip."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | format | precision option instead."
            },
            "shadow": {
              "Description": "Specifies the appearance of the tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the blur distance of the tooltip's shadow."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the horizontal offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the vertical offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the z-index of tooltips."
            },
            "customizeTooltip": {
              "IsFunc": true,
              "Description": "Allows you to change the appearance of specified tooltips."
            }
          }
        },
        "animation": {
          "Description": "Specifies animation options.",
          "Options": {
            "duration": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Determines how long animation runs."
            },
            "easing": {
              "EnumName": "VizAnimationEasing",
              "Description": "Specifies the animation easing mode."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not animation is enabled."
            }
          }
        },
        "containerBackgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the parent page element."
        },
        "onTooltipHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipHidden event."
        },
        "onTooltipShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipShown event."
        },
        "rangeContainer": {
          "Description": "Specifies gauge range container options.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a range container's background color."
            },
            "offset": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the offset of the range container from an invisible scale line in pixels."
            },
            "palette": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "EnumName": "VizPalette",
              "SingularName": "palette",
              "Description": "Sets the name of the palette or an array of colors to be used for coloring the gauge range container."
            },
            "ranges": {
              "IsCollection": true,
              "SingularName": "range",
              "Description": "An array of objects representing ranges contained in the range container.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color of a range."
                },
                "endValue": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies an end value of a range."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a start value of a range."
                }
              }
            },
            "orientation": {
              "EnumName": "CircularGaugeElementOrientation",
              "Description": "Specifies the orientation of the range container in the CircularGauge widget."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the range container's width in pixels."
            }
          }
        },
        "scale": {
          "Description": "Specifies a gauge's scale options.",
          "Options": {
            "customMinorTicks": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsCollection": true,
              "SingularName": "customMinorTick",
              "Description": "Specifies an array of custom minor ticks."
            },
            "customTicks": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsCollection": true,
              "SingularName": "customTick",
              "Description": "Specifies an array of custom major ticks."
            },
            "endValue": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the end value for the scale of the gauge."
            },
            "hideFirstLabel": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the scale | label | overlappingBehavior | hideFirstOrLast option instead."
            },
            "hideFirstTick": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the scale | label | overlappingBehavior | hideFirstOrLast option instead."
            },
            "hideLastLabel": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the scale | label | overlappingBehavior | hideFirstOrLast option instead."
            },
            "hideLastTick": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the scale | label | overlappingBehavior | hideFirstOrLast option instead."
            },
            "label": {
              "Description": "Specifies common options for scale labels.",
              "Options": {
                "customizeText": {
                  "IsFunc": true,
                  "Description": "Specifies a callback function that returns the text to be displayed in scale labels."
                },
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the text displayed in the scale labels of the gauge."
                },
                "format": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "EnumName": "Format",
                  "Description": "Specifies a format for the text displayed in scale labels."
                },
                "overlappingBehavior": {
                  "EnumName": "ScaleLabelOverlappingBehavior",
                  "Description": "Decides how to arrange scale labels when there is not enough space to keep all of them.",
                  "Options": {
                    "useAutoArrangement": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "IsDeprecated": true,
                      "Description": "Instead, use the overlappingBehavior option directly."
                    },
                    "hideFirstOrLast": {
                      "IsDeprecated": true,
                      "EnumName": "GaugeOverlappingBehavior",
                      "Description": "Use the scale | label | hideFirstOrLast option instead."
                    }
                  }
                },
                "precision": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the scale | label | format | precision option instead."
                },
                "useRangeColors": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether or not scale labels should be colored similarly to their corresponding ranges in the range container."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether or not scale labels are visible on the gauge."
                },
                "hideFirstOrLast": {
                  "EnumName": "GaugeOverlappingBehavior",
                  "Description": "Specifies which label to hide in case of overlapping."
                },
                "indentFromTick": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the spacing between scale labels and ticks."
                }
              }
            },
            "majorTick": {
              "IsDeprecated": true,
              "Description": "Use the tick option instead.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tick | color option instead."
                },
                "customTickValues": {
                  "PrimitiveTypes": [
                    "any"
                  ],
                  "IsCollection": true,
                  "IsDeprecated": true,
                  "SingularName": "customTickValue",
                  "Description": "Use the scale | customTicks option instead."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tick | length option instead."
                },
                "showCalculatedTicks": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "IsDeprecated": true,
                  "Description": "This option will be removed in the near future. Its use is not recommended."
                },
                "tickInterval": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the scale | tickInterval option instead."
                },
                "useTicksAutoArrangement": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the overlappingBehavior option instead."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tick | visible option instead."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tick | width option instead."
                }
              }
            },
            "minorTick": {
              "Description": "Specifies options of the gauge's minor ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the scale's minor ticks."
                },
                "customTickValues": {
                  "PrimitiveTypes": [
                    "any"
                  ],
                  "IsCollection": true,
                  "IsDeprecated": true,
                  "SingularName": "customTickValue",
                  "Description": "Use the scale | customMinorTicks option instead."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the length of the scale's minor ticks."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the scale's minor ticks."
                },
                "showCalculatedTicks": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "IsDeprecated": true,
                  "Description": "This option will be removed in the near future. Its use is not recommended."
                },
                "tickInterval": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the scale | minorTickInterval option instead."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether scale minor ticks are visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the scale's minor ticks."
                }
              }
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies an interval between minor ticks."
            },
            "startValue": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the start value for the scale of the gauge."
            },
            "tick": {
              "Description": "Specifies options of the gauge's major ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the scale's major ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the length of the scale's major ticks."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the scale's major ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether scale major ticks are visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the scale's major ticks."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies an interval between major ticks."
            },
            "orientation": {
              "EnumName": "CircularGaugeElementOrientation",
              "Description": "Specifies the orientation of scale ticks."
            }
          }
        },
        "subtitle": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsDeprecated": true,
          "Description": "Use the title | subtitle option instead.",
          "Options": {
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "IsDeprecated": true,
              "Description": "Use the title | subtitle | font option instead."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the title | subtitle | text option instead."
            }
          }
        },
        "subvalues": {
          "PrimitiveTypes": [
            "double"
          ],
          "IsCollection": true,
          "SingularName": "subvalue",
          "Description": "Specifies a set of subvalues to be designated by the subvalue indicators."
        },
        "value": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the main value on a gauge."
        },
        "geometry": {
          "Description": "Specifies the options required to set the geometry of the CircularGauge widget.",
          "Options": {
            "endAngle": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the end angle of the circular gauge's arc."
            },
            "startAngle": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the start angle of the circular gauge's arc."
            }
          }
        },
        "subvalueIndicator": {
          "ComplexTypes": [
            "GaugeIndicator"
          ],
          "Description": "Specifies the appearance options of subvalue indicators."
        },
        "valueIndicator": {
          "ComplexTypes": [
            "GaugeIndicator"
          ],
          "Description": "Specifies the appearance options of the value indicator."
        }
      }
    },
    "dxColorBox": {
      "Description": "The ColorBox is a widget that allows an end user to enter a color or pick it out from the drop-down editor.",
      "Module": "ui/color_box",
      "IsEditor": true,
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onFocusIn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusIn event."
        },
        "onFocusOut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusOut event."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the current value displayed by the widget."
        },
        "attr": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "onChange": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the change event."
        },
        "onCopy": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the copy event."
        },
        "onCut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cut event."
        },
        "onEnterKey": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the enterKey event."
        },
        "onInput": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the input event."
        },
        "onKeyDown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyDown event."
        },
        "onKeyPress": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyPress event."
        },
        "onKeyUp": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyUp event."
        },
        "onPaste": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the paste event."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is empty."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "acceptCustomValue": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget allows an end-user to enter a custom value."
        },
        "applyValueMode": {
          "EnumName": "EditorApplyValueMode",
          "Description": "Specifies the way an end-user applies the selected value."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "dropDownButtonTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "onClosed": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the closed event."
        },
        "onOpened": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the opened event."
        },
        "opened": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "applyButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed on the button that applies changes and closes the drop-down editor."
        },
        "cancelButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed on the button that cancels changes and closes the drop-down editor."
        },
        "editAlphaChannel": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget value includes the alpha channel component."
        },
        "fieldTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering the widget input field."
        },
        "keyStep": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the size of a step by which a handle is moved using a keyboard shortcut."
        }
      }
    },
    "dxContextMenu": {
      "Description": "The ContextMenu widget displays a single- or multi-level context menu. An end user invokes this menu by a right click or a long press.",
      "Module": "ui/context_menu",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The selected item object."
        },
        "selectedItems": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "selectedItem",
          "Description": "An array of currently selected item objects."
        },
        "selectionByClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "IsDeprecated": true,
          "Description": "Use the selectByClick option instead."
        },
        "selectionMode": {
          "EnumName": "MenuSelectionMode",
          "Description": "Specifies the selection mode supported by the menu."
        },
        "items": {
          "ComplexTypes": [
            "ContextMenuItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "Holds an array of menu items."
        },
        "disabledExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget item is disabled."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "itemsExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that contains an array of nested items."
        },
        "selectedExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget items is selected."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the CSS class to be applied to the root menu level and all submenus."
        },
        "selectByClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not an item becomes selected if a user clicks it."
        },
        "showSubmenuMode": {
          "EnumName": "ShowSubmenuMode",
          "Description": "Specifies options of submenu showing and hiding.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the delay of submenu show and hiding.",
              "Options": {
                "hide": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "The time span after which the submenu is hidden."
                },
                "show": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "The time span after which the submenu is shown."
                }
              }
            },
            "name": {
              "EnumName": "ShowSubmenuMode",
              "Description": "Specifies the mode name."
            }
          }
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user clicks outside of the context menu."
        },
        "onHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hidden event."
        },
        "onHiding": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hiding event."
        },
        "onPositioning": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the positioning event."
        },
        "onShowing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the showing event."
        },
        "onShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the shown event."
        },
        "showEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options for displaying the widget.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "The time span after which the widget is shown."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the event names on which the widget is shown."
            }
          }
        },
        "submenuDirection": {
          "EnumName": "ContextMenuSubmenuDirection",
          "Description": "Specifies the direction at which submenus are displayed."
        },
        "target": {
          "PrimitiveTypes": [
            "jquery"
          ],
          "Description": "The target element associated with the context menu."
        },
        "position": {
          "ComplexTypes": [
            "PositionConfig"
          ],
          "Description": "An object defining widget positioning options."
        }
      }
    },
    "dxDataGrid": {
      "Description": "The DataGrid is a widget that represents data from a local or remote source in the form of a grid. This widget offers such basic features as sorting, grouping, filtering, as well as more advanced capabilities, like state storing, export to Excel, master-detail interface, and many others.",
      "Module": "ui/data_grid",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "allowColumnReordering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can reorder columns."
        },
        "allowColumnResizing": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can resize columns."
        },
        "cacheEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether data should be cached."
        },
        "cellHintEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content."
        },
        "columnAutoWidth": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether columns should adjust their widths to the content."
        },
        "columnChooser": {
          "Description": "Configures the column chooser.",
          "Options": {
            "emptyPanelText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed by the column chooser when it is empty."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can open the column chooser."
            },
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the column chooser."
            },
            "mode": {
              "EnumName": "GridColumnChooserMode",
              "Description": "Specifies how a user manages columns using the column chooser."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title of the column chooser."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the column chooser."
            }
          }
        },
        "columnFixing": {
          "Description": "Configures column fixing.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables column fixing."
            },
            "texts": {
              "Description": "Contains options that specify texts for column fixing commands in the context menu of a column header.",
              "Options": {
                "fix": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu item that fixes a column."
                },
                "leftPosition": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu subitem that fixes a column to the left edge of the widget."
                },
                "rightPosition": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu subitem that fixes a column to the right edge of the widget."
                },
                "unfix": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu item that unfixes a column."
                }
              }
            }
          }
        },
        "columnHidingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is \"widget\"."
        },
        "columnMinWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the minimum width of columns."
        },
        "columnResizingMode": {
          "EnumName": "ColumnResizingMode",
          "Description": "Specifies how the widget resizes columns. Applies only if allowColumnResizing is true."
        },
        "columns": {
          "ComplexTypes": [
            "DataGridColumn"
          ],
          "IsCollection": true,
          "SingularName": "column",
          "Description": "An array of grid columns."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "Specifies the origin of data for the widget."
        },
        "dateSerializationFormat": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the serialization format for date-time values."
        },
        "editing": {
          "Description": "Configures editing.",
          "Options": {
            "allowAdding": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can add new rows."
            },
            "allowDeleting": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can delete rows."
            },
            "allowUpdating": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can update rows."
            },
            "form": {
              "ComplexTypes": [
                "dxFormOptions"
              ],
              "Description": "Configures the form. Used only if editing | mode is \"form\" or \"popup\"."
            },
            "mode": {
              "EnumName": "GridEditMode",
              "Description": "Specifies how a user edits data."
            },
            "popup": {
              "ComplexTypes": [
                "dxPopupOptions"
              ],
              "Description": "Configures the popup. Used only if editing | mode is \"popup\"."
            },
            "texts": {
              "Description": "Contains options that specify texts for editing-related UI elements.",
              "Options": {
                "addRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint that appears when a user pauses on the global \"Add\" button. Applies only if editing | allowAdding is true."
                },
                "cancelAllChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint that appears when a user pauses on the \"Discard\" button. Applies only if editing | mode is \"batch\"."
                },
                "cancelRowChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a button that cancels changes in a row. Applies only if editing | allowUpdating is true and editing | mode is \"row\"."
                },
                "confirmDeleteMessage": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a message that prompts a user to confirm deletion."
                },
                "confirmDeleteTitle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a title for the window that asks a user to confirm deletion."
                },
                "deleteRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for buttons that delete rows. Applies only if allowDeleting is true."
                },
                "editRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for buttons that switch rows into the editing state. Applies only if allowUpdating is true."
                },
                "saveAllChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint that appears when a user pauses on the global \"Save\" button. Applies only if editing | mode is \"batch\"."
                },
                "saveRowChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a button that saves changes made in a row. Applies only if allowUpdating is true."
                },
                "undeleteRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for buttons that recover deleted rows. Applies only if allowDeleting is true and editing | mode is \"batch\"."
                },
                "validationCancelChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint appearing when a user pauses on the button that cancels changes in a cell. Applies only if editing | mode is \"cell\" and data validation is enabled."
                }
              }
            },
            "editEnabled": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsDeprecated": true
            },
            "editMode": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsDeprecated": true
            },
            "insertEnabled": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsDeprecated": true
            },
            "removeEnabled": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsDeprecated": true
            }
          }
        },
        "errorRowEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates whether to show the error row."
        },
        "filterRow": {
          "Description": "Configures the filter row.",
          "Options": {
            "applyFilter": {
              "EnumName": "GridApplyFilterMode",
              "Description": "Specifies when to apply a filter."
            },
            "applyFilterText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for a hint that appears when a user pauses on a button that applies the filter."
            },
            "betweenEndText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a placeholder for the editor that specifies the end of a range when a user selects the \"between\" filter operation."
            },
            "betweenStartText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a placeholder for the editor that specifies the start of a range when a user selects the \"between\" filter operation."
            },
            "operationDescriptions": {
              "Description": "Specifies descriptions for filter operations on the filter list.",
              "Options": {
                "between": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"between\" operation."
                },
                "contains": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"contains\" operation."
                },
                "endsWith": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"endswith\" operation."
                },
                "equal": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"=\" operation."
                },
                "greaterThan": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \">\" operation."
                },
                "greaterThanOrEqual": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \">=\" operation."
                },
                "lessThan": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"<\" operation."
                },
                "lessThanOrEqual": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"<=\" operation."
                },
                "notContains": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"notcontains\" operation."
                },
                "notEqual": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"<>\" operation."
                },
                "startsWith": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"startswith\" operation."
                }
              }
            },
            "resetOperationText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the reset operation on the filter list."
            },
            "showAllText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the item that clears the applied filter. Used only when a cell of the filter row contains a select box."
            },
            "showOperationChooser": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether icons that open the filter lists are visible."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether the filter row is visible."
            }
          }
        },
        "headerFilter": {
          "Description": "Configures the header filter feature.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the popup menu that contains values for filtering."
            },
            "texts": {
              "Description": "Contains options that specify text for various elements of the popup menu.",
              "Options": {
                "cancel": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the button that closes the popup menu without applying a filter."
                },
                "emptyValue": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a name for the item that represents empty values in the popup menu."
                },
                "ok": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the button that applies the specified filter."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether header filter icons are visible."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the popup menu that contains values for filtering."
            }
          }
        },
        "loadPanel": {
          "Description": "Configures the load panel.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "bool",
                "string"
              ],
              "Description": "Specifies whether to show the load panel or not."
            },
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the load panel in pixels."
            },
            "indicatorSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a URL pointing to an image to be used as a loading indicator."
            },
            "showIndicator": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the loading indicator."
            },
            "showPane": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the pane of the load panel."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed on the load panel."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the load panel in pixels."
            }
          }
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text shown when the widget does not display any data."
        },
        "onAdaptiveDetailRowPreparing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the adaptiveDetailRowPreparing event. Executed before an adaptive detail row is rendered."
        },
        "onDataErrorOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the dataErrorOccurred event. Executed when an error occurs in the data source."
        },
        "onInitNewRow": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initNewRow event. Executed before a new row is added to the widget."
        },
        "onKeyDown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyDown event. Executed when the widget is in focus and a key has been pressed down."
        },
        "onRowCollapsed": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowCollapsed event. Executed after a row is collapsed."
        },
        "onRowCollapsing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowCollapsing event. Executed before a row is collapsed."
        },
        "onRowExpanded": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowExpanded event. Executed after a row is expanded."
        },
        "onRowExpanding": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowExpanding event. Executed before a row is expanded."
        },
        "onRowInserted": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowInserted event. Executed after a new row has been inserted into the data source."
        },
        "onRowInserting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowInserting event. Executed before a new row is inserted into the data source."
        },
        "onRowRemoved": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowRemoved event. Executed after a row has been removed from the data source."
        },
        "onRowRemoving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowRemoving event. Executed before a row is removed from the data source."
        },
        "onRowUpdated": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowUpdated event. Executed after a row has been updated in the data source."
        },
        "onRowUpdating": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowUpdating event. Executed before a row is updated in the data source."
        },
        "onRowValidating": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowValidating event. Executed after cells in a row are validated against validation rules."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event. Executed after selecting a row or clearing its selection."
        },
        "onToolbarPreparing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the toolbarPreparing event. Executed before the toolbar is created."
        },
        "rowAlternationEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether rows should be shaded differently."
        },
        "scrolling": {
          "Description": "Configures scrolling.",
          "Options": {
            "preloadEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether the widget should load pages adjacent to the current page. Applies only if scrolling | mode is \"virtual\"."
            },
            "scrollByContent": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can scroll the content with a swipe gesture. Applies only if native scrolling is disabled."
            },
            "scrollByThumb": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can scroll the content with the scrollbar. Applies only if native scrolling is disabled."
            },
            "showScrollbar": {
              "EnumName": "ShowScrollbarMode",
              "Description": "Specifies when to show the scrollbar."
            },
            "useNative": {
              "PrimitiveTypes": [
                "bool",
                "string"
              ],
              "Description": "Specifies whether the widget should use native or simulated scrolling."
            },
            "mode": {
              "EnumName": "GridScrollingMode",
              "Description": "Specifies the scrolling mode."
            }
          }
        },
        "searchPanel": {
          "Description": "Configures the search panel.",
          "Options": {
            "highlightCaseSensitive": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Notifies the widget whether search is case-sensitive to ensure proper highlightning of search results. Applies only if highlightSearchText is true."
            },
            "highlightSearchText": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether found substrings should be highlighted."
            },
            "placeholder": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a placeholder for the search panel."
            },
            "searchVisibleColumnsOnly": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether the widget should search against all columns or only visible ones."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a search string for the search panel."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether the search panel is visible or not."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the search panel in pixels."
            }
          }
        },
        "selectedRowKeys": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "selectedRowKey",
          "Description": "Specifies the keys of rows that must be selected initially. Applies only if selection | deferred is false."
        },
        "selection": {
          "Description": "Configures runtime selection.",
          "Options": {
            "allowSelectAll": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can select all rows at once."
            },
            "mode": {
              "EnumName": "SelectionMode",
              "Description": "Specifies the selection mode."
            },
            "deferred": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Makes selection deferred."
            },
            "selectAllMode": {
              "EnumName": "SelectAllMode",
              "Description": "Specifies the mode in which all the records are selected. Applies only if selection | allowSelectAll is true."
            },
            "showCheckBoxesMode": {
              "EnumName": "GridSelectionShowCheckBoxesMode",
              "Description": "Specifies when to display checkboxes in rows. Applies only if selection | mode is \"multiple\"."
            }
          }
        },
        "showBorders": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the outer borders of the widget are visible."
        },
        "showColumnHeaders": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether column headers are visible."
        },
        "showColumnLines": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether vertical lines that separate one column from another are visible."
        },
        "showRowLines": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether horizontal lines that separate one row from another are visible."
        },
        "sorting": {
          "Description": "Configures runtime sorting.",
          "Options": {
            "ascendingText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the context menu item that sets an ascending sort order in a column."
            },
            "clearText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the context menu item that clears sorting settings for a column."
            },
            "descendingText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the context menu item that sets a descending sort order in a column."
            },
            "mode": {
              "EnumName": "GridSortingMode",
              "Description": "Specifies the sorting mode."
            }
          }
        },
        "twoWayBindingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to enable two-way data binding."
        },
        "wordWrapEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether text that does not fit into a column should be wrapped."
        },
        "customizeColumns": {
          "IsFunc": true,
          "Description": "Specifies a function that customizes grid columns after they are created."
        },
        "customizeExportData": {
          "IsFunc": true,
          "Description": "Customizes grid columns and data before exporting."
        },
        "export": {
          "Description": "Configures client-side export.",
          "Options": {
            "allowExportSelectedData": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Allows an end user to export selected rows only."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the client-side export feature."
            },
            "excelFilterEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to enable Excel filtering for the exported data in the resulting XLSX file."
            },
            "excelWrapTextEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to enable word wrapping for the exported data in the resulting XLSX file."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which grid data is exported."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable export in IE9 and Safari browsers."
            },
            "texts": {
              "Description": "Contains options that specify texts for the export-related commands and hints.",
              "Options": {
                "excelFormat": {
                  "PrimitiveTypes": [
                    "any"
                  ],
                  "IsDeprecated": true
                },
                "exportAll": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the command that exports all data."
                },
                "exportSelectedRows": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the drop-down menu command that exports selected rows."
                },
                "exportTo": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the hint of the Export button when the allowExportSelectedData option is true."
                },
                "exportToExcel": {
                  "PrimitiveTypes": [
                    "any"
                  ],
                  "IsDeprecated": true
                },
                "selectedRows": {
                  "PrimitiveTypes": [
                    "any"
                  ],
                  "IsDeprecated": true
                }
              }
            }
          }
        },
        "grouping": {
          "Description": "Specifies grouping settings and the behavior of grouped grid records.",
          "Options": {
            "allowCollapsing": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether the user can collapse grouped records in a grid or not."
            },
            "autoExpandAll": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether groups appear expanded or not."
            },
            "contextMenuEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the user to group data using the context menu."
            },
            "expandMode": {
              "EnumName": "GridGroupingExpandMode",
              "Description": "Specifies the event on which a group will be expanded/collapsed."
            },
            "groupContinuedMessage": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsDeprecated": true
            },
            "groupContinuesMessage": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsDeprecated": true
            },
            "texts": {
              "Description": "Defines the texts of grouping-related visual elements.",
              "Options": {
                "groupByThisColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the context menu item that groups data by a specific column."
                },
                "groupContinuedMessage": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the message displayed in a group row when the corresponding group is continued from the previous page."
                },
                "groupContinuesMessage": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the message displayed in a group row when the corresponding group continues on the next page."
                },
                "ungroup": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the context menu item that clears grouping settings of a specific column."
                },
                "ungroupAll": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the context menu item that clears grouping settings of all columns."
                }
              }
            }
          }
        },
        "groupPanel": {
          "Description": "Configures the group panel.",
          "Options": {
            "allowColumnDragging": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether columns can be dragged onto or from the group panel."
            },
            "emptyPanelText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed by the group panel when it does not contain any columns."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "EnumName": "Mode",
              "Description": "Specifies whether the group panel is visible or not."
            }
          }
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "keyExpr"
        },
        "masterDetail": {
          "Description": "Allows you to build a master-detail interface in the grid.",
          "Options": {
            "autoExpandAll": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether detail sections appear expanded or collapsed."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables an end-user to expand/collapse detail sections."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies the template for detail sections."
            }
          }
        },
        "onCellClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cellClick event."
        },
        "onCellHoverChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cellHoverChanged event."
        },
        "onCellPrepared": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cellPrepared event."
        },
        "onContextMenuPreparing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contextMenuPreparing event."
        },
        "onEditingStart": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the editingStart event."
        },
        "onEditorPrepared": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the editorPrepared event."
        },
        "onEditorPreparing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the editorPreparing event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "onRowClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowClick event."
        },
        "onRowPrepared": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowPrepared event."
        },
        "pager": {
          "Description": "Specifies the options of a grid pager.",
          "Options": {
            "allowedPageSizes": {
              "PrimitiveTypes": [
                "int32"
              ],
              "IsCollection": true,
              "SingularName": "allowedPageSize",
              "Description": "Specifies the page sizes that can be selected at runtime."
            },
            "infoText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text accompanying the page navigator."
            },
            "showInfo": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to display the text accompanying the page navigator. This text is specified by the infoText option."
            },
            "showNavigationButtons": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to display buttons that switch the grid to the previous or next page."
            },
            "showPageSizeSelector": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the page size selector or not."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool",
                "string"
              ],
              "Description": "Specifies whether to show the pager or not."
            }
          }
        },
        "paging": {
          "Description": "Specifies paging options.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether DataGrid loads data page by page or all at once."
            },
            "pageIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the grid page that should be displayed by default."
            },
            "pageSize": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the size of grid pages."
            }
          }
        },
        "remoteOperations": {
          "PrimitiveTypes": [
            "bool",
            "string"
          ],
          "Description": "Specifies the operations that must be performed on the server side.",
          "Options": {
            "filtering": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not filtering must be performed on the server side."
            },
            "grouping": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not grouping must be performed on the server side."
            },
            "groupPaging": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not paging by groups must be performed on the server side."
            },
            "paging": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not paging must be performed on the server side."
            },
            "sorting": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not sorting must be performed on the server side."
            },
            "summary": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not summaries calculation must be performed on the server."
            }
          }
        },
        "rowTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for grid rows."
        },
        "selectionFilter": {
          "IsFilterExpr": true,
          "Description": "Specifies filters for the rows that must be selected initially. Applies only if selection | deferred is true."
        },
        "sortByGroupSummaryInfo": {
          "IsCollection": true,
          "SingularName": "sortByGroupSummaryInfo",
          "Description": "Allows you to sort groups according to the values of group summary items.",
          "Options": {
            "groupColumn": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the identifier of the column that must be used in grouping so that sorting by group summary item values be applied."
            },
            "sortOrder": {
              "EnumName": "SortOrder",
              "Description": "Specifies the sort order of group summary item values."
            },
            "summaryItem": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the group summary item whose values must be used to sort groups."
            }
          }
        },
        "stateStoring": {
          "Description": "Specifies options of state storing.",
          "Options": {
            "customLoad": {
              "IsFunc": true,
              "Description": "Specifies a callback function that performs specific actions on state loading."
            },
            "customSave": {
              "IsFunc": true,
              "Description": "Specifies a callback function that performs specific actions on state saving."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a grid saves its state."
            },
            "savingTimeout": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the delay between the last change of a grid state and the operation of saving this state in milliseconds."
            },
            "storageKey": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a unique key to be used for storing the grid state."
            },
            "type": {
              "EnumName": "StateStoringType",
              "Description": "Specifies the type of storage to be used for state storing."
            }
          }
        },
        "summary": {
          "Description": "Specifies the options of the grid summary.",
          "Options": {
            "calculateCustomSummary": {
              "IsFunc": true,
              "Description": "Allows you to use a custom aggregate function to calculate the value of a summary item."
            },
            "groupItems": {
              "IsCollection": true,
              "SingularName": "groupItem",
              "Description": "Specifies items of the group summary.",
              "Options": {
                "alignByColumn": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether to display group summary items in parentheses after the group row header or to align them by the corresponding columns within the group row."
                },
                "column": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the column that provides data for a group summary item."
                },
                "customizeText": {
                  "IsFunc": true,
                  "Description": "Customizes the text to be displayed in the summary item."
                },
                "displayFormat": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the summary item text."
                },
                "name": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the identifier of a summary item."
                },
                "precision": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the valueFormat | precision option instead."
                },
                "showInColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the column that must hold the summary item when this item is displayed in the group footer or aligned by a column in the group row."
                },
                "showInGroupFooter": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether or not a summary item must be displayed in the group footer."
                },
                "skipEmptyValues": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether or not to skip empty strings, null and undefined values when calculating a summary."
                },
                "summaryType": {
                  "EnumName": "SummaryType",
                  "Description": "Specifies how to aggregate data for a summary item."
                },
                "valueFormat": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "EnumName": "Format",
                  "Description": "Specifies a format for the summary item value."
                }
              }
            },
            "skipEmptyValues": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to skip empty strings, null and undefined values when calculating a summary."
            },
            "texts": {
              "Description": "Contains options that specify text patterns for summary items.",
              "Options": {
                "avg": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the 'avg' summary items when they are displayed in the parent column."
                },
                "avgOtherColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the 'avg' summary items displayed in a group row or in any other column rather than the parent one."
                },
                "count": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the 'count' summary items."
                },
                "max": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the 'max' summary items when they are displayed in the parent column."
                },
                "maxOtherColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the 'max' summary items displayed in a group row or in any other column rather than the parent one."
                },
                "min": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the 'min' summary items when they are displayed in the parent column."
                },
                "minOtherColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the 'min' summary items displayed in a group row or in any other column rather than the parent one."
                },
                "sum": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the 'sum' summary items when they are displayed in the parent column."
                },
                "sumOtherColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the 'sum' summary items displayed in a group row or in any other column rather than the parent one."
                }
              }
            },
            "totalItems": {
              "IsCollection": true,
              "SingularName": "totalItem",
              "Description": "Specifies items of the total summary.",
              "Options": {
                "alignment": {
                  "EnumName": "HorizontalAlignment",
                  "Description": "Specifies the alignment of a summary item."
                },
                "column": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the column that provides data for a summary item."
                },
                "cssClass": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a CSS class to be applied to a summary item."
                },
                "customizeText": {
                  "IsFunc": true,
                  "Description": "Customizes the text to be displayed in the summary item."
                },
                "displayFormat": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the summary item text."
                },
                "name": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the identifier of a summary item."
                },
                "precision": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the valueFormat | precision option instead."
                },
                "showInColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the column that must hold the summary item."
                },
                "skipEmptyValues": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether or not to skip empty strings, null and undefined values when calculating a summary."
                },
                "summaryType": {
                  "EnumName": "SummaryType",
                  "Description": "Specifies how to aggregate data for a summary item."
                },
                "valueFormat": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "EnumName": "Format",
                  "Description": "Specifies a format for the summary item value."
                }
              }
            }
          }
        }
      }
    },
    "dxDateBox": {
      "Description": "The DateBox is a widget that displays date and time in a specified format, and enables a user to pick or type in the required date/time value.",
      "Module": "ui/date_box",
      "IsEditor": true,
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "onFocusIn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusIn event."
        },
        "onFocusOut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusOut event."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "date",
            "double",
            "string"
          ],
          "Description": "An object or a value specifying the date and time currently selected using the date box."
        },
        "attr": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "onChange": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the change event."
        },
        "onCopy": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the copy event."
        },
        "onCut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cut event."
        },
        "onEnterKey": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the enterKey event."
        },
        "onInput": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the input event."
        },
        "onKeyDown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyDown event."
        },
        "onKeyPress": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyPress event."
        },
        "onKeyUp": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyUp event."
        },
        "onPaste": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the paste event."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is not yet specified. This text is also used as a title of the date picker."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "spellcheck": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget checks the inner text for spelling mistakes."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "maxLength": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the maximum number of characters you can enter into the textbox."
        },
        "acceptCustomValue": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget allows an end-user to enter a custom value."
        },
        "applyValueMode": {
          "EnumName": "EditorApplyValueMode",
          "Description": "Specifies the way an end-user applies the selected value."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "dropDownButtonTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "fieldEditEnabled": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "onClosed": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the closed event."
        },
        "onOpened": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the opened event."
        },
        "opened": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "adaptivityEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not adaptive widget rendering is enabled on a small screen."
        },
        "applyButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the Apply button."
        },
        "cancelButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the Cancel button."
        },
        "dateOutOfRangeMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message displayed if the specified date is later than the max value or earlier than the min value."
        },
        "dateSerializationFormat": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the serialization format for a date-time value."
        },
        "displayFormat": {
          "PrimitiveTypes": [
            "string"
          ],
          "ComplexTypes": [
            "Format"
          ],
          "EnumName": "Format",
          "Description": "Specifies the date display format. Ignored if the pickerType option is 'native'"
        },
        "format": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "formatString": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "interval": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the interval between neighboring values in the popup list in minutes."
        },
        "invalidDateMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message displayed if the typed value is not a valid date or time."
        },
        "max": {
          "PrimitiveTypes": [
            "date",
            "double",
            "string"
          ],
          "Description": "The last date that can be selected within the widget."
        },
        "maxZoomLevel": {
          "EnumName": "CalendarZoomLevel",
          "Description": "Specifies the maximum zoom level of a calendar, which is used to pick the date."
        },
        "min": {
          "PrimitiveTypes": [
            "date",
            "double",
            "string"
          ],
          "Description": "The minimum date that can be selected within the widget."
        },
        "minZoomLevel": {
          "EnumName": "CalendarZoomLevel",
          "Description": "Specifies the minimal zoom level of a calendar, which is used to pick the date."
        },
        "pickerType": {
          "EnumName": "DateBoxPickerType",
          "Description": "Specifies the type of the date/time picker."
        },
        "type": {
          "EnumName": "DateBoxType",
          "Description": "A format used to display date/time information."
        },
        "useCalendar": {
          "PrimitiveTypes": [
            "bool"
          ],
          "IsDeprecated": true,
          "Description": "Use the pickerType option instead."
        },
        "useNative": {
          "PrimitiveTypes": [
            "bool"
          ],
          "IsDeprecated": true,
          "Description": "Use the pickerType option instead."
        }
      }
    },
    "dxDeferRendering": {
      "Description": "The DeferRendering is a widget that waits for its content to be ready before rendering it. While the content is getting ready, the DeferRendering displays a loading indicator.",
      "Module": "ui/defer_rendering",
      "Options": {
        "onRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "Specifies a callback function that is called when the widget's content has finished rendering but is not yet shown."
        },
        "onShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "Specifies a callback function that is called when widget content is shown and animation has completed."
        },
        "renderWhen": {
          "PrimitiveTypes": [
            "any",
            "bool"
          ],
          "Description": "Specifies the jQuery.Promise or boolean value, which when resolved, forces widget content to render."
        },
        "showLoadIndicator": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates if a load indicator should be shown until the widget's content is rendered."
        },
        "staggerItemSelector": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a jQuery selector of items that should be rendered using a staggered animation."
        },
        "animation": {
          "ComplexTypes": [
            "AnimationConfig"
          ],
          "Description": "Specifies the animation to be used to show the rendered content."
        }
      }
    },
    "dxDropDownBox": {
      "Description": "The DropDownBox widget consists of a text field, which displays the current value, and a drop-down field, which can contain any UI element.",
      "Module": "ui/drop_down_box",
      "Options": {
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "valueExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of a data source item field whose value is held in the value configuration option."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onFocusIn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusIn event."
        },
        "onFocusOut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusOut event."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the current value displayed by the widget."
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "onChange": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the change event."
        },
        "onCopy": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the copy event."
        },
        "onCut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cut event."
        },
        "onEnterKey": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the enterKey event."
        },
        "onInput": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the input event."
        },
        "onKeyDown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyDown event."
        },
        "onKeyPress": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyPress event."
        },
        "onKeyUp": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyUp event."
        },
        "onPaste": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the paste event."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is empty."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies after which DOM events the widget updates the value."
        },
        "acceptCustomValue": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget allows a user to enter a custom value."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "dropDownButtonTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "onClosed": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the closed event."
        },
        "onOpened": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the opened event."
        },
        "opened": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "contentTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down content."
        },
        "dropDownOptions": {
          "ComplexTypes": [
            "dxPopupOptions"
          ],
          "Description": "Configures the drop-down field which holds the content."
        }
      }
    },
    "dxExporter": {
      "Description": "[note]This widget is deprecated. Instead of it, use the built-in client-side exporting. For further information, refer to the export option of a particular widget.",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "exportFormat": {
          "IsCollection": true,
          "EnumName": "ExportFormat",
          "SingularName": "exportFormat",
          "Description": "Specifies a set of formats available for exporting into."
        },
        "fileName": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a name that should be assigned to the file with the exported widget."
        },
        "printingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to enable printing operation."
        },
        "serverUrl": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the URL of the server that supplies the exporting service."
        },
        "showMenu": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to show the export menu or not."
        },
        "sourceContainer": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a div container that holds the widget to be exported."
        }
      }
    },
    "dxFileUploader": {
      "Description": "The FileUploader widget enables an end user to upload files to the server. An end user can select files in the file explorer or drag and drop files to the FileUploader area on the page.",
      "Module": "ui/file_uploader",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the value passed to the name attribute of the underlying input element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "value",
          "Description": "Specifies a File instance representing the selected file. Read-only when uploadMode is \"useForm\"."
        },
        "accept": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a file type or several types accepted by the widget."
        },
        "allowCanceling": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies if an end user can remove a file from the selection and interrupt uploading."
        },
        "buttonText": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "labelText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed on the area to which an end-user can drop a file."
        },
        "multiple": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget enables an end-user to select a single file or multiple files."
        },
        "onProgress": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the uploaded event."
        },
        "onUploadAborted": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the uploadAborted event."
        },
        "onUploaded": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the uploaded event."
        },
        "onUploadError": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the uploadError event."
        },
        "onUploadStarted": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the uploadStarted event."
        },
        "progress": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Gets the current progress in percentages."
        },
        "readyToUploadMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The message displayed by the widget when it is ready to upload the specified files."
        },
        "selectButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the button that opens the file browser."
        },
        "showFileList": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget displays the list of selected files."
        },
        "uploadButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the button that starts uploading."
        },
        "uploadedMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The message displayed by the widget when uploading is finished."
        },
        "uploadFailedMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The message displayed by the widget on uploading failure."
        },
        "uploadHeaders": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies headers for the upload request."
        },
        "uploadMethod": {
          "EnumName": "UploadHttpMethod",
          "Description": "Specifies the method for the upload request."
        },
        "uploadMode": {
          "EnumName": "FileUploadMode",
          "Description": "Specifies how the widget uploads files."
        },
        "uploadUrl": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a target Url for the upload request."
        },
        "values": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        }
      }
    },
    "dxForm": {
      "Description": "The Form widget represents fields of a data object as a collection of label-editor pairs. These pairs can be arranged in several groups, tabs and columns.",
      "Module": "ui/form",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "alignItemLabels": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not all root item labels are aligned."
        },
        "alignItemLabelsInAllGroups": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not item labels in all groups are aligned."
        },
        "colCount": {
          "PrimitiveTypes": [
            "int32"
          ],
          "EnumName": "Mode",
          "Description": "The count of columns in the form layout."
        },
        "colCountByScreen": {
          "Description": "Specifies dependency between the screen factor and the count of columns in the form layout.",
          "Options": {
            "lg": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "The count of columns for a large screen size."
            },
            "md": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "The count of columns for a middle-sized screen."
            },
            "sm": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "The count of columns for a small-sized screen."
            },
            "xs": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "The count of columns for an extra small-sized screen."
            }
          }
        },
        "customizeItem": {
          "IsFunc": true,
          "Description": "Specifies a function that customizes a form item after it has been created."
        },
        "formData": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "An object providing data for the form."
        },
        "items": {
          "ComplexTypes": [
            "FormEmptyItem",
            "FormGroupItem",
            "FormSimpleItem",
            "FormTabbedItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "Holds an array of form items."
        },
        "labelLocation": {
          "EnumName": "FormLabelLocation",
          "Description": "Specifies the location of a label against the editor."
        },
        "minColWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The minimum column width used for calculating column count in the form layout."
        },
        "onEditorEnterKey": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the editorEnterKey event."
        },
        "onFieldDataChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fieldDataChanged event."
        },
        "optionalMark": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed for optional fields."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not all editors on the form are read-only."
        },
        "requiredMark": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed for required fields."
        },
        "requiredMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if a required field value is not specified."
        },
        "screenByWidth": {
          "IsFunc": true,
          "Description": "Specifies the function returning the screen factor depending on the screen width."
        },
        "scrollingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether to enable or disable form scrolling."
        },
        "showColonAfterLabel": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not a colon is displayed at the end of form labels."
        },
        "showOptionalMark": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the optional mark is displayed for optional fields."
        },
        "showRequiredMark": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the required mark is displayed for required fields."
        },
        "showValidationSummary": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the total validation summary is displayed on the form."
        },
        "validationGroup": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Gives a name to the internal validation group."
        }
      }
    },
    "dxGallery": {
      "Description": "The Gallery is a widget that displays a collection of images in a carousel. The widget is supplied with various navigation controls that allow a user to switch between images.",
      "Module": "ui/gallery",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The index of the currently active gallery item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The selected item object."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "imageAlt": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text passed to the alt attribute of the image markup element."
            },
            "imageSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the image displayed by the item."
            }
          }
        },
        "animationDuration": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time, in milliseconds, spent on slide animation."
        },
        "animationEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to animate the displayed item change."
        },
        "indicatorEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to allow users to switch between items by clicking an indicator."
        },
        "initialItemWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the width of an area used to display a single image."
        },
        "loop": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to scroll back to the first item after the last item is swiped."
        },
        "showIndicator": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to display an indicator that points to the selected gallery item."
        },
        "showNavButtons": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value that specifies the availability of the \"Forward\" and \"Back\" navigation buttons."
        },
        "slideshowDelay": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time interval in milliseconds, after which the gallery switches to the next item."
        },
        "stretchImages": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies if the widget stretches images to fit the total gallery width."
        },
        "swipeEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to allow users to switch between items by swiping."
        },
        "wrapAround": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to display parts of previous and next images along the sides of the current image."
        }
      }
    },
    "dxLinearGauge": {
      "Description": "The LinearGauge is a widget that indicates values on a linear numeric scale.",
      "Module": "viz/linear_gauge",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports right-to-left representation."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "IsCollection": true,
              "EnumName": "ExportFormat",
              "SingularName": "format",
              "Description": "Specifies a set of formats available for exporting into."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export | enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in IE9 and Safari browsers."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDrawn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the drawn event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "onIncidentOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the incidentOccurred event."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "size": {
          "Description": "Specifies the size of the widget in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "EnumName": "VizTheme",
          "Description": "Sets the name of the theme to be used in the widget."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget title.",
          "Options": {
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the widget subtitle.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title text."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies the title's alignment in a vertical direction."
            },
            "position": {
              "IsDeprecated": true,
              "EnumName": "GaugeTitlePosition",
              "Description": "Use the horizontalAlignment and verticalAlignment options instead."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Specifies the appearance of the tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether the tooltip's border is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "jquery"
              ],
              "Description": "Specifies the container to draw tooltips inside of it."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies the font of the text displayed by a tooltip."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies the format of the value displayed by a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of tooltips."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space on the left and the right of the text displayed by a tooltip."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space above and below the text displayed by a tooltip."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | format | precision option instead."
            },
            "shadow": {
              "Description": "Specifies the appearance of the tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the blur distance of the tooltip's shadow."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the horizontal offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the vertical offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the z-index of tooltips."
            },
            "customizeTooltip": {
              "IsFunc": true,
              "Description": "Allows you to change the appearance of specified tooltips."
            }
          }
        },
        "animation": {
          "Description": "Specifies animation options.",
          "Options": {
            "duration": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Determines how long animation runs."
            },
            "easing": {
              "EnumName": "VizAnimationEasing",
              "Description": "Specifies the animation easing mode."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not animation is enabled."
            }
          }
        },
        "containerBackgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the parent page element."
        },
        "onTooltipHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipHidden event."
        },
        "onTooltipShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipShown event."
        },
        "rangeContainer": {
          "Description": "Specifies gauge range container options.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a range container's background color."
            },
            "offset": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the offset of the range container from an invisible scale line in pixels."
            },
            "palette": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "EnumName": "VizPalette",
              "SingularName": "palette",
              "Description": "Sets the name of the palette or an array of colors to be used for coloring the gauge range container."
            },
            "ranges": {
              "IsCollection": true,
              "SingularName": "range",
              "Description": "An array of objects representing ranges contained in the range container.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color of a range."
                },
                "endValue": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies an end value of a range."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a start value of a range."
                }
              }
            },
            "horizontalOrientation": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the orientation of the range container. Applies only if the geometry | orientation option is \"vertical\"."
            },
            "verticalOrientation": {
              "EnumName": "VerticalAlignment",
              "Description": "Specifies the orientation of the range container. Applies only if the geometry | orientation option is \"horizontal\"."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the range container's start and end boundaries in the LinearGauge widget.",
              "Options": {
                "end": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies an end width of a range container."
                },
                "start": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a start width of a range container."
                }
              }
            }
          }
        },
        "scale": {
          "Description": "Specifies the gauge's scale options.",
          "Options": {
            "customMinorTicks": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsCollection": true,
              "SingularName": "customMinorTick",
              "Description": "Specifies an array of custom minor ticks."
            },
            "customTicks": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsCollection": true,
              "SingularName": "customTick",
              "Description": "Specifies an array of custom major ticks."
            },
            "endValue": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the end value for the scale of the gauge."
            },
            "hideFirstLabel": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the scale | label | overlappingBehavior | hideFirstOrLast option instead."
            },
            "hideFirstTick": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the scale | label | overlappingBehavior | hideFirstOrLast option instead."
            },
            "hideLastLabel": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the scale | label | overlappingBehavior | hideFirstOrLast option instead."
            },
            "hideLastTick": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the scale | label | overlappingBehavior | hideFirstOrLast option instead."
            },
            "label": {
              "Description": "Specifies common options for scale labels.",
              "Options": {
                "customizeText": {
                  "IsFunc": true,
                  "Description": "Specifies a callback function that returns the text to be displayed in scale labels."
                },
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the text displayed in the scale labels of the gauge."
                },
                "format": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "EnumName": "Format",
                  "Description": "Specifies a format for the text displayed in scale labels."
                },
                "overlappingBehavior": {
                  "EnumName": "ScaleLabelOverlappingBehavior",
                  "Description": "Decides how to arrange scale labels when there is not enough space to keep all of them.",
                  "Options": {
                    "useAutoArrangement": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "IsDeprecated": true,
                      "Description": "Instead, use the overlappingBehavior option directly."
                    },
                    "hideFirstOrLast": {
                      "IsDeprecated": true,
                      "EnumName": "GaugeOverlappingBehavior",
                      "Description": "This functionality is deprecated as redundant."
                    }
                  }
                },
                "precision": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the scale | label | format | precision option instead."
                },
                "useRangeColors": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether or not scale labels should be colored similarly to their corresponding ranges in the range container."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether or not scale labels are visible on the gauge."
                },
                "indentFromTick": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the spacing between scale labels and ticks."
                }
              }
            },
            "majorTick": {
              "IsDeprecated": true,
              "Description": "Use the tick option instead.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tick | color option instead."
                },
                "customTickValues": {
                  "PrimitiveTypes": [
                    "any"
                  ],
                  "IsCollection": true,
                  "IsDeprecated": true,
                  "SingularName": "customTickValue",
                  "Description": "Use the scale | customTicks option instead."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tick | length option instead."
                },
                "showCalculatedTicks": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "IsDeprecated": true,
                  "Description": "This option will be removed in the near future. Its use is not recommended."
                },
                "tickInterval": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the scale | tickInterval option instead."
                },
                "useTicksAutoArrangement": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the overlappingBehavior option instead."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tick | visible option instead."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tick | width option instead."
                }
              }
            },
            "minorTick": {
              "Description": "Specifies options of the gauge's minor ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the scale's minor ticks."
                },
                "customTickValues": {
                  "PrimitiveTypes": [
                    "any"
                  ],
                  "IsCollection": true,
                  "IsDeprecated": true,
                  "SingularName": "customTickValue",
                  "Description": "Use the scale | customMinorTicks option instead."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the length of the scale's minor ticks."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the scale's minor ticks."
                },
                "showCalculatedTicks": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "IsDeprecated": true,
                  "Description": "This option will be removed in the near future. Its use is not recommended."
                },
                "tickInterval": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the scale | minorTickInterval option instead."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether scale minor ticks are visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the scale's minor ticks."
                }
              }
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies an interval between minor ticks."
            },
            "startValue": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the start value for the scale of the gauge."
            },
            "tick": {
              "Description": "Specifies options of the gauge's major ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the scale's major ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the length of the scale's major ticks."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the scale's major ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether scale major ticks are visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the scale's major ticks."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies an interval between major ticks."
            },
            "horizontalOrientation": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the orientation of scale ticks. Applies only if the geometry | orientation option is \"vertical\"."
            },
            "verticalOrientation": {
              "EnumName": "VerticalAlignment",
              "Description": "Specifies the orientation of scale ticks. Applies only if the geometry | orientation option is \"horizontal\"."
            }
          }
        },
        "subtitle": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsDeprecated": true,
          "Description": "Use the title | subtitle option instead.",
          "Options": {
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "IsDeprecated": true,
              "Description": "Use the title | subtitle | font option instead."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the title | subtitle | text option instead."
            }
          }
        },
        "subvalues": {
          "PrimitiveTypes": [
            "double"
          ],
          "IsCollection": true,
          "SingularName": "subvalue",
          "Description": "Specifies a set of subvalues to be designated by the subvalue indicators."
        },
        "value": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the main value on a gauge."
        },
        "geometry": {
          "Description": "Specifies the options required to set the geometry of the LinearGauge widget.",
          "Options": {
            "orientation": {
              "EnumName": "Orientation",
              "Description": "Indicates whether to display the LinearGauge widget vertically or horizontally."
            }
          }
        },
        "subvalueIndicator": {
          "ComplexTypes": [
            "GaugeIndicator"
          ],
          "Description": "Specifies the appearance options of subvalue indicators."
        },
        "valueIndicator": {
          "ComplexTypes": [
            "GaugeIndicator"
          ],
          "Description": "Specifies the appearance options of the value indicator."
        }
      }
    },
    "dxList": {
      "Description": "The List is a widget that represents a collection of items in a scrollable list.",
      "Module": "ui/list",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data field provides keys for widget items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemDeleted": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemDeleted event."
        },
        "onItemDeleting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemDeleting event. Executed before an item is deleted from the data source."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onItemReordered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemReordered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectedItemKeys": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "selectedItemKey",
          "Description": "Specifies an array of currently selected item keys."
        },
        "selectedItems": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "selectedItem",
          "Description": "An array of currently selected item objects."
        },
        "selectionMode": {
          "EnumName": "ListSelectionMode",
          "Description": "Specifies item selection mode."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "badge": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text of a badge displayed for the list item."
            },
            "key": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the list items group in a grouped list."
            },
            "showChevron": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to display a chevron for the list item."
            }
          }
        },
        "allowItemDeleting": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not an end user can delete list items."
        },
        "allowItemReordering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not an end user can reorder list items."
        },
        "autoPagingEnabled": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "bounceEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether to enable or disable the bounce-back effect."
        },
        "collapsibleGroups": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not an end-user can collapse groups."
        },
        "grouped": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to display a grouped list."
        },
        "groupTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering item groups."
        },
        "indicateLoading": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to show the loading panel when the DataSource bound to the widget is loading data."
        },
        "itemDeleteMode": {
          "EnumName": "ListItemDeleteMode",
          "Description": "Specifies the way a user can delete items from the list."
        },
        "menuItems": {
          "IsCollection": true,
          "SingularName": "menuItem",
          "Description": "Specifies the array of items for a context menu called for a list item.",
          "Options": {
            "action": {
              "IsFunc": true,
              "Description": "Holds on a function called when the item is clicked."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the menu item text."
            }
          }
        },
        "menuMode": {
          "EnumName": "ListMenuMode",
          "Description": "Specifies whether an item context menu is shown when a user holds or swipes an item."
        },
        "nextButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the button used to load the next page from the data source."
        },
        "onGroupRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the groupRendered event."
        },
        "onItemSwipe": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemSwipe event."
        },
        "onPageLoading": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pageLoading event."
        },
        "onPullRefresh": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pullRefresh event."
        },
        "onScroll": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the scroll event."
        },
        "onSelectAllValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectAllValueChanged event."
        },
        "pageLoadingText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel, which is displayed when the list is scrolled to the bottom."
        },
        "pageLoadMode": {
          "EnumName": "ListPageLoadMode",
          "Description": "Specifies whether the next page is loaded when a user scrolls the widget to the bottom or when the \"next\" button is clicked."
        },
        "pulledDownText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed in the pullDown panel when the list is pulled below the refresh threshold."
        },
        "pullingDownText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold."
        },
        "pullRefreshEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget supports the \"pull down to refresh\" gesture."
        },
        "refreshingText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed in the pullDown panel while the list is being refreshed."
        },
        "scrollByContent": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying if the list is scrolled by content."
        },
        "scrollByThumb": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying if the list is scrolled using the scrollbar."
        },
        "scrollingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether to enable or disable list scrolling."
        },
        "selectAllMode": {
          "EnumName": "SelectAllMode",
          "Description": "Specifies the mode in which all items are selected."
        },
        "showNextButton": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "showScrollbar": {
          "EnumName": "ShowScrollbarMode",
          "Description": "Specifies when the widget shows the scrollbar."
        },
        "showSelectionControls": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to display controls used to select list items."
        },
        "useNativeScrolling": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget uses native scrolling."
        }
      }
    },
    "dxLoadIndicator": {
      "Description": "The LoadIndicator is a UI element notifying the viewer that a process is in progress.",
      "Module": "ui/load_indicator",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "indicatorSrc": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the path to an image used as the indicator."
        }
      }
    },
    "dxLoadPanel": {
      "Description": "The LoadPanel is an overlay widget notifying the viewer that loading is in progress.",
      "Module": "ui/load_panel",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The width of the widget."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget can be focused."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is visible."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user clicks outside of the overlapping window."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the maximum height the widget can reach while resizing."
        },
        "maxWidth": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the maximum width the widget can reach while resizing."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the minimum height the widget can reach while resizing."
        },
        "minWidth": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the minimum width the widget can reach while resizing."
        },
        "onHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hidden event."
        },
        "onHiding": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hiding event."
        },
        "onShowing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the showing event."
        },
        "onShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the shown event."
        },
        "shading": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the main screen is inactive while the widget is active."
        },
        "shadingColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shading color."
        },
        "delay": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The delay in milliseconds after which the load panel is displayed."
        },
        "indicatorSrc": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A URL pointing to an image to be used as a load indicator."
        },
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed in the load panel."
        },
        "showIndicator": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to show a load indicator."
        },
        "showPane": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to show the pane behind the load indicator."
        },
        "position": {
          "ComplexTypes": [
            "PositionConfig"
          ],
          "Description": "An object defining widget positioning options."
        }
      }
    },
    "dxLookup": {
      "Description": "The Lookup is a widget that allows an end user to search for an item in a collection shown in a drop-down menu.",
      "Module": "ui/lookup",
      "IsEditor": true,
      "Options": {
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "valueExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of a data source item field whose value is held in the value configuration option."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the current value displayed by the widget."
        },
        "attr": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when nothing is selected."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to display the Clear button in the lookup window."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "applyValueMode": {
          "EnumName": "EditorApplyValueMode",
          "Description": "Specifies the way an end-user applies the selected value."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "dropDownButtonTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "fieldEditEnabled": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true,
          "Description": "This option is deprecated, because the functionality controlled by it was not supposed to belong to the Lookup widget. Instead, we suggest that you use the SelectBox widget with the acceptCustomValue option set to true."
        },
        "onClosed": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the closed event."
        },
        "onOpened": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the opened event."
        },
        "opened": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "displayValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Returns the value currently displayed by the widget."
        },
        "fieldTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering the widget text field."
        },
        "grouped": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to group widget items."
        },
        "groupTemplate": {
          "IsTemplate": true,
          "Description": "The name of the template used to display a group header."
        },
        "minSearchLength": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The minimum number of characters that must be entered into the text box to begin a search."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "pagingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "IsDeprecated": true,
          "Description": "Use the DataSource paging opportunities instead."
        },
        "searchEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the search bar is visible."
        },
        "searchExpr": {
          "PrimitiveTypes": [
            "getter"
          ],
          "IsCollection": true,
          "SingularName": "searchExpr",
          "Description": "Specifies the name of a data source item field or an expression whose value is compared to the search criterion."
        },
        "searchMode": {
          "EnumName": "DropDownSearchMode",
          "Description": "Specifies the binary operation used to filter data."
        },
        "searchTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsReadonly": true,
          "Description": "Gets the currently selected item."
        },
        "showDataBeforeSearch": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget displays unfiltered values until a user types a number of characters exceeding the minSearchLength option value."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "applyButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the Apply button."
        },
        "cancelButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the Cancel button."
        },
        "cleanSearchOnOpening": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget cleans the search box when the popup window is displayed."
        },
        "clearButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the Clear button."
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not a widget is closed if a user clicks outside of the overlaying window."
        },
        "fullScreen": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to display the lookup in full-screen mode."
        },
        "nextButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the button used to load the next page from the data source."
        },
        "onPageLoading": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pageLoading event."
        },
        "onPullRefresh": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pullRefresh event."
        },
        "onScroll": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the scroll event."
        },
        "onTitleRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the titleRendered event."
        },
        "pageLoadingText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel, which is displayed when the widget is scrolled to the bottom."
        },
        "pageLoadMode": {
          "EnumName": "ListPageLoadMode",
          "Description": "Specifies whether the next page is loaded when a user scrolls the widget to the bottom or when the \"next\" button is clicked."
        },
        "popupHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "The height of the widget popup element."
        },
        "popupWidth": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "The width of the widget popup element."
        },
        "pulledDownText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed in the pullDown panel when the widget is pulled below the refresh threshold."
        },
        "pullingDownText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold."
        },
        "pullRefreshEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget supports the \"pull down to refresh\" gesture."
        },
        "refreshingText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed in the pullDown panel while the widget is being refreshed."
        },
        "searchPlaceholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text that is provided as a hint in the lookup's search bar."
        },
        "shading": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the main screen is inactive while the lookup is active."
        },
        "showCancelButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to display the Cancel button in the lookup window."
        },
        "showNextButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "IsDeprecated": true,
          "Description": "Use the pageLoadMode option instead."
        },
        "showPopupTitle": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to display the title in the popup window."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The title of the lookup window."
        },
        "titleTemplate": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering the widget title."
        },
        "useNativeScrolling": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget uses native scrolling."
        },
        "usePopover": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to show lookup contents in a Popover widget."
        },
        "position": {
          "ComplexTypes": [
            "PositionConfig"
          ],
          "Description": "An object defining widget positioning options."
        }
      }
    },
    "dxMap": {
      "Description": "The Map is an interactive widget that displays a geographic map with markers and routes.",
      "Module": "ui/map",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "autoAdjust": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget automatically adjusts center and zoom option values when adding a new marker or route, or when creating a widget if it initially contains markers or routes."
        },
        "center": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "center",
          "Description": "An object, a string, or an array specifying the location displayed at the center of the widget.",
          "Options": {
            "lat": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "The latitude location of the widget."
            },
            "lng": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "The longitude location of the widget."
            }
          }
        },
        "controls": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not map widget controls are available."
        },
        "key": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A key used to authenticate the application within the required map provider.",
          "Options": {
            "bing": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A key used to authenticate the application within the \"Bing\" map provider."
            },
            "google": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A key used to authenticate the application within the \"Google\" map provider."
            },
            "googleStatic": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A key used to authenticate the application within the \"Google Static\" map provider."
            }
          }
        },
        "markerIconSrc": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A URL pointing to the custom icon to be used for map markers."
        },
        "markers": {
          "IsCollection": true,
          "SingularName": "marker",
          "Description": "An array of markers displayed on a map.",
          "Options": {
            "iconSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A URL pointing to the custom icon to be used for the marker."
            },
            "location": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "location",
              "Description": "Specifies the marker location.",
              "Options": {
                "lat": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "The latitude location of the widget."
                },
                "lng": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "The longitude location of the widget."
                }
              }
            },
            "onClick": {
              "IsFunc": true,
              "IsEvent": true,
              "Description": "A callback function performed when the marker is clicked."
            },
            "tooltip": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A tooltip to be used for the marker.",
              "Options": {
                "isShown": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether a tooltip is visible by default or not."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the tooltip text."
                }
              }
            }
          }
        },
        "onClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the click event."
        },
        "onMarkerAdded": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the markerAdded event."
        },
        "onMarkerRemoved": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the markerRemoved event."
        },
        "onReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the ready event."
        },
        "onRouteAdded": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the routeAdded event."
        },
        "onRouteRemoved": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the routeRemoved event."
        },
        "provider": {
          "EnumName": "GeoMapProvider",
          "Description": "The name of the current map data provider."
        },
        "routes": {
          "IsCollection": true,
          "SingularName": "route",
          "Description": "An array of routes shown on the map.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the line displaying the route."
            },
            "locations": {
              "IsCollection": true,
              "SingularName": "location",
              "Description": "Contains an array of objects making up the route.",
              "Options": {
                "lat": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "The latitude location of the widget."
                },
                "lng": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "The longitude location of the widget."
                }
              }
            },
            "mode": {
              "EnumName": "GeoMapRouteMode",
              "Description": "Specifies a transportation mode to be used in the displayed route."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of the line displaying the route."
            },
            "weight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the thickness of the line displaying the route in pixels."
            }
          }
        },
        "type": {
          "EnumName": "GeoMapType",
          "Description": "The type of a map to display."
        },
        "zoom": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The zoom level of the map."
        }
      }
    },
    "dxMenu": {
      "Description": "The Menu widget is a panel with clickable items. A click on an item opens a drop-down menu, which can contain several submenus.",
      "Module": "ui/menu",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The selected item object."
        },
        "selectionByClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "IsDeprecated": true,
          "Description": "Use the selectByClick option instead."
        },
        "selectionMode": {
          "EnumName": "MenuSelectionMode",
          "Description": "Specifies the selection mode supported by the menu."
        },
        "items": {
          "ComplexTypes": [
            "MenuItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "Holds an array of menu items."
        },
        "disabledExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget item is disabled."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "itemsExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that contains an array of nested items."
        },
        "selectedExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget items is selected."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the CSS class to be applied to the root menu level and all submenus."
        },
        "selectByClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not an item becomes selected if a user clicks it."
        },
        "showSubmenuMode": {
          "EnumName": "ShowSubmenuMode",
          "Description": "Specifies options of submenu showing and hiding.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the delay of submenu show and hiding.",
              "Options": {
                "hide": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "The time span after which the submenu is hidden."
                },
                "show": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "The time span after which the submenu is shown."
                }
              }
            },
            "name": {
              "EnumName": "ShowSubmenuMode",
              "Description": "Specifies the mode name."
            }
          }
        },
        "adaptivityEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not adaptive widget rendering is enabled on a small screen."
        },
        "hideSubmenuOnMouseLeave": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the submenu is hidden when the mouse pointer leaves it."
        },
        "onSubmenuHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the submenuHidden event."
        },
        "onSubmenuHiding": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the submenuHiding event."
        },
        "onSubmenuShowing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the submenuShowing event."
        },
        "onSubmenuShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the submenuShown event."
        },
        "orientation": {
          "EnumName": "Orientation",
          "Description": "Specifies whether the menu has horizontal or vertical orientation."
        },
        "showFirstSubmenuMode": {
          "EnumName": "ShowSubmenuMode",
          "Description": "Specifies options for showing and hiding the first level submenu.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the delay in submenu showing and hiding.",
              "Options": {
                "hide": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "The time span after which the submenu is hidden."
                },
                "show": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "The time span after which the submenu is shown."
                }
              }
            },
            "name": {
              "EnumName": "ShowSubmenuMode",
              "Description": "Specifies the mode name."
            }
          }
        },
        "submenuDirection": {
          "EnumName": "SubmenuDirection",
          "Description": "Specifies the direction at which the submenus are displayed."
        }
      }
    },
    "dxMultiView": {
      "Description": "The MultiView is a widget that contains several views. An end user navigates through the views by swiping them in the horizontal direction.",
      "Module": "ui/multi_view",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The index of the currently displayed item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The selected item object."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            }
          }
        },
        "animationEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to animate the displayed item change."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "loop": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to scroll back to the first item after the last item is swiped."
        },
        "swipeEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to allow users to change the selected index by swiping."
        }
      }
    },
    "dxNavBar": {
      "Description": "The NavBar is a widget that navigates the application views.",
      "Module": "ui/nav_bar",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data field provides keys for widget items."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The index of the currently selected widget item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The selected item object."
        },
        "selectedItemKeys": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "selectedItemKey",
          "Description": "Specifies an array of currently selected item keys."
        },
        "selectedItems": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "selectedItem",
          "Description": "An array of currently selected item objects."
        },
        "selectionMode": {
          "EnumName": "NavSelectionMode",
          "Description": "Specifies whether the widget enables an end-user to select only a single item or multiple items."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "badge": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a badge text for the navbar item."
            },
            "icon": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the icon displayed by the widget item."
            },
            "iconSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the icon field instead."
            }
          }
        },
        "scrollByContent": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not an end-user can scroll tabs by swiping."
        }
      }
    },
    "dxNumberBox": {
      "Description": "The NumberBox is a widget that displays a numeric value and allows a user to modify it by typing in a value, and incrementing or decrementing it using the keyboard or mouse.",
      "Module": "ui/number_box",
      "IsEditor": true,
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onFocusIn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusIn event."
        },
        "onFocusOut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusOut event."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The current number box value."
        },
        "attr": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "onChange": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the change event."
        },
        "onCopy": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the copy event."
        },
        "onCut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cut event."
        },
        "onEnterKey": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the enterKey event."
        },
        "onInput": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the input event."
        },
        "onKeyDown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyDown event."
        },
        "onKeyPress": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyPress event."
        },
        "onKeyUp": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyUp event."
        },
        "onPaste": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the paste event."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is empty."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "invalidValueMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text of the message displayed if the specified value is not a number."
        },
        "max": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The maximum value accepted by the number box."
        },
        "min": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The minimum value accepted by the number box."
        },
        "mode": {
          "EnumName": "NumberBoxMode",
          "Description": "Specifies the value to be passed to the type attribute of the underlying `` element."
        },
        "showSpinButtons": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to show the buttons that change the value by a step."
        },
        "step": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies by which value the widget value changes when a spin button is clicked."
        },
        "useLargeSpinButtons": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to use touch friendly spin buttons. Applies only if showSpinButtons is true."
        }
      }
    },
    "dxPanorama": {
      "Description": "The Panorama widget is a full-screen widget that allows you to arrange items on a long horizontal canvas split into several views. Each view contains several items, and an end user navigates the views with the swipe gesture. The Panorama is often used as a navigation map on the first page of an application.",
      "Module": "ui/panorama",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget can be focused."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The index of the currently active panorama item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The selected item object."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The title of the panorama item."
            }
          }
        },
        "backgroundImage": {
          "Description": "An object exposing options for setting a background image for the panorama.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the panorama's background image."
            },
            "url": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the image that is used as the panorama's background image."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the panorama's background image."
            }
          }
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget content title."
        }
      }
    },
    "dxPieChart": {
      "Description": "The PieChart is a widget that visualizes data as a circle divided into sectors that each represents a portion of the whole.",
      "Module": "viz/pie_chart",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports right-to-left representation."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "IsCollection": true,
              "EnumName": "ExportFormat",
              "SingularName": "format",
              "Description": "Specifies a set of formats available for exporting into."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export | enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in IE9 and Safari browsers."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDrawn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the drawn event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "onIncidentOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the incidentOccurred event."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "size": {
          "Description": "Specifies the size of the widget in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "EnumName": "VizTheme",
          "Description": "Sets the name of the theme to be used in the widget."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget title.",
          "Options": {
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the widget subtitle.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title text."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Specifies the appearance of the tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether the tooltip's border is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "jquery"
              ],
              "Description": "Specifies the container to draw tooltips inside of it."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies the font of the text displayed by a tooltip."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies the format of the value displayed by a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of tooltips."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space on the left and the right of the text displayed by a tooltip."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space above and below the text displayed by a tooltip."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | format | precision option instead."
            },
            "shadow": {
              "Description": "Specifies the appearance of the tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the blur distance of the tooltip's shadow."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the horizontal offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the vertical offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the z-index of tooltips."
            },
            "argumentFormat": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for arguments of the chart's series points."
            },
            "argumentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | argumentFormat | precision option instead."
            },
            "customizeTooltip": {
              "IsFunc": true,
              "Description": "Allows you to change the appearance of specified tooltips."
            },
            "percentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | format | percentPrecision option instead."
            }
          }
        },
        "adaptiveLayout": {
          "Description": "Specifies adaptive layout options.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the widget's height small enough for the layout to begin adapting."
            },
            "keepLabels": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not point labels should be kept when the layout is adapting."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the widget's width small enough for the layout to begin adapting."
            }
          }
        },
        "animation": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies animation options.",
          "Options": {
            "duration": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies how long the animation runs in milliseconds."
            },
            "easing": {
              "EnumName": "VizAnimationEasing",
              "Description": "Specifies the easing function of the animation."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the animation in the widget."
            },
            "maxPointCountSupported": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many series points the widget should have before the animation will be disabled."
            }
          }
        },
        "customizeLabel": {
          "IsFunc": true,
          "Description": "Customizes the appearance of an individual point label."
        },
        "customizePoint": {
          "IsFunc": true,
          "Description": "Customizes the appearance of an individual series point."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "Specifies the origin of data for the widget."
        },
        "legend": {
          "Description": "Specifies PieChart legend options.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the legend's background."
            },
            "border": {
              "Description": "Specifies legend border options.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies border color."
                },
                "cornerRadius": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a radius of a border's corners in degrees."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the border's dash style in the legend."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a border's opacity."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets a legend's border visibility state."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a border's width, in pixels."
                }
              }
            },
            "columnCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many columns it takes to arrange legend items."
            },
            "columnItemSpacing": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a blank space between legend columns in pixels."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in the legend."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies a legend's position on the chart."
            },
            "itemsAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the alignment of legend items."
            },
            "itemTextPosition": {
              "EnumName": "Position",
              "Description": "Specifies the position of text relative to the item marker."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the distance between the legend and surrounding widget elements or container borders in pixels.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's left margin in pixels."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's right margin in pixels."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                }
              }
            },
            "markerSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the size of item markers in the legend in pixels."
            },
            "orientation": {
              "EnumName": "Orientation",
              "Description": "Specifies whether to place legend items horizontally or vertically."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a blank space between a legend's left/right boundaries and the inner item boundaries in pixels."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a blank space between a legend's top/bottom boundaries and the inner item boundaries in pixels."
            },
            "rowCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many rows it takes to arrange legend items."
            },
            "rowItemSpacing": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a blank space between legend rows in pixels."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies a legend's position on the chart."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies the visibility state of the chart's legend."
            },
            "customizeHint": {
              "IsFunc": true,
              "Description": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item."
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by a legend item."
            },
            "hoverMode": {
              "EnumName": "PieChartLegendHoverMode",
              "Description": "Specifies what chart elements to highlight when a corresponding item in the legend is hovered over."
            }
          }
        },
        "onDone": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the done event."
        },
        "onPointClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pointClick event."
        },
        "onPointHoverChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pointHoverChanged event."
        },
        "onPointSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pointSelectionChanged event."
        },
        "onTooltipHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipHidden event."
        },
        "onTooltipShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipShown event."
        },
        "palette": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "EnumName": "VizPalette",
          "SingularName": "palette",
          "Description": "Sets the name of the palette to be used in the chart. Alternatively, an array of colors can be set as a custom palette to be used within this chart."
        },
        "pointSelectionMode": {
          "EnumName": "ChartElementSelectionMode",
          "Description": "Specifies whether a single point or multiple points can be selected in the chart."
        },
        "commonSeriesSettings": {
          "ComplexTypes": [
            "PieChartCommonSeriesSettings"
          ],
          "Description": "An object defining the configuration options that are common for all series of the PieChart widget."
        },
        "diameter": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the diameter of the pie."
        },
        "innerRadius": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the fraction of the inner radius relative to the total radius in the series of the 'doughnut' type. The value should be between 0 and 1."
        },
        "minDiameter": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the minimum diameter of the pie."
        },
        "onLegendClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the legendClick event."
        },
        "resolveLabelOverlapping": {
          "EnumName": "PieChartResolveLabelOverlapping",
          "Description": "Specifies how a chart must behave when series point labels overlap."
        },
        "segmentsDirection": {
          "EnumName": "PieChartSegmentsDirection",
          "Description": "Specifies the direction that the pie chart segments will occupy."
        },
        "series": {
          "ComplexTypes": [
            "PieChartSeries"
          ],
          "IsCollection": true,
          "SingularName": "series",
          "Description": "Specifies options for the series of the PieChart widget."
        },
        "seriesTemplate": {
          "Description": "Defines options for the series template.",
          "Options": {
            "customizeSeries": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns a series object with individual series settings."
            },
            "nameField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a data source field that represents the series name."
            }
          }
        },
        "sizeGroup": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Allows you to display several adjoining pies in the same size."
        },
        "startAngle": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the angle in arc degrees from which the first segment of a pie chart should start."
        },
        "type": {
          "EnumName": "PieChartType",
          "Description": "Specifies the type of the pie chart series."
        }
      }
    },
    "dxPivot": {
      "Description": "The Pivot provides a quick way to manage multiple views. It includes a collection of views and a navigation header. An end user switches the views by swiping them or by clicking their titles on the navigation header.",
      "Module": "ui/pivot",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The index of the currently active pivot item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The selected item object."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a name for a pivot item."
            },
            "titleTemplate": {
              "IsTemplate": true,
              "Description": "A template to be used for rendering the item title."
            }
          }
        },
        "contentTemplate": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering widget content."
        },
        "itemTitleTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering an item title."
        },
        "swipeEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to allow users to switch between items by swiping."
        }
      }
    },
    "dxPivotGrid": {
      "Description": "The PivotGrid is a widget that allows you to display and analyze multi-dimensional data from a local storage or an OLAP cube.",
      "Module": "ui/pivot_grid",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "allowExpandAll": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Allows an end-user to expand/collapse all header items within a header level."
        },
        "allowFiltering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Allows an end-user to change filtering options."
        },
        "allowSorting": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Allows an end-user to change sorting options."
        },
        "allowSortingBySummary": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Allows an end-user to sort columns by summary values."
        },
        "dataFieldArea": {
          "EnumName": "PivotGridDataFieldArea",
          "Description": "Specifies the area to which data field headers must belong."
        },
        "dataSource": {
          "ComplexTypes": [
            "PivotGridDataSource"
          ],
          "Description": "Specifies a data source for the pivot grid."
        },
        "export": {
          "Description": "Configures client-side export.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables client-side export."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which grid data is exported."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable export in IE9 and Safari browsers."
            }
          }
        },
        "fieldChooser": {
          "Description": "The Field Chooser configuration options.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables or disables the field chooser."
            },
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the field chooser height."
            },
            "layout": {
              "EnumName": "PivotGridFieldChooserLayout",
              "Description": "Specifies the field chooser layout."
            },
            "texts": {
              "Description": "Strings that can be changed or localized in the pivot grid's integrated Field Chooser.",
              "Options": {
                "allFields": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The string to display instead of All Fields."
                },
                "columnFields": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The string to display instead of Column Fields."
                },
                "dataFields": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The string to display instead of Data Fields."
                },
                "filterFields": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The string to display instead of Filter Fields."
                },
                "rowFields": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The string to display instead of Row Fields."
                }
              }
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to display as a title of the field chooser popup window."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the field chooser width."
            }
          }
        },
        "fieldPanel": {
          "Description": "Configures the field panel.",
          "Options": {
            "allowFieldDragging": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Makes fields on the field panel draggable."
            },
            "showColumnFields": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Shows/hides column fields on the field panel."
            },
            "showDataFields": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Shows/hides data fields on the field panel."
            },
            "showFilterFields": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Shows/hides filter fields on the field panel."
            },
            "showRowFields": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Shows/hides row fields on the field panel."
            },
            "texts": {
              "Description": "Specifies the placeholders of the field areas.",
              "Options": {
                "columnFieldArea": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the placeholder of the column field area."
                },
                "dataFieldArea": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the placeholder of the data field area."
                },
                "filterFieldArea": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the placeholder of the filter field area."
                },
                "rowFieldArea": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the placeholder of the row field area."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Shows/hides the field panel."
            }
          }
        },
        "hideEmptySummaryCells": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to hide rows and columns with no data."
        },
        "loadPanel": {
          "Description": "Specifies options configuring the load panel.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables or disables the load panel."
            },
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the load panel."
            },
            "indicatorSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL pointing to an image that will be used as a load indicator."
            },
            "showIndicator": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to show a load indicator."
            },
            "showPane": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to show load panel background."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to display inside a load panel."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the load panel."
            }
          }
        },
        "onCellClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cellClick event."
        },
        "onCellPrepared": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cellPrepared event."
        },
        "onContextMenuPreparing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contextMenuPreparing event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "rowHeaderLayout": {
          "EnumName": "PivotGridRowHeadersLayout",
          "Description": "Specifies the layout of items in the row header."
        },
        "scrolling": {
          "Description": "A configuration object specifying scrolling options.",
          "Options": {
            "mode": {
              "EnumName": "PivotGridScrollingMode",
              "Description": "Specifies the scrolling mode."
            },
            "useNative": {
              "PrimitiveTypes": [
                "bool",
                "string"
              ],
              "Description": "Specifies whether or not the widget uses native scrolling."
            }
          }
        },
        "showBorders": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the outer borders of the grid are visible or not."
        },
        "showColumnGrandTotals": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to display the Grand Total column."
        },
        "showColumnTotals": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to display the Total columns."
        },
        "showRowGrandTotals": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to display the Grand Total row."
        },
        "showRowTotals": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to display the Total rows. Applies only if rowHeaderLayout is \"standard\"."
        },
        "showTotalsPrior": {
          "EnumName": "PivotGridTotalsDisplayMode",
          "Description": "Specifies where to show the total rows or columns. Applies only if rowHeaderLayout is \"standard\"."
        },
        "stateStoring": {
          "Description": "A configuration object specifying options related to state storing.",
          "Options": {
            "customLoad": {
              "IsFunc": true,
              "Description": "Specifies a callback function that performs specific actions on state loading."
            },
            "customSave": {
              "IsFunc": true,
              "Description": "Specifies a callback function that performs specific actions on state saving."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a grid saves its state."
            },
            "savingTimeout": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the delay between the last change of a grid state and the operation of saving this state in milliseconds."
            },
            "storageKey": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a unique key to be used for storing the grid state."
            },
            "type": {
              "EnumName": "StateStoringType",
              "Description": "Specifies the type of storage to be used for state storing."
            }
          }
        },
        "texts": {
          "Description": "Strings that can be changed or localized in the PivotGrid widget.",
          "Options": {
            "collapseAll": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a Collapse All context menu item."
            },
            "dataNotAvailable": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed in a cell when its data is unavailable for some reason."
            },
            "expandAll": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as an Expand All context menu item."
            },
            "exportToExcel": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as an Export to Excel file context menu item."
            },
            "grandTotal": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a header of the Grand Total row and column."
            },
            "noData": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text displayed when a pivot grid does not contain any fields."
            },
            "removeAllSorting": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a Remove All Sorting context menu item."
            },
            "showFieldChooser": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a Show Field Chooser context menu item."
            },
            "sortColumnBySummary": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a Sort Column by Summary Value context menu item."
            },
            "sortRowBySummary": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a Sort Row by Summary Value context menu item."
            },
            "total": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a header of the Total row and column."
            }
          }
        },
        "useNativeScrolling": {
          "PrimitiveTypes": [
            "bool",
            "string"
          ],
          "IsDeprecated": true
        },
        "wordWrapEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether long text in header items should be wrapped."
        }
      }
    },
    "dxPivotGridFieldChooser": {
      "Description": "A complementary widget for the PivotGrid that allows you to manage data displayed in the PivotGrid.",
      "Module": "ui/pivot_grid_field_chooser",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "The data source of a PivotGrid widget."
        },
        "layout": {
          "EnumName": "PivotGridFieldChooserLayout",
          "Description": "Specifies the field chooser layout."
        },
        "onContextMenuPreparing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contextMenuPreparing event."
        },
        "texts": {
          "Description": "Strings that can be changed or localized in the PivotGridFieldChooser widget.",
          "Options": {
            "allFields": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display instead of All Fields."
            },
            "columnFields": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display instead of Column Fields."
            },
            "dataFields": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display instead of Data Fields."
            },
            "filterFields": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display instead of Filter Fields."
            },
            "rowFields": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display instead of Row Fields."
            }
          }
        }
      }
    },
    "dxPolarChart": {
      "Description": "The PolarChart is a widget that visualizes data in a polar coordinate system.",
      "Module": "viz/polar_chart",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports right-to-left representation."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "IsCollection": true,
              "EnumName": "ExportFormat",
              "SingularName": "format",
              "Description": "Specifies a set of formats available for exporting into."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export | enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in IE9 and Safari browsers."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDrawn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the drawn event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "onIncidentOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the incidentOccurred event."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "size": {
          "Description": "Specifies the size of the widget in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "EnumName": "VizTheme",
          "Description": "Sets the name of the theme to be used in the widget."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget title.",
          "Options": {
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the widget subtitle.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title text."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Specifies the appearance of the tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether the tooltip's border is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "jquery"
              ],
              "Description": "Specifies the container to draw tooltips inside of it."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies the font of the text displayed by a tooltip."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies the format of the value displayed by a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of tooltips."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space on the left and the right of the text displayed by a tooltip."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space above and below the text displayed by a tooltip."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | format | precision option instead."
            },
            "shadow": {
              "Description": "Specifies the appearance of the tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the blur distance of the tooltip's shadow."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the horizontal offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the vertical offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the z-index of tooltips."
            },
            "argumentFormat": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for arguments of the chart's series points."
            },
            "argumentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | argumentFormat | precision option instead."
            },
            "customizeTooltip": {
              "IsFunc": true,
              "Description": "Allows you to change the appearance of specified tooltips."
            },
            "percentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | format | percentPrecision option instead."
            },
            "shared": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies the kind of information to display in a tooltip."
            }
          }
        },
        "adaptiveLayout": {
          "Description": "Specifies adaptive layout options.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the widget's height small enough for the layout to begin adapting."
            },
            "keepLabels": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not point labels should be kept when the layout is adapting."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the widget's width small enough for the layout to begin adapting."
            }
          }
        },
        "animation": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies animation options.",
          "Options": {
            "duration": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies how long the animation runs in milliseconds."
            },
            "easing": {
              "EnumName": "VizAnimationEasing",
              "Description": "Specifies the easing function of the animation."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the animation in the widget."
            },
            "maxPointCountSupported": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many series points the widget should have before the animation will be disabled."
            }
          }
        },
        "customizeLabel": {
          "IsFunc": true,
          "Description": "Customizes the appearance of an individual point label."
        },
        "customizePoint": {
          "IsFunc": true,
          "Description": "Customizes the appearance of an individual series point."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "Specifies the origin of data for the widget."
        },
        "legend": {
          "Description": "Specifies the options of a chart's legend.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the legend's background."
            },
            "border": {
              "Description": "Specifies legend border options.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies border color."
                },
                "cornerRadius": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a radius of a border's corners in degrees."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the border's dash style in the legend."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a border's opacity."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets a legend's border visibility state."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a border's width, in pixels."
                }
              }
            },
            "columnCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many columns it takes to arrange legend items."
            },
            "columnItemSpacing": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a blank space between legend columns in pixels."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in the legend."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies a legend's position on the chart."
            },
            "itemsAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the alignment of legend items."
            },
            "itemTextPosition": {
              "EnumName": "Position",
              "Description": "Specifies the position of text relative to the item marker."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the distance between the legend and surrounding widget elements or container borders in pixels.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's left margin in pixels."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's right margin in pixels."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                }
              }
            },
            "markerSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the size of item markers in the legend in pixels."
            },
            "orientation": {
              "EnumName": "Orientation",
              "Description": "Specifies whether to place legend items horizontally or vertically."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a blank space between a legend's left/right boundaries and the inner item boundaries in pixels."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a blank space between a legend's top/bottom boundaries and the inner item boundaries in pixels."
            },
            "rowCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many rows it takes to arrange legend items."
            },
            "rowItemSpacing": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a blank space between legend rows in pixels."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies a legend's position on the chart."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies the visibility state of the chart's legend."
            },
            "customizeHint": {
              "IsFunc": true,
              "Description": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item."
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by legend items."
            },
            "hoverMode": {
              "EnumName": "ChartLegendHoverMode",
              "Description": "Specifies what series elements to highlight when a corresponding item in the legend is hovered over."
            }
          }
        },
        "onDone": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the done event."
        },
        "onPointClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pointClick event."
        },
        "onPointHoverChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pointHoverChanged event."
        },
        "onPointSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pointSelectionChanged event."
        },
        "onTooltipHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipHidden event."
        },
        "onTooltipShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipShown event."
        },
        "palette": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "EnumName": "VizPalette",
          "SingularName": "palette",
          "Description": "Sets the name of the palette to be used in the chart. Alternatively, an array of colors can be set as a custom palette to be used within this chart."
        },
        "pointSelectionMode": {
          "EnumName": "ChartElementSelectionMode",
          "Description": "Specifies whether a single point or multiple points can be selected in the chart."
        },
        "argumentAxis": {
          "Description": "Specifies argument axis options for the PolarChart widget.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the line that represents an axis."
            },
            "constantLineStyle": {
              "Description": "Specifies the appearance of all the widget's constant lines.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a constant line."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for a constant line."
                },
                "label": {
                  "Description": "An object defining constant line label options.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a constant line label."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Indicates whether or not to display labels for the axis constant lines."
                    }
                  }
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a constant line width in pixels."
                }
              }
            },
            "discreteAxisDivisionMode": {
              "EnumName": "DiscreteAxisDivisionMode",
              "Description": "Specifies whether ticks/grid lines of a discrete axis are located between labels or cross the labels."
            },
            "grid": {
              "Description": "An object defining the configuration options for the grid lines of an axis in the PolarChart widget.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for grid lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies an opacity for grid lines."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not the grid lines of an axis are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of grid lines."
                }
              }
            },
            "inverted": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not an axis is inverted."
            },
            "label": {
              "Description": "Specifies options for argument axis labels.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for axis labels."
                },
                "indentFromAxis": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the spacing between an axis and its labels in pixels."
                },
                "overlappingBehavior": {
                  "EnumName": "PolarChartOverlappingBehavior",
                  "Description": "Decides how to arrange axis labels when there is not enough space to keep all of them."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not axis labels are visible."
                },
                "customizeHint": {
                  "IsFunc": true,
                  "Description": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a label on the argument axis."
                },
                "customizeText": {
                  "IsFunc": true,
                  "Description": "Specifies a callback function that returns the text to be displayed by argument axis labels."
                },
                "format": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "EnumName": "Format",
                  "Description": "Specifies a format for the text displayed by axis labels."
                },
                "precision": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the argumentAxis | label | format | precision option instead."
                }
              }
            },
            "minorGrid": {
              "Description": "Specifies the options of the minor grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the lines of the minor grid."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies an opacity for the lines of the minor grid."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether the minor grid is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a width for the lines of the minor grid."
                }
              }
            },
            "minorTick": {
              "Description": "Specifies the options of the minor ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies minor tick length."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies an opacity for the minor ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not the minor ticks are displayed on an axis."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies minor tick width."
                }
              }
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of the line that represents an axis."
            },
            "setTicksAtUnitBeginning": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not to set ticks/grid lines of a continuous axis of the 'date-time' type at the beginning of each date-time interval."
            },
            "stripStyle": {
              "Description": "An object defining configuration options for strip style.",
              "Options": {
                "label": {
                  "Description": "An object defining the configuration options for a strip label style.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a strip label."
                    }
                  }
                }
              }
            },
            "tick": {
              "Description": "An object defining the configuration options for axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies ticks color."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies tick length."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies tick opacity."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not ticks are visible on an axis."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies tick width."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not the line that represents an axis in a chart is visible."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the line that represents an axis in the chart."
            },
            "argumentType": {
              "EnumName": "ChartDataType",
              "Description": "Specifies the desired type of axis values."
            },
            "axisDivisionFactor": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the minimum distance between two neighboring major ticks in pixels. Applies only to the axes of the \"continuous\" and \"logarithmic\" types."
            },
            "categories": {
              "PrimitiveTypes": [
                "double",
                "string",
                "date"
              ],
              "IsCollection": true,
              "SingularName": "category",
              "Description": "Specifies the order in which arguments (categories) are arranged on the discrete argument axis."
            },
            "constantLines": {
              "IsCollection": true,
              "SingularName": "constantLine",
              "Description": "Defines an array of the argument axis constant lines.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a constant line."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for a constant line."
                },
                "label": {
                  "Description": "An object defining constant line label options.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a constant line label."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Indicates whether or not to display labels for the axis constant lines."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text to be displayed in a constant line label."
                    }
                  }
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a constant line width in pixels."
                },
                "value": {
                  "PrimitiveTypes": [
                    "date",
                    "double",
                    "string"
                  ],
                  "Description": "Specifies a value to be displayed by a constant line."
                }
              }
            },
            "firstPointOnStartAngle": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to display the first point at the angle specified by the startAngle option."
            },
            "hoverMode": {
              "EnumName": "ArgumentAxisHoverMode",
              "Description": "Specifies the elements that will be highlighted when the argument axis is hovered over."
            },
            "logarithmBase": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the value to be raised to a power when generating ticks for a logarithmic axis."
            },
            "minorTickCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the number of minor ticks between two neighboring major ticks."
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "VizTimeInterval",
              "Description": "Specifies the interval between minor ticks.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "originValue": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the value to be used as the origin for the argument axis."
            },
            "period": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the period of the argument values in the data source."
            },
            "startAngle": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the angle in arc degrees to which the argument axis should be rotated. The positive values rotate the axis clockwise."
            },
            "strips": {
              "IsCollection": true,
              "SingularName": "strip",
              "Description": "Specifies options for argument axis strips.",
              "Options": {
                "label": {
                  "Description": "An object that defines the label configuration options of a strip.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a strip label."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text displayed in a strip."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a strip."
                },
                "endValue": {
                  "PrimitiveTypes": [
                    "date",
                    "double",
                    "string"
                  ],
                  "Description": "Specifies an end value for a strip."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "date",
                    "double",
                    "string"
                  ],
                  "Description": "Specifies a start value for a strip."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "VizTimeInterval",
              "Description": "Specifies an interval between axis ticks/grid lines.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "type": {
              "EnumName": "AxisScaleType",
              "Description": "Specifies the required type of the argument axis."
            }
          }
        },
        "barWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a common bar width as a percentage from 0 to 1."
        },
        "commonAxisSettings": {
          "Description": "An object defining the configuration options that are common for all axes of the PolarChart widget.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the line that represents an axis."
            },
            "constantLineStyle": {
              "Description": "Specifies the appearance of all the widget's constant lines.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a constant line."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for a constant line."
                },
                "label": {
                  "Description": "An object defining constant line label options.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a constant line label."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Indicates whether or not to display labels for the axis constant lines."
                    }
                  }
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a constant line width in pixels."
                }
              }
            },
            "discreteAxisDivisionMode": {
              "EnumName": "DiscreteAxisDivisionMode",
              "Description": "Specifies whether ticks/grid lines of a discrete axis are located between labels or cross the labels."
            },
            "grid": {
              "Description": "An object defining the configuration options for the grid lines of an axis in the PolarChart widget.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for grid lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies an opacity for grid lines."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not the grid lines of an axis are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of grid lines."
                }
              }
            },
            "inverted": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not an axis is inverted."
            },
            "label": {
              "Description": "An object defining the label configuration options that are common for all axes in the PolarChart widget.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for axis labels."
                },
                "indentFromAxis": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the spacing between an axis and its labels in pixels."
                },
                "overlappingBehavior": {
                  "EnumName": "PolarChartOverlappingBehavior",
                  "Description": "Decides how to arrange axis labels when there is not enough space to keep all of them."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not axis labels are visible."
                }
              }
            },
            "minorGrid": {
              "Description": "Specifies the options of the minor grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the lines of the minor grid."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies an opacity for the lines of the minor grid."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether the minor grid is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a width for the lines of the minor grid."
                }
              }
            },
            "minorTick": {
              "Description": "Specifies the options of the minor ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies minor tick length."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies an opacity for the minor ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not the minor ticks are displayed on an axis."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies minor tick width."
                }
              }
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of the line that represents an axis."
            },
            "setTicksAtUnitBeginning": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not to set ticks/grid lines of a continuous axis of the 'date-time' type at the beginning of each date-time interval."
            },
            "stripStyle": {
              "Description": "An object defining configuration options for strip style.",
              "Options": {
                "label": {
                  "Description": "An object defining the configuration options for a strip label style.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a strip label."
                    }
                  }
                }
              }
            },
            "tick": {
              "Description": "An object defining the configuration options for axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies ticks color."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies tick length."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies tick opacity."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not ticks are visible on an axis."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies tick width."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not the line that represents an axis in a chart is visible."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the line that represents an axis in the chart."
            }
          }
        },
        "commonSeriesSettings": {
          "ComplexTypes": [
            "PolarChartCommonSeriesSettings"
          ],
          "Description": "An object defining the configuration options that are common for all series of the PolarChart widget."
        },
        "containerBackgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the parent page element."
        },
        "dataPrepareSettings": {
          "Description": "An object providing options for managing data from a data source.",
          "Options": {
            "checkTypeForAllData": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to validate the values from a data source."
            },
            "convertToAxisDataType": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to convert the values from a data source into the data type of an axis."
            },
            "sortingMethod": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies how to sort the series points."
            }
          }
        },
        "equalBarWidth": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not all bars in a series must have the same angle, or may have different angles if any points in other series are missing."
        },
        "negativesAsZeroes": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Forces the widget to treat negative values as zeroes. Applies to stacked-like series only."
        },
        "onArgumentAxisClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the argumentAxisClick event."
        },
        "onLegendClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the legendClick event."
        },
        "onSeriesClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the seriesClick event."
        },
        "onSeriesHoverChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the seriesHoverChanged event."
        },
        "onSeriesSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the seriesSelectionChanged event."
        },
        "resolveLabelOverlapping": {
          "EnumName": "PolarChartResolveLabelOverlapping",
          "Description": "Specifies how the chart must behave when series point labels overlap."
        },
        "series": {
          "ComplexTypes": [
            "PolarChartSeries"
          ],
          "IsCollection": true,
          "SingularName": "series",
          "Description": "Specifies options for PolarChart widget series."
        },
        "seriesSelectionMode": {
          "EnumName": "ChartElementSelectionMode",
          "Description": "Specifies whether a single series or multiple series can be selected in the chart."
        },
        "seriesTemplate": {
          "Description": "Defines options for the series template.",
          "Options": {
            "customizeSeries": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns a series object with individual series settings."
            },
            "nameField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a data source field that represents the series name."
            }
          }
        },
        "useSpiderWeb": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates whether or not to display a \"spider web\"."
        },
        "valueAxis": {
          "Description": "Specifies value axis options for the PolarChart widget.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the line that represents an axis."
            },
            "constantLineStyle": {
              "Description": "Specifies the appearance of all the widget's constant lines.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a constant line."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for a constant line."
                },
                "label": {
                  "Description": "An object defining constant line label options.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a constant line label."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Indicates whether or not to display labels for the axis constant lines."
                    }
                  }
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a constant line width in pixels."
                }
              }
            },
            "discreteAxisDivisionMode": {
              "EnumName": "DiscreteAxisDivisionMode",
              "Description": "Specifies whether ticks/grid lines of a discrete axis are located between labels or cross the labels."
            },
            "grid": {
              "Description": "An object defining the configuration options for the grid lines of an axis in the PolarChart widget.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for grid lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies an opacity for grid lines."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not the grid lines of an axis are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of grid lines."
                }
              }
            },
            "inverted": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not an axis is inverted."
            },
            "label": {
              "Description": "Specifies options for value axis labels.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for axis labels."
                },
                "indentFromAxis": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the spacing between an axis and its labels in pixels."
                },
                "overlappingBehavior": {
                  "EnumName": "PolarChartOverlappingBehavior",
                  "Description": "Decides how to arrange axis labels when there is not enough space to keep all of them."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not axis labels are visible."
                },
                "customizeHint": {
                  "IsFunc": true,
                  "Description": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a label on the value axis."
                },
                "customizeText": {
                  "IsFunc": true,
                  "Description": "Specifies a callback function that returns the text to be displayed in value axis labels."
                },
                "format": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "EnumName": "Format",
                  "Description": "Specifies a format for the text displayed by axis labels."
                },
                "precision": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the valueAxis | label | format | precision option instead."
                }
              }
            },
            "minorGrid": {
              "Description": "Specifies the options of the minor grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the lines of the minor grid."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies an opacity for the lines of the minor grid."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether the minor grid is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a width for the lines of the minor grid."
                }
              }
            },
            "minorTick": {
              "Description": "Specifies the options of the minor ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies minor tick length."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies an opacity for the minor ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not the minor ticks are displayed on an axis."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies minor tick width."
                }
              }
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of the line that represents an axis."
            },
            "setTicksAtUnitBeginning": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not to set ticks/grid lines of a continuous axis of the 'date-time' type at the beginning of each date-time interval."
            },
            "stripStyle": {
              "Description": "An object defining configuration options for strip style.",
              "Options": {
                "label": {
                  "Description": "An object defining the configuration options for a strip label style.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a strip label."
                    }
                  }
                }
              }
            },
            "tick": {
              "Description": "An object defining the configuration options for axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies ticks color."
                },
                "length": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies tick length."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies tick opacity."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not ticks are visible on an axis."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies tick width."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not the line that represents an axis in a chart is visible."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the line that represents an axis in the chart."
            },
            "axisDivisionFactor": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a coefficient for dividing the value axis."
            },
            "categories": {
              "PrimitiveTypes": [
                "double",
                "string",
                "date"
              ],
              "IsCollection": true,
              "SingularName": "category",
              "Description": "Specifies the order in which discrete values are arranged on the value axis."
            },
            "constantLines": {
              "IsCollection": true,
              "SingularName": "constantLine",
              "Description": "Defines an array of the value axis constant lines.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a constant line."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for a constant line."
                },
                "label": {
                  "Description": "An object defining constant line label options.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a constant line label."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Indicates whether or not to display labels for the axis constant lines."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text to be displayed in a constant line label."
                    }
                  }
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a constant line width in pixels."
                },
                "value": {
                  "PrimitiveTypes": [
                    "date",
                    "double",
                    "string"
                  ],
                  "Description": "Specifies a value to be displayed by a constant line."
                }
              }
            },
            "logarithmBase": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the value to be raised to a power when generating ticks for a logarithmic axis."
            },
            "maxValueMargin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a coefficient that determines the spacing between the maximum series point and the axis."
            },
            "minorTickCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the number of minor ticks between two neighboring major ticks."
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "VizTimeInterval",
              "Description": "Specifies the interval between minor ticks.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "minValueMargin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a coefficient that determines the spacing between the minimum series point and the axis."
            },
            "showZero": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to indicate a zero value on the value axis."
            },
            "strips": {
              "IsCollection": true,
              "SingularName": "strip",
              "Description": "Specifies options for value axis strips.",
              "Options": {
                "label": {
                  "Description": "An object that defines the label configuration options of a strip.",
                  "Options": {
                    "font": {
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a strip label."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text displayed in a strip."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a strip."
                },
                "endValue": {
                  "PrimitiveTypes": [
                    "date",
                    "double",
                    "string"
                  ],
                  "Description": "Specifies an end value for a strip."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "date",
                    "double",
                    "string"
                  ],
                  "Description": "Specifies a start value for a strip."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "VizTimeInterval",
              "Description": "Specifies an interval between axis ticks/grid lines.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "type": {
              "EnumName": "AxisScaleType",
              "Description": "Specifies the required type of the value axis."
            },
            "valueMarginsEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether to display series with indents from axis boundaries."
            },
            "valueType": {
              "EnumName": "ChartDataType",
              "Description": "Specifies the desired type of axis values."
            }
          }
        }
      }
    },
    "dxPopover": {
      "Description": "The Popover is a widget that shows notifications within a box with an arrow pointing to a specified UI element.",
      "Module": "ui/popover",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is visible."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "closeOnBackButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user presses the Back hardware button."
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user clicks outside of the popover window and outside the target element."
        },
        "contentTemplate": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering widget content."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the maximum height the widget can reach while resizing."
        },
        "maxWidth": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the maximum width the widget can reach while resizing."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the minimum height the widget can reach while resizing."
        },
        "minWidth": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the minimum width the widget can reach while resizing."
        },
        "onHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hidden event."
        },
        "onHiding": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hiding event."
        },
        "onShowing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the showing event."
        },
        "onShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the shown event."
        },
        "shading": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the main screen is inactive while the widget is active."
        },
        "shadingColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shading color."
        },
        "buttons": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsDeprecated": true,
          "SingularName": "button",
          "Description": "Use the toolbarItems option instead."
        },
        "onTitleRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the titleRendered event."
        },
        "showCloseButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget displays the Close button."
        },
        "showTitle": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to display the title in the overlay window."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The title in the overlay window."
        },
        "titleTemplate": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering the widget title."
        },
        "toolbarItems": {
          "IsCollection": true,
          "SingularName": "toolbarItem",
          "Description": "Specifies items displayed on the top or bottom toolbar of the popup window.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a toolbar item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the toolbar item element."
            },
            "location": {
              "EnumName": "ToolbarItemLocation",
              "Description": "Specifies a location for the item on the toolbar."
            },
            "options": {
              "PrimitiveTypes": [
                "any"
              ],
              "Description": "Specifies a configuration object for the widget that presents a toolbar item."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the toolbar item."
            },
            "toolbar": {
              "EnumName": "Toolbar",
              "Description": "Specifies whether the item is displayed on a top or bottom toolbar."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "widget": {
              "EnumName": "ToolbarItemWidget",
              "Description": "A widget that presents a toolbar item."
            }
          }
        },
        "hideEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options of popover hiding.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "The time span after which the popover is hidden."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the event names on which the widget is hidden."
            }
          }
        },
        "position": {
          "ComplexTypes": [
            "PositionConfig"
          ],
          "EnumName": "Position",
          "Description": "An object defining widget positioning options."
        },
        "showEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options for displaying the widget.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "The time span after which the widget is shown."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the event names on which the widget is shown."
            }
          }
        },
        "target": {
          "PrimitiveTypes": [
            "jquery"
          ],
          "Description": "The target element associated with a popover."
        }
      }
    },
    "dxPopup": {
      "Description": "The Popup widget is a pop-up window overlaying the current view.",
      "Module": "ui/popup",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "The height of the widget in pixels."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "The widget width in pixels."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is visible."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "closeOnBackButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user presses the Back hardware button."
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user clicks outside of the overlapping window."
        },
        "contentTemplate": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering widget content."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "dragEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to allow a user to drag the popup window."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the maximum height the widget can reach while resizing."
        },
        "maxWidth": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the maximum width the widget can reach while resizing."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the minimum height the widget can reach while resizing."
        },
        "minWidth": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the minimum width the widget can reach while resizing."
        },
        "onHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hidden event."
        },
        "onHiding": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hiding event."
        },
        "onShowing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the showing event."
        },
        "onShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the shown event."
        },
        "shading": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the main screen is inactive while the widget is active."
        },
        "shadingColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shading color."
        },
        "buttons": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsDeprecated": true,
          "SingularName": "button",
          "Description": "Use the toolbarItems option instead."
        },
        "fullScreen": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to display the widget in full-screen mode."
        },
        "onResize": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the resize event."
        },
        "onResizeEnd": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the resizeEnd event."
        },
        "onResizeStart": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the resizeStart event."
        },
        "onTitleRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the titleRendered event."
        },
        "resizeEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not an end user can resize the widget."
        },
        "showCloseButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget displays the Close button."
        },
        "showTitle": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to display the title in the popup window."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The title in the overlay window."
        },
        "titleTemplate": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering the widget title."
        },
        "toolbarItems": {
          "IsCollection": true,
          "SingularName": "toolbarItem",
          "Description": "Specifies items displayed on the top or bottom toolbar of the popup window.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a toolbar item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the toolbar item element."
            },
            "location": {
              "EnumName": "ToolbarItemLocation",
              "Description": "Specifies a location for the item on the toolbar."
            },
            "options": {
              "PrimitiveTypes": [
                "any"
              ],
              "Description": "Specifies a configuration object for the widget that presents a toolbar item."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the toolbar item."
            },
            "toolbar": {
              "EnumName": "Toolbar",
              "Description": "Specifies whether the item is displayed on a top or bottom toolbar."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "widget": {
              "EnumName": "ToolbarItemWidget",
              "Description": "A widget that presents a toolbar item."
            }
          }
        },
        "position": {
          "ComplexTypes": [
            "PositionConfig"
          ],
          "Description": "An object defining widget positioning options."
        }
      }
    },
    "dxProgressBar": {
      "Description": "The ProgressBar is a widget that shows current progress.",
      "Module": "ui/progress_bar",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The current widget value."
        },
        "max": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The maximum value the widget can accept."
        },
        "min": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The minimum value the widget can accept."
        },
        "onComplete": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the complete event."
        },
        "showStatus": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget displays a progress status."
        },
        "statusFormat": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a format for the progress status."
        }
      }
    },
    "dxRadioGroup": {
      "Description": "The RadioGroup is a widget that contains a set of radio buttons and allows an end user to make a single selection from the set.",
      "Module": "ui/radio_group",
      "IsEditor": true,
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The currently selected value in the widget."
        },
        "valueExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of a data source item field whose value is held in the value configuration option."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "layout": {
          "EnumName": "Orientation",
          "Description": "Specifies the radio group layout."
        }
      }
    },
    "dxRangeSelector": {
      "Description": "The RangeSelector is a widget that allows a user to select a range of values on a scale.",
      "Module": "viz/range_selector",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports right-to-left representation."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "IsCollection": true,
              "EnumName": "ExportFormat",
              "SingularName": "format",
              "Description": "Specifies a set of formats available for exporting into."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export | enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in IE9 and Safari browsers."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDrawn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the drawn event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "onIncidentOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the incidentOccurred event."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "size": {
          "Description": "Specifies the size of the widget in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "EnumName": "VizTheme",
          "Description": "Sets the name of the theme to be used in the widget."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget title.",
          "Options": {
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the widget subtitle.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title text."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "background": {
          "Description": "Specifies the options for the range selector's background.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the background color for the RangeSelector."
            },
            "image": {
              "Description": "Specifies image options.",
              "Options": {
                "location": {
                  "EnumName": "BackgroundImageLocation",
                  "Description": "Specifies a location for the image in the background of a range selector."
                },
                "url": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the image's URL."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not the background (background color and/or image) is visible."
            }
          }
        },
        "behavior": {
          "Description": "Specifies the RangeSelector's behavior options.",
          "Options": {
            "allowSlidersSwap": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not you can swap sliders."
            },
            "animationEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not animation is enabled."
            },
            "callSelectedRangeChanged": {
              "IsDeprecated": true,
              "EnumName": "ValueChangedCallMode",
              "Description": "Use the callValueChanged option instead."
            },
            "callValueChanged": {
              "EnumName": "ValueChangedCallMode",
              "Description": "Specifies when to call the onValueChanged function."
            },
            "manualRangeSelectionEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not an end user can specify the range using a mouse, without the use of sliders."
            },
            "moveSelectedRangeByClick": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not an end user can shift the selected range to the required location on a scale by clicking."
            },
            "snapToTicks": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether to snap a slider to ticks."
            }
          }
        },
        "chart": {
          "Description": "Specifies the options required to display a chart as the range selector's background.",
          "Options": {
            "barWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a common bar width as a percentage from 0 to 1."
            },
            "bottomIndent": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a coefficient for determining an indent from the bottom background boundary to the lowest chart point."
            },
            "commonSeriesSettings": {
              "ComplexTypes": [
                "ChartCommonSeriesSettings"
              ],
              "Description": "An object defining the common configuration options for the chart’s series."
            },
            "dataPrepareSettings": {
              "Description": "An object providing options for managing data from a data source.",
              "Options": {
                "checkTypeForAllData": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether or not to validate values from a data source."
                },
                "convertToAxisDataType": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether or not to convert the values from a data source into the data type of an axis."
                },
                "sortingMethod": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies how to sort series points."
                }
              }
            },
            "equalBarWidth": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether all bars in a series must have the same width, or may have different widths if any points in other series are missing."
            },
            "negativesAsZeroes": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Forces the widget to treat negative values as zeroes. Applies to stacked-like series only."
            },
            "palette": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "EnumName": "VizPalette",
              "SingularName": "palette",
              "Description": "Sets the name of the palette to be used in the range selector's chart. Alternatively, an array of colors can be set as a custom palette to be used within this chart."
            },
            "series": {
              "ComplexTypes": [
                "ChartSeries"
              ],
              "IsCollection": true,
              "SingularName": "series",
              "Description": "An object defining the chart’s series."
            },
            "seriesTemplate": {
              "Description": "Defines options for the series template.",
              "Options": {
                "customizeSeries": {
                  "IsFunc": true,
                  "Description": "Specifies a callback function that returns a series object with individual series settings."
                },
                "nameField": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a data source field that represents the series name."
                }
              }
            },
            "topIndent": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a coefficient for determining an indent from the background's top boundary to the topmost chart point."
            },
            "useAggregation": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to filter the series points depending on their quantity."
            },
            "valueAxis": {
              "Description": "Configures the chart value axis.",
              "Options": {
                "inverted": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not the chart's value axis must be inverted."
                },
                "logarithmBase": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the value to be raised to a power when generating ticks for a logarithmic value axis."
                },
                "max": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the maximum value of the chart's value axis."
                },
                "min": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the minimum value of the chart's value axis."
                },
                "type": {
                  "EnumName": "RangeSelectorChartAxisScaleType",
                  "Description": "Specifies the type of the value axis."
                },
                "valueType": {
                  "EnumName": "ChartDataType",
                  "Description": "Specifies the desired type of axis values."
                }
              }
            }
          }
        },
        "containerBackgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the parent page element."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "Specifies a data source for the scale values and for the chart at the background."
        },
        "dataSourceField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides data for the scale."
        },
        "indent": {
          "Description": "Range selector's indent options.",
          "Options": {
            "left": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies range selector's left indent."
            },
            "right": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies range selector's right indent."
            }
          }
        },
        "onSelectedRangeChanged": {
          "IsDeprecated": true,
          "IsFunc": true,
          "IsEvent": true,
          "Description": "Use the onValueChanged option instead."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "scale": {
          "Description": "Specifies options of the range selector's scale.",
          "Options": {
            "categories": {
              "PrimitiveTypes": [
                "double",
                "string",
                "date"
              ],
              "IsCollection": true,
              "SingularName": "category",
              "Description": "Specifies the order of arguments on a discrete scale."
            },
            "endValue": {
              "PrimitiveTypes": [
                "date",
                "double",
                "string"
              ],
              "Description": "Specifies the scale's end value."
            },
            "label": {
              "Description": "Specifies common options for scale labels.",
              "Options": {
                "customizeText": {
                  "IsFunc": true,
                  "Description": "Specifies a callback function that returns the text to be displayed in scale labels."
                },
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the text displayed in the range selector's scale labels."
                },
                "format": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "EnumName": "Format",
                  "Description": "Specifies a format for the text displayed in scale labels."
                },
                "overlappingBehavior": {
                  "EnumName": "ScaleLabelOverlappingBehavior",
                  "Description": "Decides how to arrange scale labels when there is not enough space to keep all of them."
                },
                "precision": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the scale | label | format | precision option instead."
                },
                "topIndent": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a spacing between scale labels and the background bottom edge."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether or not the scale's labels are visible."
                }
              }
            },
            "logarithmBase": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the value to be raised to a power when generating ticks for a logarithmic scale."
            },
            "majorTickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "EnumName": "VizTimeInterval",
              "Description": "Use the tickInterval option instead.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tickInterval | days option instead."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tickInterval | hours option instead."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tickInterval | milliseconds option instead."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tickInterval | minutes option instead."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tickInterval | months option instead."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tickInterval | seconds option instead."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the tickInterval | years option instead."
                }
              }
            },
            "marker": {
              "Description": "Specifies options for the date-time scale's markers.",
              "Options": {
                "label": {
                  "Description": "Defines the options that can be set for the text that is displayed by the scale markers.",
                  "Options": {
                    "customizeText": {
                      "IsFunc": true,
                      "Description": "Specifies a callback function that returns the text to be displayed in scale markers."
                    },
                    "format": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "ComplexTypes": [
                        "Format"
                      ],
                      "EnumName": "Format",
                      "Description": "Specifies a format for the text displayed in scale markers."
                    }
                  }
                },
                "separatorHeight": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the height of the marker's separator."
                },
                "textLeftIndent": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the space between the marker label and the marker separator."
                },
                "textTopIndent": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the space between the marker's label and the top edge of the marker's separator."
                },
                "topIndent": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specified the indent between the marker and the scale lables."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether scale markers are visible."
                }
              }
            },
            "maxRange": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "VizTimeInterval",
              "Description": "Specifies the maximum range that can be selected.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "minorTick": {
              "Description": "Specifies options of the range selector's minor ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the scale's minor ticks."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the scale's minor ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether scale minor ticks are visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the scale's minor ticks."
                }
              }
            },
            "minorTickCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the number of minor ticks between neighboring major ticks."
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "VizTimeInterval",
              "Description": "Specifies an interval between minor ticks.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "minRange": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "VizTimeInterval",
              "Description": "Specifies the minimum range that can be selected.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "placeholderHeight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the space reserved for the scale in pixels."
            },
            "setTicksAtUnitBeginning": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not to set ticks of a date-time scale at the beginning of each date-time interval."
            },
            "showCustomBoundaryTicks": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to show ticks for the boundary scale values, when neither major ticks nor minor ticks are created for these values."
            },
            "showMinorTicks": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the minorTick | visible option instead."
            },
            "startValue": {
              "PrimitiveTypes": [
                "date",
                "double",
                "string"
              ],
              "Description": "Specifies the scale's start value."
            },
            "tick": {
              "Description": "Specifies options defining the appearance of scale ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of scale ticks (both major and minor ticks)."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of scale ticks (both major and minor ticks)."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the scale's ticks (both major and minor ticks)."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "VizTimeInterval",
              "Description": "Specifies an interval between axis ticks.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "type": {
              "EnumName": "RangeSelectorAxisScaleType",
              "Description": "Specifies the type of the scale."
            },
            "useTicksAutoArrangement": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the overlappingBehavior option instead."
            },
            "valueType": {
              "EnumName": "ChartDataType",
              "Description": "Specifies the type of values on the scale."
            }
          }
        },
        "selectedRange": {
          "IsDeprecated": true,
          "Description": "Use the value option instead.",
          "Options": {
            "endValue": {
              "PrimitiveTypes": [
                "date",
                "double",
                "string"
              ],
              "Description": "Specifies the end value of the range to be selected when displaying the RangeSelector widget on a page."
            },
            "startValue": {
              "PrimitiveTypes": [
                "date",
                "double",
                "string"
              ],
              "Description": "Specifies the start value of the range to be selected when displaying the RangeSelector widget on a page."
            }
          }
        },
        "selectedRangeColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the selected range."
        },
        "shutter": {
          "Description": "Specifies range selector shutter options.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies shutter color."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of the color of shutters."
            }
          }
        },
        "sliderHandle": {
          "Description": "Specifies the appearance of the range selector's slider handles.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the slider handles."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of the slider handles."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the slider handles."
            }
          }
        },
        "sliderMarker": {
          "Description": "Defines the options of the range selector slider markers.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the slider markers."
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by slider markers."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed by the range selector slider markers."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for the text displayed in slider markers."
            },
            "invalidRangeColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color used for the slider marker text when the currently selected range does not match the minRange and maxRange values."
            },
            "padding": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the paddingTopBottom and paddingLeftRight options instead."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the empty space between the marker's left and right borders and the marker's text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the empty space between the marker's top and bottom borders and the marker's text."
            },
            "placeholderHeight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the placeholder height of the slider marker."
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the placeholderHeight and indent options instead.",
              "Options": {
                "height": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the height of the placeholder for the left and right slider markers."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the placeholder for the left and right slider markers.",
                  "Options": {
                    "left": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the left slider marker's placeholder."
                    },
                    "right": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the right slider marker's placeholder."
                    }
                  }
                }
              }
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the sliderMarker | format | precision option instead."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not the slider markers are visible."
            }
          }
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "value",
          "Description": "The selected range, initial or current."
        }
      }
    },
    "dxRangeSlider": {
      "Description": "The RangeSlider is a widget that allows an end user to choose a range of numeric values.",
      "Module": "ui/range_slider",
      "IsEditor": true,
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "value",
          "Description": "The current slider value."
        },
        "max": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The maximum value the widget can accept."
        },
        "min": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The minimum value the widget can accept."
        },
        "keyStep": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the size of a step by which a slider handle is moved when a user uses the Page up or Page down keyboard shortcuts."
        },
        "label": {
          "Description": "Specifies options for labels displayed at the min and max values.",
          "Options": {
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for labels."
            },
            "position": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies whether labels are located over or under the scale."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not slider labels are visible."
            }
          }
        },
        "showRange": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to highlight a range selected within the widget."
        },
        "step": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The slider step size."
        },
        "tooltip": {
          "Description": "Specifies options for the slider tooltip.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not the tooltip is enabled."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies format for the tooltip."
            },
            "position": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies whether the tooltip is located over or under the slider."
            },
            "showMode": {
              "EnumName": "SliderTooltipShowMode",
              "Description": "Specifies whether the widget always shows a tooltip or only when a pointer is over the slider."
            }
          }
        },
        "end": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The right edge of the interval currently selected using the range slider."
        },
        "endName": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the name attribute of the underlying `` element."
        },
        "start": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The left edge of the interval currently selected using the range slider."
        },
        "startName": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the name attribute of the underlying `` element."
        }
      }
    },
    "dxResizable": {
      "Description": "The Resizable widget enables its content to be resizable in the UI.",
      "IsTranscludedContent": true,
      "Module": "ui/resizable",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "handles": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which borders of the widget element are used as a handle."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the upper height boundary for resizing."
        },
        "maxWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the upper width boundary for resizing."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the lower height boundary for resizing."
        },
        "minWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the lower width boundary for resizing."
        },
        "onResize": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the resize event."
        },
        "onResizeEnd": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the resizeEnd event."
        },
        "onResizeStart": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the resizeStart event."
        }
      }
    },
    "dxResponsiveBox": {
      "Description": "The ResponsiveBox widget allows you to create an application or a website with a layout adapted to different screen sizes.",
      "Module": "ui/responsive_box",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "location": {
              "IsCollection": true,
              "SingularName": "location",
              "Description": "Specifies the item location and size against the widget grid.",
              "Options": {
                "col": {
                  "PrimitiveTypes": [
                    "int32"
                  ],
                  "Description": "Specifies which column the element should occupy. Accepts an index from the cols array."
                },
                "colspan": {
                  "PrimitiveTypes": [
                    "int32"
                  ],
                  "Description": "Specifies how many columns the element should span."
                },
                "row": {
                  "PrimitiveTypes": [
                    "int32"
                  ],
                  "Description": "Specifies which row the element should occupy. Accepts an index from the rows array."
                },
                "rowspan": {
                  "PrimitiveTypes": [
                    "int32"
                  ],
                  "Description": "Specifies how many rows the element should span."
                },
                "screen": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Decides on which screens the current location settings should be applied to the element."
                }
              }
            }
          }
        },
        "cols": {
          "IsCollection": true,
          "SingularName": "col",
          "Description": "Specifies the collection of columns for the grid used to position layout elements.",
          "Options": {
            "baseSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "Mode",
              "Description": "The base width of the column."
            },
            "ratio": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "The column width ratio."
            },
            "screen": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Decides on which screens the current column is rendered."
            }
          }
        },
        "rows": {
          "IsCollection": true,
          "SingularName": "row",
          "Description": "Specifies the collection of rows for the grid used to position layout elements.",
          "Options": {
            "baseSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "Mode",
              "Description": "The base height of the row."
            },
            "ratio": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "The row height ratio."
            },
            "screen": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Decides on which screens the current row is rendered."
            }
          }
        },
        "screenByWidth": {
          "IsFunc": true,
          "Description": "Specifies the function returning the size qualifier depending on the screen's width."
        },
        "singleColumnScreen": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Decides on which screens all layout elements should be arranged in a single column."
        }
      }
    },
    "dxScheduler": {
      "Description": "The Scheduler is a widget that represents scheduled data and allows a user to manage and edit it.",
      "Module": "ui/scheduler",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "allDayExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding appointment is an all-day appointment."
        },
        "appointmentTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering appointments."
        },
        "appointmentTooltipTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering an appointment tooltip."
        },
        "cellDuration": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies cell duration in minutes."
        },
        "crossScrollingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not an end-user can scroll the view in both directions at the same time."
        },
        "currentDate": {
          "PrimitiveTypes": [
            "date",
            "double",
            "string"
          ],
          "Description": "Specifies a date displayed on the current scheduler view by default."
        },
        "currentView": {
          "EnumName": "SchedulerViewType",
          "Description": "Specifies the view used in the scheduler by default."
        },
        "dataCellTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering table cells."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "dateCellTemplate": {
          "IsTemplate": true,
          "Description": "The template used for rendering day scale items."
        },
        "dateSerializationFormat": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the serialization format for date-time values."
        },
        "descriptionExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value holds the description of the corresponding appointment."
        },
        "editing": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies which editing operations an end-user can perform on appointments.",
          "Options": {
            "allowAdding": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not an end-user can add appointments."
            },
            "allowDeleting": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not an end-user can delete appointments."
            },
            "allowDragging": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not an end-user can drag appointments."
            },
            "allowResizing": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not an end-user can change an appointment duration."
            },
            "allowUpdating": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not an end-user can change appointment options."
            }
          }
        },
        "endDateExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that defines the ending of an appointment."
        },
        "endDateTimeZoneExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that defines the timezone of the appointment end date."
        },
        "endDayHour": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies an end hour in the scheduler view's time interval."
        },
        "firstDayOfWeek": {
          "EnumName": "FirstDayOfWeek",
          "Description": "Specifies the first day of a week."
        },
        "groups": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "group",
          "Description": "Specifies the resource kinds by which the scheduler's appointments are grouped in a timetable."
        },
        "horizontalScrollingEnabled": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "max": {
          "PrimitiveTypes": [
            "date",
            "double",
            "string"
          ],
          "Description": "The latest date the widget allows you to select."
        },
        "min": {
          "PrimitiveTypes": [
            "date",
            "double",
            "string"
          ],
          "Description": "The earliest date the widget allows you to select."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty. Available for the Agenda view only."
        },
        "onAppointmentAdded": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the appointmentAdded event."
        },
        "onAppointmentAdding": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the AppointmentAdding event."
        },
        "onAppointmentClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the appointmentClick event."
        },
        "onAppointmentDblClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the appointmentDblClick event."
        },
        "onAppointmentDeleted": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the appointmentDeleted event."
        },
        "onAppointmentDeleting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the AppointmentDeleting event."
        },
        "onAppointmentFormCreated": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the appointmentFormCreated event."
        },
        "onAppointmentRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the appointmentRendered event."
        },
        "onAppointmentUpdated": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the appointmentUpdated event."
        },
        "onAppointmentUpdating": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the AppointmentUpdating event."
        },
        "onCellClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cellClick event."
        },
        "recurrenceEditMode": {
          "EnumName": "SchedulerRecurrenceEditMode",
          "Description": "Specifies the edit mode for recurring appointments."
        },
        "recurrenceExceptionExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that defines exceptions for the current recurring appointment."
        },
        "recurrenceRuleExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that defines a recurrence rule for generating recurring appointments."
        },
        "remoteFiltering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether filtering is performed on the server or client side."
        },
        "resourceCellTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering resource headers."
        },
        "resources": {
          "IsCollection": true,
          "SingularName": "resource",
          "Description": "Specifies an array of resources available in the scheduler.",
          "Options": {
            "allowMultiple": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether or not several resources of this kind can be assigned to an appointment."
            },
            "colorExpr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the resource object field that is used as a resource color."
            },
            "dataSource": {
              "IsDataSource": true,
              "Description": "A data source used to fetch resources to be available in the scheduler."
            },
            "displayExpr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the resource object field whose value is displayed by the Resource editor in the Appointment popup window."
            },
            "field": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the fieldExpr option instead."
            },
            "fieldExpr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The name of the appointment object field that specifies a resource of this kind."
            },
            "label": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the label of the Appointment popup window field that allows end users to assign a resource of this kind."
            },
            "mainColor": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the useColorAsDefault option instead."
            },
            "useColorAsDefault": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether appointments are colored like this resource kind."
            },
            "valueExpr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the resource object field that is used as a value of the Resource editor in the Appointment popup window."
            }
          }
        },
        "showAllDayPanel": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the \"All-day\" panel is visible."
        },
        "startDateExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that defines the start of an appointment."
        },
        "startDateTimeZoneExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that defines the timezone of the appointment start date."
        },
        "startDayHour": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a start hour in the scheduler view's time interval."
        },
        "textExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that holds the subject of an appointment."
        },
        "timeCellTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering time scale items."
        },
        "timeZone": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the timezone of the widget."
        },
        "useDropDownViewSwitcher": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can switch views using tabs or a drop-down menu."
        },
        "views": {
          "IsCollection": true,
          "EnumName": "SchedulerViewType",
          "SingularName": "view",
          "Description": "Configures individual views.",
          "Options": {
            "agendaDuration": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the number of dates that can be shown at a time in the agenda view."
            },
            "appointmentTemplate": {
              "IsTemplate": true,
              "Description": "The template to be used for rendering appointments."
            },
            "appointmentTooltipTemplate": {
              "IsTemplate": true,
              "Description": "The template to be used for rendering an appointment tooltip."
            },
            "cellDuration": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "The cell duration in minutes."
            },
            "dataCellTemplate": {
              "IsTemplate": true,
              "Description": "The template to be used for rendering table cells."
            },
            "dateCellTemplate": {
              "IsTemplate": true,
              "Description": "The template to be used for rendering date scale items."
            },
            "endDayHour": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "The end hour of the view time scale."
            },
            "firstDayOfWeek": {
              "EnumName": "FirstDayOfWeek",
              "Description": "The first day of a week."
            },
            "groups": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "group",
              "Description": "The resource kinds by which appointments are grouped."
            },
            "resourceCellTemplate": {
              "IsTemplate": true,
              "Description": "The template to be used for rendering resource headers."
            },
            "startDayHour": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "The start hour of the view time scale."
            },
            "timeCellTemplate": {
              "IsTemplate": true,
              "Description": "The template to be used for rendering time scale items."
            },
            "type": {
              "EnumName": "SchedulerViewType",
              "Description": "The name of the view."
            }
          }
        }
      }
    },
    "dxScrollView": {
      "Description": "The ScrollView is a widget that enables a user to scroll its content.",
      "IsTranscludedContent": true,
      "Module": "ui/scroll_view",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "bounceEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether to enable or disable the bounce-back effect."
        },
        "direction": {
          "EnumName": "ScrollDirection",
          "Description": "A string value specifying the available scrolling directions."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget can respond to user interaction."
        },
        "onScroll": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the scroll event."
        },
        "onUpdated": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the update event."
        },
        "scrollByContent": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not an end-user can scroll the widget content swiping it up or down."
        },
        "scrollByThumb": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not an end-user can scroll the widget content using the scrollbar."
        },
        "showScrollbar": {
          "EnumName": "ShowScrollbarMode",
          "Description": "Specifies when the widget shows the scrollbar."
        },
        "useNative": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates whether to use native or simulated scrolling."
        },
        "onPullDown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the pullDown event."
        },
        "onReachBottom": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the reachBottom event."
        },
        "pulledDownText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel when pulling the content down lowers the refresh threshold."
        },
        "pullingDownText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel while pulling the content down to the refresh threshold."
        },
        "reachBottomText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel displayed when content is scrolled to the bottom."
        },
        "refreshingText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel displayed when the content is being refreshed."
        }
      }
    },
    "dxSelectBox": {
      "Description": "The SelectBox widget is an editor that allows an end user to select an item from a drop-down list.",
      "Module": "ui/select_box",
      "IsEditor": true,
      "Options": {
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "valueExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of a data source item field whose value is held in the value configuration option."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onFocusIn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusIn event."
        },
        "onFocusOut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusOut event."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the current value displayed by the widget."
        },
        "attr": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "onChange": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the change event."
        },
        "onCopy": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the copy event."
        },
        "onCut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cut event."
        },
        "onEnterKey": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the enterKey event."
        },
        "onInput": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the input event."
        },
        "onKeyDown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyDown event."
        },
        "onKeyPress": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyPress event."
        },
        "onKeyUp": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyUp event."
        },
        "onPaste": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the paste event."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text that is provided as a hint in the select box editor."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "spellcheck": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget checks the inner text for spelling mistakes."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "maxLength": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the maximum number of characters you can enter into the textbox."
        },
        "acceptCustomValue": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget allows a user to enter a custom value. Requires the onCustomItemCreating handler implementation."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "dropDownButtonTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "fieldEditEnabled": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "onClosed": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the closed event."
        },
        "onOpened": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the opened event."
        },
        "opened": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "displayValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Returns the value currently displayed by the widget."
        },
        "fieldTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering the widget text field."
        },
        "grouped": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether data items should be grouped."
        },
        "groupTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for group captions."
        },
        "minSearchLength": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The minimum number of characters that must be entered into the text box to begin a search."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "pagingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "IsDeprecated": true,
          "Description": "Use the DataSource paging opportunities instead."
        },
        "searchEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports searching."
        },
        "searchExpr": {
          "PrimitiveTypes": [
            "getter"
          ],
          "IsCollection": true,
          "SingularName": "searchExpr",
          "Description": "Specifies the name of a data source item field or an expression whose value is compared to the search criterion."
        },
        "searchMode": {
          "EnumName": "DropDownSearchMode",
          "Description": "Specifies the binary operation used to filter data."
        },
        "searchTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsReadonly": true,
          "Description": "Gets the currently selected item."
        },
        "showDataBeforeSearch": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget displays unfiltered values until a user types a number of characters exceeding the minSearchLength option value."
        },
        "onCustomItemCreating": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the customItemCreating event. Executed when a user adds a custom item. Requires acceptCustomValue to be set to true."
        },
        "showSelectionControls": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to display selection controls."
        }
      }
    },
    "dxSlideOut": {
      "Description": "The SlideOut widget is a classic slide-out menu paired with a view. An end user opens the menu by swiping away the view.",
      "Module": "ui/slide_out",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The index number of the currently selected item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The selected item object."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "menuTemplate": {
              "IsTemplate": true,
              "Description": "Specifies a template that should be used to render a menu item."
            }
          }
        },
        "contentTemplate": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering widget content."
        },
        "menuGrouped": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to display a grouped menu."
        },
        "menuGroupTemplate": {
          "IsTemplate": true,
          "Description": "The name of the template used to display a group header."
        },
        "menuItemTemplate": {
          "IsTemplate": true,
          "Description": "The template used to render menu items."
        },
        "menuPosition": {
          "EnumName": "SlideOutMenuPosition",
          "Description": "Specifies the current menu position."
        },
        "menuVisible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the slide-out menu is displayed."
        },
        "onMenuGroupRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the menuGroupRendered event."
        },
        "onMenuItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the menuItemRendered event."
        },
        "swipeEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates whether the menu can be shown/hidden by swiping the widget's main panel."
        }
      }
    },
    "dxSlideOutView": {
      "Description": "The SlideOutView widget is a classic slide-out menu paired with a view.",
      "Module": "ui/slide_out_view",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "contentTemplate": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering widget content."
        },
        "menuPosition": {
          "EnumName": "SlideOutMenuPosition",
          "Description": "Specifies the current menu position."
        },
        "menuTemplate": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering menu panel content."
        },
        "menuVisible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the menu panel is visible."
        },
        "swipeEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the menu is shown when a user swipes the widget content."
        }
      }
    },
    "dxSlider": {
      "Description": "The Slider is a widget that allows an end user to set a numeric value on a continuous range of possible values.",
      "Module": "ui/slider",
      "IsEditor": true,
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The current slider value."
        },
        "max": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The maximum value the widget can accept."
        },
        "min": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The minimum value the widget can accept."
        },
        "keyStep": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the size of a step by which a slider handle is moved when a user uses the Page up or Page down keyboard shortcuts."
        },
        "label": {
          "Description": "Specifies options for labels displayed at the min and max values.",
          "Options": {
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for labels."
            },
            "position": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies whether labels are located over or under the scale."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not slider labels are visible."
            }
          }
        },
        "showRange": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to highlight a range selected within the widget."
        },
        "step": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The slider step size."
        },
        "tooltip": {
          "Description": "Specifies options for the slider tooltip.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not the tooltip is enabled."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies format for the tooltip."
            },
            "position": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies whether the tooltip is located over or under the slider."
            },
            "showMode": {
              "EnumName": "SliderTooltipShowMode",
              "Description": "Specifies whether the widget always shows a tooltip or only when a pointer is over the slider."
            }
          }
        }
      }
    },
    "dxSparkline": {
      "Description": "The Sparkline widget is a compact chart that contains only one series. Owing to their size, sparklines occupy very little space and can be easily collected in a table or embedded straight in text.",
      "Module": "viz/sparkline",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports right-to-left representation."
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDrawn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the drawn event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "onIncidentOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the incidentOccurred event."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "size": {
          "Description": "Specifies the size of the widget in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "EnumName": "VizTheme",
          "Description": "Sets the name of the theme to be used in the widget."
        },
        "tooltip": {
          "Description": "Configures the tooltip.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Specifies the appearance of the tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether the tooltip's border is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "jquery"
              ],
              "Description": "Specifies the container to draw tooltips inside of it."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies the font of the text displayed by a tooltip."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies the format of the value displayed by a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of tooltips."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space on the left and the right of the text displayed by a tooltip."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space above and below the text displayed by a tooltip."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | format | precision option instead."
            },
            "shadow": {
              "Description": "Specifies the appearance of the tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the blur distance of the tooltip's shadow."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the horizontal offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the vertical offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the z-index of tooltips."
            },
            "customizeTooltip": {
              "IsFunc": true,
              "Description": "Overridden by descriptions for particular widgets."
            },
            "horizontalAlignment": {
              "IsDeprecated": true,
              "EnumName": "HorizontalAlignment",
              "Description": "Tooltip alignment is no longer useful because the tooltips are aligned automatically."
            },
            "verticalAlignment": {
              "IsDeprecated": true,
              "EnumName": "VerticalEdge",
              "Description": "Tooltip alignment is no longer useful because the tooltips are aligned automatically."
            }
          }
        },
        "onTooltipHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipHidden event."
        },
        "onTooltipShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipShown event."
        },
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides arguments for a sparkline."
        },
        "barNegativeColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the bars indicating negative values. Available for a sparkline of the bar type only."
        },
        "barPositiveColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the bars indicating positive values. Available for a sparkline of the bar type only."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "Specifies a data source for the sparkline."
        },
        "firstLastColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the boundary of both the first and last points on a sparkline."
        },
        "ignoreEmptyPoints": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a sparkline ignores null data points or not."
        },
        "lineColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for a line on a sparkline. Available for the sparklines of the line- and area-like types."
        },
        "lineWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a width for a line on a sparkline. Available for the sparklines of the line- and area-like types."
        },
        "lossColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the bars indicating the values that are less than the winloss threshold. Available for a sparkline of the winloss type only."
        },
        "maxColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the boundary of the maximum point on a sparkline."
        },
        "maxValue": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the maximum value of the sparkline's value axis."
        },
        "minColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the boundary of the minimum point on a sparkline."
        },
        "minValue": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the minimum value of the sparkline value axis."
        },
        "pointColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for points on a sparkline. Available for the sparklines of the line- and area-like types."
        },
        "pointSize": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the diameter of sparkline points in pixels. Available for the sparklines of line- and area-like types."
        },
        "pointSymbol": {
          "EnumName": "VizPointSymbol",
          "Description": "Specifies a symbol to use as a point marker on a sparkline. Available for the sparklines of the line- and area-like types."
        },
        "showFirstLast": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to indicate both the first and last values on a sparkline."
        },
        "showMinMax": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to indicate both the minimum and maximum values on a sparkline."
        },
        "type": {
          "EnumName": "SparklineType",
          "Description": "Determines the type of a sparkline."
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides values for a sparkline."
        },
        "winColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the bars indicating the values greater than a winloss threshold. Available for a sparkline of the winloss type only."
        },
        "winlossThreshold": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a value that serves as a threshold for the sparkline of the winloss type."
        }
      }
    },
    "dxSwitch": {
      "Description": "The Switch is a widget that can be in two states: \"On\" and \"Off\".",
      "Module": "ui/switch",
      "IsEditor": true,
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether the current switch state is \"On\" or \"Off\"."
        },
        "offText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Text displayed when the widget is in a disabled state."
        },
        "onText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Text displayed when the widget is in an enabled state."
        }
      }
    },
    "dxTabPanel": {
      "Description": "The TabPanel is a widget consisting of the Tabs and MultiView widgets. It automatically synchronizes the selected tab with the currently displayed view and vice versa.",
      "Module": "ui/tab_panel",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The index of the currently displayed item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The selected item object."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "badge": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a badge text for the tab."
            },
            "icon": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the icon displayed by the widget item title."
            },
            "iconSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the icon field instead."
            },
            "tabTemplate": {
              "IsTemplate": true,
              "Description": "Specifies a template that should be used to render the tab for this item only."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the item title text displayed on a corresponding tab."
            }
          }
        },
        "animationEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to animate the displayed item change."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "loop": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to scroll back to the first item after the last item is swiped."
        },
        "swipeEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to allow users to change the selected index by swiping."
        },
        "itemTitleTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering an item title."
        },
        "onTitleClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the titleClick event."
        },
        "onTitleHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the titleHold event."
        },
        "onTitleRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the titleRendered event."
        },
        "scrollByContent": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying if tabs in the title are scrolled by content."
        },
        "scrollingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean indicating whether or not to add scrolling support for tabs in the title."
        },
        "showNavButtons": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value that specifies the availability of navigation buttons."
        }
      }
    },
    "dxTabs": {
      "Description": "The Tabs is a tab strip used to switch between pages or views. This widget is included in the TabPanel widget, but you can use the Tabs separately as well.",
      "Module": "ui/tabs",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data field provides keys for widget items."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The index of the currently selected widget item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The selected item object."
        },
        "selectedItemKeys": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "selectedItemKey",
          "Description": "Specifies an array of currently selected item keys."
        },
        "selectedItems": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "selectedItem",
          "Description": "An array of currently selected item objects."
        },
        "selectionMode": {
          "EnumName": "NavSelectionMode",
          "Description": "Specifies whether the widget enables an end-user to select only a single item or multiple items."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "badge": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a badge text for the tab."
            },
            "icon": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the icon displayed by the widget item."
            },
            "iconSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the icon field instead."
            }
          }
        },
        "scrollByContent": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not an end-user can scroll tabs by swiping."
        },
        "scrollingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not an end-user can scroll tabs."
        },
        "showNavButtons": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value that specifies the availability of navigation buttons."
        }
      }
    },
    "dxTagBox": {
      "Description": "The TagBox widget is an editor that allows an end user to select multiple items from a drop-down list.",
      "Module": "ui/tag_box",
      "IsEditor": true,
      "Options": {
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "valueExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of a data source item field whose value is held in the value configuration option."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onFocusIn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusIn event."
        },
        "onFocusOut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusOut event."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "value",
          "Description": "Specifies the selected items."
        },
        "attr": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "onChange": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the change event."
        },
        "onEnterKey": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the enterKey event."
        },
        "onInput": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the input event."
        },
        "onKeyDown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyDown event."
        },
        "onKeyPress": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyPress event."
        },
        "onKeyUp": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyUp event."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text that is provided as a hint in the select box editor."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "acceptCustomValue": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget allows a user to enter a custom value. Requires the onCustomItemCreating handler implementation."
        },
        "applyValueMode": {
          "EnumName": "EditorApplyValueMode",
          "Description": "Specifies how the widget applies values."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "dropDownButtonTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "fieldEditEnabled": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "onClosed": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the closed event."
        },
        "onOpened": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the opened event."
        },
        "opened": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "fieldTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering the widget text field."
        },
        "grouped": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether data items should be grouped."
        },
        "groupTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for group captions."
        },
        "minSearchLength": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The minimum number of characters that must be entered into the text box to begin a search."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "pagingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "IsDeprecated": true,
          "Description": "Use the DataSource paging opportunities instead."
        },
        "searchEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports searching."
        },
        "searchExpr": {
          "PrimitiveTypes": [
            "getter"
          ],
          "IsCollection": true,
          "SingularName": "searchExpr",
          "Description": "Specifies the name of a data source item field or an expression whose value is compared to the search criterion."
        },
        "searchMode": {
          "EnumName": "DropDownSearchMode",
          "Description": "Specifies the binary operation used to filter data."
        },
        "searchTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed."
        },
        "showDataBeforeSearch": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget displays unfiltered values until a user types a number of characters exceeding the minSearchLength option value."
        },
        "onCustomItemCreating": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the customItemCreating event. Executed when a user adds a custom item. Requires acceptCustomValue to be set to true."
        },
        "showSelectionControls": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to display selection controls."
        },
        "hideSelectedItems": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to hide selected items."
        },
        "multiline": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is multiline."
        },
        "onSelectAllValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectAllValueChanged event."
        },
        "selectAllMode": {
          "EnumName": "SelectAllMode",
          "Description": "Specifies the mode in which all items are selected."
        },
        "selectedItems": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsReadonly": true,
          "SingularName": "selectedItem",
          "Description": "Gets the currently selected items."
        },
        "tagTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering tags."
        },
        "values": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        }
      }
    },
    "dxTextArea": {
      "Description": "The TextArea is a widget that enables a user to enter and edit a multi-line text.",
      "Module": "ui/text_area",
      "IsEditor": true,
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onFocusIn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusIn event."
        },
        "onFocusOut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusOut event."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the current value displayed by the widget."
        },
        "attr": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "onChange": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the change event."
        },
        "onCopy": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the copy event."
        },
        "onCut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cut event."
        },
        "onEnterKey": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the enterKey event."
        },
        "onInput": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the input event."
        },
        "onKeyDown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyDown event."
        },
        "onKeyPress": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyPress event."
        },
        "onKeyUp": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyUp event."
        },
        "onPaste": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the paste event."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is empty."
        },
        "spellcheck": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget checks the inner text for spelling mistakes."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "maxLength": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the maximum number of characters you can enter into the textbox."
        },
        "autoResizeEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the auto resizing mode is enabled."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the maximum height of the widget."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the minimum height of the widget."
        }
      }
    },
    "dxTextBox": {
      "Description": "The TextBox is a widget that enables a user to enter and edit a single line of text.",
      "Module": "ui/text_box",
      "IsEditor": true,
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onFocusIn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusIn event."
        },
        "onFocusOut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the focusOut event."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "isValid": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onValueChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the valueChanged event."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Holds the object that defines the error that occurred during validation."
        },
        "validationMessageMode": {
          "EnumName": "ValidationMessageMode",
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the current value displayed by the widget."
        },
        "attr": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsDeprecated": true
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "mask": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The editor mask that specifies the format of the entered string."
        },
        "maskChar": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a mask placeholder character."
        },
        "maskInvalidMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A message displayed when the entered text does not match the specified pattern."
        },
        "maskRules": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies custom mask rules."
        },
        "onChange": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the change event."
        },
        "onCopy": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the copy event."
        },
        "onCut": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cut event."
        },
        "onEnterKey": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the enterKey event."
        },
        "onInput": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the input event."
        },
        "onKeyDown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyDown event."
        },
        "onKeyPress": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyPress event."
        },
        "onKeyUp": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyUp event."
        },
        "onPaste": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the paste event."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is empty."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "spellcheck": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget checks the inner text for spelling mistakes."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "useMaskedValue": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the value should contain mask characters or not."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "maxLength": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the maximum number of characters you can enter into the textbox."
        },
        "mode": {
          "EnumName": "TextBoxMode",
          "Description": "The \"mode\" attribute value of the actual HTML input element representing the text box."
        }
      }
    },
    "dxTileView": {
      "Description": "The TileView widget contains a collection of tiles. Tiles can store much more information than ordinary buttons, that is why they are very popular in apps designed for touch devices.",
      "Module": "ui/tile_view",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "heightRatio": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a multiplier for the baseItemHeight option value (for the purpose of obtaining the actual item height)."
            },
            "widthRatio": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a multiplier for the baseItemWidth option value (for the purpose of obtaining the actual item width)."
            }
          }
        },
        "baseItemHeight": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the height of the base tile view item."
        },
        "baseItemWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the width of the base tile view item."
        },
        "direction": {
          "EnumName": "Orientation",
          "Description": "Specifies whether tiles are placed horizontally or vertically."
        },
        "itemMargin": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the distance in pixels between adjacent tiles."
        },
        "showScrollbar": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not to display a scrollbar."
        }
      }
    },
    "dxToast": {
      "Description": "The Toast is a widget that provides pop-up notifications.",
      "Module": "ui/toast",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "The height of the widget in pixels."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "The widget width in pixels."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is visible."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "closeOnBackButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user presses the Back hardware button."
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user clicks outside of the overlapping window."
        },
        "contentTemplate": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering widget content."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the maximum height the widget can reach while resizing."
        },
        "maxWidth": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the maximum width the widget can reach while resizing."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the minimum height the widget can reach while resizing."
        },
        "minWidth": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the minimum width the widget can reach while resizing."
        },
        "onHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hidden event."
        },
        "onHiding": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hiding event."
        },
        "onShowing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the showing event."
        },
        "onShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the shown event."
        },
        "shading": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the main screen is inactive while the widget is active."
        },
        "shadingColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shading color."
        },
        "closeOnClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the toast is closed if a user clicks it."
        },
        "closeOnSwipe": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the toast is closed if a user swipes it out of the screen boundaries."
        },
        "displayTime": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time span in milliseconds during which the Toast widget is visible."
        },
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The Toast message text."
        },
        "position": {
          "PrimitiveTypes": [
            "string"
          ],
          "ComplexTypes": [
            "PositionConfig"
          ],
          "Description": "An object defining widget positioning options."
        },
        "type": {
          "EnumName": "ToastType",
          "Description": "Specifies the Toast widget type."
        }
      }
    },
    "dxToolbar": {
      "Description": "The Toolbar is a widget containing items that usually manage screen content. Those items can be plain text or widgets.",
      "Module": "ui/toolbar",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "locateInMenu": {
              "EnumName": "ToolbarItemLocateInMenuMode",
              "Description": "Specifies when to display an item in the toolbar's overflow menu."
            },
            "location": {
              "EnumName": "ToolbarItemLocation",
              "Description": "Specifies a location for the item on the toolbar."
            },
            "menuItemTemplate": {
              "IsTemplate": true,
              "Description": "Specifies a template that should be used to render a menu item."
            },
            "options": {
              "PrimitiveTypes": [
                "any"
              ],
              "Description": "Specifies a configuration object for the widget that presents a toolbar item."
            },
            "showText": {
              "EnumName": "ToolbarItemShowTextMode",
              "Description": "Specifies when to display the text for the widget item."
            },
            "widget": {
              "EnumName": "ToolbarItemWidget",
              "Description": "A widget that presents a toolbar item."
            }
          }
        },
        "menuItemTemplate": {
          "IsTemplate": true,
          "Description": "The template used to render menu items."
        },
        "renderAs": {
          "EnumName": "ToolbarRenderMode",
          "Description": "Informs the widget about its location in a view HTML markup."
        }
      }
    },
    "dxTooltip": {
      "Description": "The Tooltip widget displays a tooltip for a specified element on the page.",
      "Module": "ui/tooltip",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is visible."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "closeOnBackButton": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user presses the Back hardware button."
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user clicks outside of the popover window and outside the target element."
        },
        "contentTemplate": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering widget content."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether widget content is rendered when the widget is shown or when rendering the widget."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the maximum height the widget can reach while resizing."
        },
        "maxWidth": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the maximum width the widget can reach while resizing."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the minimum height the widget can reach while resizing."
        },
        "minWidth": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the minimum width the widget can reach while resizing."
        },
        "onHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hidden event."
        },
        "onHiding": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hiding event."
        },
        "onShowing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the showing event."
        },
        "onShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the shown event."
        },
        "shading": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "A Boolean value specifying whether or not the main screen is inactive while the widget is active."
        },
        "shadingColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shading color."
        },
        "buttons": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsDeprecated": true,
          "SingularName": "button",
          "Description": "Use the toolbarItems option instead."
        },
        "hideEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options of popover hiding.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "The time span after which the popover is hidden."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the event names on which the widget is hidden."
            }
          }
        },
        "position": {
          "ComplexTypes": [
            "PositionConfig"
          ],
          "EnumName": "Position",
          "Description": "An object defining widget positioning options."
        },
        "showEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options for displaying the widget.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "The time span after which the widget is shown."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the event names on which the widget is shown."
            }
          }
        },
        "target": {
          "PrimitiveTypes": [
            "jquery"
          ],
          "Description": "The target element associated with a popover."
        }
      }
    },
    "dxTreeList": {
      "Description": "The TreeList is a widget that represents data from a local or remote source in the form of a multi-column tree view. This widget offers such features as sorting, filtering, editing, selection, etc.",
      "Module": "ui/tree_list",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "allowColumnReordering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can reorder columns."
        },
        "allowColumnResizing": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can resize columns."
        },
        "cacheEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether data should be cached."
        },
        "cellHintEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content."
        },
        "columnAutoWidth": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether columns should adjust their widths to the content."
        },
        "columnChooser": {
          "Description": "Configures the column chooser.",
          "Options": {
            "emptyPanelText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed by the column chooser when it is empty."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can open the column chooser."
            },
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the column chooser."
            },
            "mode": {
              "EnumName": "GridColumnChooserMode",
              "Description": "Specifies how a user manages columns using the column chooser."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title of the column chooser."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the column chooser."
            }
          }
        },
        "columnFixing": {
          "Description": "Configures column fixing.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables column fixing."
            },
            "texts": {
              "Description": "Contains options that specify texts for column fixing commands in the context menu of a column header.",
              "Options": {
                "fix": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu item that fixes a column."
                },
                "leftPosition": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu subitem that fixes a column to the left edge of the widget."
                },
                "rightPosition": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu subitem that fixes a column to the right edge of the widget."
                },
                "unfix": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu item that unfixes a column."
                }
              }
            }
          }
        },
        "columnHidingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is \"widget\"."
        },
        "columnMinWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the minimum width of columns."
        },
        "columnResizingMode": {
          "EnumName": "ColumnResizingMode",
          "Description": "Specifies how the widget resizes columns. Applies only if allowColumnResizing is true."
        },
        "columns": {
          "ComplexTypes": [
            "TreeListColumn"
          ],
          "IsCollection": true,
          "SingularName": "column",
          "Description": "Configures columns."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "Specifies the origin of data for the widget."
        },
        "dateSerializationFormat": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the serialization format for date-time values."
        },
        "editing": {
          "Description": "Configures editing.",
          "Options": {
            "allowAdding": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can add new rows."
            },
            "allowDeleting": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can delete rows."
            },
            "allowUpdating": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can update rows."
            },
            "form": {
              "ComplexTypes": [
                "dxFormOptions"
              ],
              "Description": "Configures the form. Used only if editing | mode is \"form\" or \"popup\"."
            },
            "mode": {
              "EnumName": "GridEditMode",
              "Description": "Specifies how a user edits data."
            },
            "popup": {
              "ComplexTypes": [
                "dxPopupOptions"
              ],
              "Description": "Configures the popup. Used only if editing | mode is \"popup\"."
            },
            "texts": {
              "Description": "Contains options that specify texts for editing-related UI elements.",
              "Options": {
                "addRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint that appears when a user pauses on the global \"Add\" button. Applies only if editing | allowAdding is true."
                },
                "cancelAllChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint that appears when a user pauses on the \"Discard\" button. Applies only if editing | mode is \"batch\"."
                },
                "cancelRowChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a button that cancels changes in a row. Applies only if editing | allowUpdating is true and editing | mode is \"row\"."
                },
                "confirmDeleteMessage": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a message that prompts a user to confirm deletion."
                },
                "confirmDeleteTitle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a title for the window that asks a user to confirm deletion."
                },
                "deleteRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for buttons that delete rows. Applies only if allowDeleting is true."
                },
                "editRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for buttons that switch rows into the editing state. Applies only if allowUpdating is true."
                },
                "saveAllChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint that appears when a user pauses on the global \"Save\" button. Applies only if editing | mode is \"batch\"."
                },
                "saveRowChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a button that saves changes made in a row. Applies only if allowUpdating is true."
                },
                "undeleteRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for buttons that recover deleted rows. Applies only if allowDeleting is true and editing | mode is \"batch\"."
                },
                "validationCancelChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint appearing when a user pauses on the button that cancels changes in a cell. Applies only if editing | mode is \"cell\" and data validation is enabled."
                },
                "addRowToNode": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the button that adds a new nested row. Applies if the editing | mode is \"batch\" or \"cell\"."
                }
              }
            }
          }
        },
        "errorRowEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates whether to show the error row."
        },
        "filterRow": {
          "Description": "Configures the filter row.",
          "Options": {
            "applyFilter": {
              "EnumName": "GridApplyFilterMode",
              "Description": "Specifies when to apply a filter."
            },
            "applyFilterText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for a hint that appears when a user pauses on a button that applies the filter."
            },
            "betweenEndText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a placeholder for the editor that specifies the end of a range when a user selects the \"between\" filter operation."
            },
            "betweenStartText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a placeholder for the editor that specifies the start of a range when a user selects the \"between\" filter operation."
            },
            "operationDescriptions": {
              "Description": "Specifies descriptions for filter operations on the filter list.",
              "Options": {
                "between": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"between\" operation."
                },
                "contains": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"contains\" operation."
                },
                "endsWith": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"endswith\" operation."
                },
                "equal": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"=\" operation."
                },
                "greaterThan": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \">\" operation."
                },
                "greaterThanOrEqual": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \">=\" operation."
                },
                "lessThan": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"<\" operation."
                },
                "lessThanOrEqual": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"<=\" operation."
                },
                "notContains": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"notcontains\" operation."
                },
                "notEqual": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"<>\" operation."
                },
                "startsWith": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"startswith\" operation."
                }
              }
            },
            "resetOperationText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the reset operation on the filter list."
            },
            "showAllText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the item that clears the applied filter. Used only when a cell of the filter row contains a select box."
            },
            "showOperationChooser": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether icons that open the filter lists are visible."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether the filter row is visible."
            }
          }
        },
        "headerFilter": {
          "Description": "Configures the header filter feature.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the popup menu that contains values for filtering."
            },
            "texts": {
              "Description": "Contains options that specify text for various elements of the popup menu.",
              "Options": {
                "cancel": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the button that closes the popup menu without applying a filter."
                },
                "emptyValue": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a name for the item that represents empty values in the popup menu."
                },
                "ok": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the button that applies the specified filter."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether header filter icons are visible."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the popup menu that contains values for filtering."
            }
          }
        },
        "loadPanel": {
          "Description": "Configures the load panel.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "bool",
                "string"
              ],
              "Description": "Specifies whether to show the load panel or not."
            },
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the load panel in pixels."
            },
            "indicatorSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a URL pointing to an image to be used as a loading indicator."
            },
            "showIndicator": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the loading indicator."
            },
            "showPane": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the pane of the load panel."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed on the load panel."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the load panel in pixels."
            }
          }
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text shown when the widget does not display any data."
        },
        "onAdaptiveDetailRowPreparing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the adaptiveDetailRowPreparing event. Executed before an adaptive detail row is rendered."
        },
        "onDataErrorOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the dataErrorOccurred event. Executed when an error occurs in the data source."
        },
        "onInitNewRow": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initNewRow event. Executed before a new row is added to the widget."
        },
        "onKeyDown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the keyDown event. Executed when the widget is in focus and a key has been pressed down."
        },
        "onRowCollapsed": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowCollapsed event. Executed after a row is collapsed."
        },
        "onRowCollapsing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowCollapsing event. Executed before a row is collapsed."
        },
        "onRowExpanded": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowExpanded event. Executed after a row is expanded."
        },
        "onRowExpanding": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowExpanding event. Executed before a row is expanded."
        },
        "onRowInserted": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowInserted event. Executed after a new row has been inserted into the data source."
        },
        "onRowInserting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowInserting event. Executed before a new row is inserted into the data source."
        },
        "onRowRemoved": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowRemoved event. Executed after a row has been removed from the data source."
        },
        "onRowRemoving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowRemoving event. Executed before a row is removed from the data source."
        },
        "onRowUpdated": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowUpdated event. Executed after a row has been updated in the data source."
        },
        "onRowUpdating": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowUpdating event. Executed before a row is updated in the data source."
        },
        "onRowValidating": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowValidating event. Executed after cells in a row are validated against validation rules."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event. Executed after selecting a row or clearing its selection."
        },
        "onToolbarPreparing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the toolbarPreparing event. Executed before the toolbar is created."
        },
        "rowAlternationEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether rows should be shaded differently."
        },
        "scrolling": {
          "Description": "Configures scrolling.",
          "Options": {
            "preloadEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether the widget should load pages adjacent to the current page. Applies only if scrolling | mode is \"virtual\"."
            },
            "scrollByContent": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can scroll the content with a swipe gesture. Applies only if native scrolling is disabled."
            },
            "scrollByThumb": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can scroll the content with the scrollbar. Applies only if native scrolling is disabled."
            },
            "showScrollbar": {
              "EnumName": "ShowScrollbarMode",
              "Description": "Specifies when to show the scrollbar."
            },
            "useNative": {
              "PrimitiveTypes": [
                "bool",
                "string"
              ],
              "Description": "Specifies whether the widget should use native or simulated scrolling."
            },
            "mode": {
              "EnumName": "TreeListScrollingMode",
              "Description": "Specifies the scrolling mode."
            }
          }
        },
        "searchPanel": {
          "Description": "Configures the search panel.",
          "Options": {
            "highlightCaseSensitive": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Notifies the widget whether search is case-sensitive to ensure proper highlightning of search results. Applies only if highlightSearchText is true."
            },
            "highlightSearchText": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether found substrings should be highlighted."
            },
            "placeholder": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a placeholder for the search panel."
            },
            "searchVisibleColumnsOnly": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether the widget should search against all columns or only visible ones."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a search string for the search panel."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether the search panel is visible or not."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the search panel in pixels."
            }
          }
        },
        "selectedRowKeys": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "selectedRowKey",
          "Description": "Specifies the keys of rows that must be selected initially. Applies only if selection | deferred is false."
        },
        "selection": {
          "Description": "Configures runtime selection.",
          "Options": {
            "allowSelectAll": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can select all rows at once."
            },
            "mode": {
              "EnumName": "SelectionMode",
              "Description": "Specifies the selection mode."
            }
          }
        },
        "showBorders": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the outer borders of the widget are visible."
        },
        "showColumnHeaders": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether column headers are visible."
        },
        "showColumnLines": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether vertical lines that separate one column from another are visible."
        },
        "showRowLines": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether horizontal lines that separate one row from another are visible."
        },
        "sorting": {
          "Description": "Configures runtime sorting.",
          "Options": {
            "ascendingText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the context menu item that sets an ascending sort order in a column."
            },
            "clearText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the context menu item that clears sorting settings for a column."
            },
            "descendingText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the context menu item that sets a descending sort order in a column."
            },
            "mode": {
              "EnumName": "GridSortingMode",
              "Description": "Specifies the sorting mode."
            }
          }
        },
        "twoWayBindingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to enable two-way data binding."
        },
        "wordWrapEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether text that does not fit into a column should be wrapped."
        },
        "autoExpandAll": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether all rows are expanded initially."
        },
        "customizeColumns": {
          "IsFunc": true,
          "Description": "Customizes columns after they are created."
        },
        "dataStructure": {
          "EnumName": "TreeListDataStructure",
          "Description": "Notifies the widget of your data structure."
        },
        "expandedRowKeys": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "expandedRowKey",
          "Description": "Specifies keys of the initially expanded rows."
        },
        "expandNodesOnFiltering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether nodes appear expanded or collapsed after filtering is applied."
        },
        "hasItemsExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data field defines whether the node has children."
        },
        "itemsExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data field contains nested items. Set this option when your data has a hierarchical structure."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data field provides keys for nodes."
        },
        "onCellClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cellClick event. Executed after a user clicks a cell."
        },
        "onCellHoverChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cellHoverChanged event. Executed after the pointer enters or leaves a cell."
        },
        "onCellPrepared": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the cellPrepared event. Executed after the widget creates a cell."
        },
        "onContextMenuPreparing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contextMenuPreparing event. Executed before a context menu is rendered."
        },
        "onEditingStart": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for editingStart. Executed before a cell or row switches to the editing state."
        },
        "onEditorPrepared": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the editorPrepared event. Executed after an editor is created."
        },
        "onEditorPreparing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the editorPreparing event. Executed before an editor is created."
        },
        "onNodesInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the nodesInitialized event. Executed after all nodes in the widget are initialized."
        },
        "onRowClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowClick event. Executed when a user clicks a row."
        },
        "onRowPrepared": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the rowPrepared event. Executed after the widget creates a row."
        },
        "parentIdExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data field provides parent keys."
        },
        "remoteOperations": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies what operations are performed on the server.",
          "Options": {
            "filtering": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether filtering should be performed on the server."
            },
            "grouping": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether grouping should be performed on the server."
            },
            "sorting": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether sorting should be performed on the server."
            }
          }
        },
        "rootValue": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the root node's identifier. Applies if dataStructure is 'plain'."
        }
      }
    },
    "dxTreeMap": {
      "Description": "The TreeMap is a widget that displays hierarchical data by using nested rectangles.",
      "Module": "viz/tree_map",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports right-to-left representation."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "IsCollection": true,
              "EnumName": "ExportFormat",
              "SingularName": "format",
              "Description": "Specifies a set of formats available for exporting into."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export | enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in IE9 and Safari browsers."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "onDrawn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the drawn event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "onIncidentOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the incidentOccurred event."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "size": {
          "Description": "Specifies the size of the widget in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "EnumName": "VizTheme",
          "Description": "Sets the name of the theme to be used in the widget."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget title.",
          "Options": {
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the widget subtitle.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title text."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Specifies the appearance of the tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether the tooltip's border is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "jquery"
              ],
              "Description": "Specifies the container to draw tooltips inside of it."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies the font of the text displayed by a tooltip."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies the format of the value displayed by a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of tooltips."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space on the left and the right of the text displayed by a tooltip."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space above and below the text displayed by a tooltip."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the tooltip | format | precision option instead."
            },
            "shadow": {
              "Description": "Specifies the appearance of the tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the blur distance of the tooltip's shadow."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the horizontal offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the vertical offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the z-index of tooltips."
            },
            "customizeTooltip": {
              "IsFunc": true,
              "Description": "Allows you to change tooltip appearance."
            }
          }
        },
        "childrenField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides nested items for a group. Applies to hierarchical data sources only."
        },
        "colorField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides colors for tiles."
        },
        "colorizer": {
          "Description": "Manages the color settings.",
          "Options": {
            "colorCodeField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the data source field whose values define the color of a tile. Applies only if the type option is \"gradient\" or \"range\"."
            },
            "colorizeGroups": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not all tiles in a group must be colored uniformly. Applies only if the type option is \"discrete\"."
            },
            "palette": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "EnumName": "VizPalette",
              "SingularName": "palette",
              "Description": "Sets the palette to be used for colorizing tiles."
            },
            "range": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsCollection": true,
              "SingularName": "range",
              "Description": "Allows you to paint tiles with similar values uniformly. Applies only if the type option is \"gradient\" or \"range\"."
            },
            "type": {
              "EnumName": "TreeMapColorizerType",
              "Description": "Specifies the colorizing algorithm."
            }
          }
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "Specifies the origin of data for the widget."
        },
        "group": {
          "Description": "Configures groups.",
          "Options": {
            "border": {
              "Description": "Configures the group borders.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the group borders."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the group borders in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the group headers."
            },
            "headerHeight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the group headers in pixels."
            },
            "hoverEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether groups change their style when a user pauses on them."
            },
            "hoverStyle": {
              "Description": "Specifies the appearance of groups in the hover state.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance of the group borders in the hover state.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Colors the group borders in the hover state."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the group borders in pixels. Applies to a group in the hover state."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the group headers in the hover state."
                }
              }
            },
            "label": {
              "Description": "Configures the group labels.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies the font settings of the group labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Changes the visibility of the group labels."
                }
              }
            },
            "selectionStyle": {
              "Description": "Specifies the appearance of groups in the selected state.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance of the group borders in the selected state.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Colors the group borders in the selected state."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the group borders in pixels. Applies to a group in the selected state."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the group headers in the selected state."
                }
              }
            }
          }
        },
        "hoverEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether tiles and groups change their style when a user pauses on them."
        },
        "idField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides IDs for items. Applies to plain data sources only."
        },
        "interactWithGroup": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the user will interact with a single tile or its group."
        },
        "labelField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides texts for tile and group labels."
        },
        "layoutAlgorithm": {
          "EnumName": "TreeMapLayoutAlgorithm",
          "Description": "Specifies the layout algorithm."
        },
        "layoutDirection": {
          "EnumName": "TreeMapLayoutDirection",
          "Description": "Specifies the direction in which the items will be laid out."
        },
        "maxDepth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies how many hierarchical levels must be visualized."
        },
        "onClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the click event."
        },
        "onDrill": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the drill event."
        },
        "onHoverChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the hoverChanged event."
        },
        "onNodesInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the nodesInitialized event."
        },
        "onNodesRendering": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the nodesRendering event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "parentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides parent IDs for items. Applies to plain data sources only."
        },
        "resolveLabelOverflow": {
          "EnumName": "TreeMapResolveLabelOverflow",
          "Description": "Decides whether those labels that overflow their tile/group should be hidden or truncated with ellipsis."
        },
        "selectionMode": {
          "EnumName": "SelectionMode",
          "Description": "Specifies whether a single or multiple nodes can be in the selected state simultaneously."
        },
        "tile": {
          "Description": "Configures tiles.",
          "Options": {
            "border": {
              "Description": "Configures the tile borders.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the tile borders."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the tile borders in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a single color for all tiles."
            },
            "hoverStyle": {
              "Description": "Specifies the appearance of tiles in the hover state.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance of the tile borders in the hover state.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Colors the tile borders in the hover state."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the tile borders in pixels. Applies to a tile in the hover state."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors tiles in the hover state."
                }
              }
            },
            "label": {
              "Description": "Configures the tile labels.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies the font settings of the tile labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Changes the visibility of the tile labels."
                }
              }
            },
            "selectionStyle": {
              "Description": "Specifies the appearance of tiles in the selected state.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance of the tile borders in the selected state.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Colors the tile borders in the selected state."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the tile borders in pixels. Applies to a tile in the selected state."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors tiles in the selected state."
                }
              }
            }
          }
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides values for tiles."
        }
      }
    },
    "dxTreeView": {
      "Description": "The TreeView widget is a tree-like representation of textual data.",
      "Module": "ui/tree_view",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "dataSource": {
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data field provides keys for TreeView items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "onItemContextMenu": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemContextMenu event."
        },
        "onItemHold": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemHold event."
        },
        "onItemRendered": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemRendered event."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "selectionMode": {
          "EnumName": "NavSelectionMode",
          "Description": "Specifies item selection mode."
        },
        "items": {
          "ComplexTypes": [
            "TreeViewItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget."
        },
        "disabledExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget item is disabled."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "itemsExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that contains an array of nested items."
        },
        "selectedExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget items is selected."
        },
        "animationEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to animate item collapsing and expanding."
        },
        "createChildren": {
          "IsFunc": true,
          "Description": "Allows you to load nodes manually."
        },
        "dataStructure": {
          "EnumName": "TreeViewDataStructure",
          "Description": "Specifies whether a nested or plain array is used as a data source."
        },
        "expandAllEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not a user can expand all tree view items by the \"*\" hot key."
        },
        "expandedExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget item is displayed expanded."
        },
        "expandNodesRecursive": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not all parent nodes of an initially expanded node are displayed expanded."
        },
        "hasItemsExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding node includes child nodes."
        },
        "onItemCollapsed": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemCollapsed event."
        },
        "onItemExpanded": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemExpanded event."
        },
        "onItemSelected": {
          "IsDeprecated": true,
          "IsFunc": true,
          "IsEvent": true,
          "Description": "Use the itemSelectionChanged event instead."
        },
        "onItemSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemSelectionChanged event."
        },
        "parentIdExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field for holding the parent key of the corresponding node."
        },
        "rootValue": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the parent ID value of the root item."
        },
        "scrollDirection": {
          "EnumName": "ScrollDirection",
          "Description": "A string value specifying available scrolling directions."
        },
        "searchValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the current value used to filter tree view items."
        },
        "selectAllEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "IsDeprecated": true,
          "Description": "Use the showCheckBoxesMode options instead."
        },
        "selectAllText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed at the \"Select All\" check box."
        },
        "selectByClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not an item becomes selected if a user clicks it."
        },
        "selectNodesRecursive": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to select nodes recursively."
        },
        "showCheckBoxes": {
          "PrimitiveTypes": [
            "bool"
          ],
          "IsDeprecated": true,
          "Description": "Use the showCheckBoxesMode options instead."
        },
        "showCheckBoxesMode": {
          "EnumName": "TreeViewCheckBoxMode",
          "Description": "Specifies the current check boxes display mode."
        },
        "virtualModeEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies if the virtual mode is enabled."
        }
      }
    },
    "dxValidationGroup": {
      "Description": "The widget that is used in the Knockout and AngularJS approaches to combine the editors to be validated.",
      "IsTranscludedContent": true,
      "Module": "ui/validation_group",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        }
      }
    },
    "dxValidationSummary": {
      "Description": "A widget for displaying the result of checking validation rules for editors.",
      "Module": "ui/validation_summary",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes."
        },
        "itemTemplate": {
          "IsTemplate": true,
          "Description": "The template to be used for rendering items."
        },
        "onItemClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the itemClick event."
        },
        "items": {
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "validationGroup": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the validation group for which summary should be generated."
        }
      }
    },
    "dxValidator": {
      "Description": "A widget that is used to validate the associated DevExtreme editors against the defined validation rules.",
      "IsExtensionComponent": true,
      "Module": "ui/validator",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the height of the widget."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the width of the widget."
        },
        "adapter": {
          "Description": "An object that specifies what and when to validate, and how to apply the validation result.",
          "Options": {
            "applyValidationResults": {
              "IsFunc": true,
              "Description": "A function that the Validator widget calls after validating a specified value."
            },
            "bypass": {
              "IsFunc": true,
              "Description": "A function that returns a Boolean value specifying whether or not to bypass validation."
            },
            "focus": {
              "IsFunc": true,
              "Description": "A function that sets focus to a validated editor when the corresponding ValidationSummary item is focused."
            },
            "getValue": {
              "IsFunc": true,
              "Description": "A function that returns the value to be validated."
            },
            "reset": {
              "IsFunc": true,
              "Description": "A function that resets the validated values."
            },
            "validationRequestsCallbacks": {
              "PrimitiveTypes": [
                "any"
              ],
              "Description": "The jQuery.Callbacks() object that is fired when the specified value should be validated."
            }
          }
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the editor name to be used in the validation default messages."
        },
        "onValidated": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the validated event."
        },
        "validationGroup": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the validation group the editor will be related to."
        },
        "validationRules": {
          "ComplexTypes": [
            "CompareRule",
            "CustomRule",
            "EmailRule",
            "NumericRule",
            "PatternRule",
            "RangeRule",
            "RequiredRule",
            "StringLengthRule"
          ],
          "IsCollection": true,
          "SingularName": "validationRule",
          "Description": "An array of validation rules to be checked for the editor with which the dxValidator object is associated."
        }
      }
    },
    "dxVectorMap": {
      "Description": "The VectorMap is a widget that visualize geographical locations. This widget represents a geographical map that contains areas and markers. Areas embody continents and countries. Markers flag specific points on the map, for example, towns, cities or capitals.",
      "Module": "viz/vector_map",
      "Options": {
        "onDisposing": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only."
        },
        "onInitialized": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the initialized event. Executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the optionChanged event. Executed after an option of the widget is changed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the widget supports right-to-left representation."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "IsCollection": true,
              "EnumName": "ExportFormat",
              "SingularName": "format",
              "Description": "Specifies a set of formats available for exporting into."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export | enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in IE9 and Safari browsers."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "onDrawn": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the drawn event."
        },
        "onExported": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exported event."
        },
        "onExporting": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the exporting event."
        },
        "onFileSaving": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fileSaving event."
        },
        "onIncidentOccurred": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the incidentOccurred event."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "size": {
          "Description": "Specifies the size of the widget in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "EnumName": "VizTheme",
          "Description": "Sets the name of the theme to be used in the widget."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget title.",
          "Options": {
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the widget subtitle.",
              "Options": {
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title text."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Specifies the appearance of the tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether the tooltip's border is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "jquery"
              ],
              "Description": "Specifies the container to draw tooltips inside of it."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies the font of the text displayed by a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of tooltips."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space on the left and the right of the text displayed by a tooltip."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Generates space above and below the text displayed by a tooltip."
            },
            "shadow": {
              "Description": "Specifies the appearance of the tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the blur distance of the tooltip's shadow."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the horizontal offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the vertical offset of the tooltip's shadow relative to the tooltip itself measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies the z-index of tooltips."
            },
            "customizeTooltip": {
              "IsFunc": true,
              "Description": "Specifies text and appearance of a set of tooltips."
            }
          }
        },
        "areaSettings": {
          "IsDeprecated": true,
          "Description": "Use the \"area\" type element of the layers array.",
          "Options": {
            "borderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | borderColor option instead."
            },
            "borderWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | borderWidth option instead."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | color option instead."
            },
            "colorGroupingField": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | colorGroupingField option instead."
            },
            "colorGroups": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "IsDeprecated": true,
              "SingularName": "colorGroup",
              "Description": "Use the layers | colorGroups option instead."
            },
            "customize": {
              "IsDeprecated": true,
              "IsFunc": true,
              "Description": "Use the layers | customize option instead."
            },
            "hoveredBorderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | hoveredBorderColor option instead."
            },
            "hoveredBorderWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | hoveredBorderWidth option instead."
            },
            "hoveredColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | hoveredColor option instead."
            },
            "hoverEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | hoverEnabled option instead."
            },
            "label": {
              "IsDeprecated": true,
              "Description": "Use the layers | label option instead.",
              "Options": {
                "dataField": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the layers | label | dataField option instead."
                },
                "enabled": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the layers | label | enabled option instead."
                },
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the layers | label | font option instead."
                }
              }
            },
            "palette": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "IsDeprecated": true,
              "EnumName": "VizPalette",
              "SingularName": "palette",
              "Description": "Use the layers | palette option instead."
            },
            "paletteSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | paletteSize option instead."
            },
            "selectedBorderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | selectedBorderColor option instead."
            },
            "selectedBorderWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | selectedBorderWidth option instead."
            },
            "selectedColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | selectedColor option instead."
            },
            "selectionMode": {
              "IsDeprecated": true,
              "EnumName": "SelectionMode",
              "Description": "Use the layers | selectionMode option instead."
            }
          }
        },
        "background": {
          "Description": "Specifies the options for the map background.",
          "Options": {
            "borderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the background border."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the background."
            }
          }
        },
        "bounds": {
          "PrimitiveTypes": [
            "double"
          ],
          "IsCollection": true,
          "SingularName": "bound",
          "Description": "Specifies the positioning of a map in geographical coordinates."
        },
        "center": {
          "PrimitiveTypes": [
            "double"
          ],
          "IsCollection": true,
          "SingularName": "center",
          "Description": "Specifies the geographical coordinates of the center for a map."
        },
        "controlBar": {
          "Description": "Specifies the options of the control bar.",
          "Options": {
            "borderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the outline of the control bar elements."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the inner area of the control bar elements."
            },
            "enabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to display the control bar."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the position of the control bar."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the margin of the control bar in pixels."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of the control bar."
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies the position of the control bar."
            }
          }
        },
        "layers": {
          "IsCollection": true,
          "SingularName": "layer",
          "Description": "Specifies options for VectorMap widget layers.",
          "Options": {
            "borderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the border of the layer elements."
            },
            "borderWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the line width (for layers of a line type) or width of the layer elements border in pixels."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for layer elements."
            },
            "colorGroupingField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the field that provides data to be used for coloring of layer elements."
            },
            "colorGroups": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsCollection": true,
              "SingularName": "colorGroup",
              "Description": "Allows you to paint layer elements with similar attributes in the same color."
            },
            "customize": {
              "IsFunc": true,
              "Description": "Specifies the function that customizes each layer element individually."
            },
            "data": {
              "IsDeprecated": true,
              "IsDataSource": true,
              "Description": "Use the dataSource option instead."
            },
            "dataField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the attribute containing marker data. Setting this option makes sense only if the layer type is \"marker\" and the elementType is \"bubble\", \"pie\" or \"image\"."
            },
            "dataSource": {
              "IsDataSource": true,
              "Description": "Specifies a data source for the layer."
            },
            "elementType": {
              "EnumName": "VectorMapMarkerType",
              "Description": "Specifies the type of a marker element. Setting this option makes sense only if the layer type is \"marker\"."
            },
            "hoveredBorderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the border of the layer element when it is hovered over."
            },
            "hoveredBorderWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the pixel-measured line width (for layers of a line type) or width for the border of the layer element when it is hovered over."
            },
            "hoveredColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for a layer element when it is hovered over."
            },
            "hoverEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to change the appearance of a layer element when it is hovered over."
            },
            "label": {
              "Description": "Specifies marker label options.",
              "Options": {
                "dataField": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The name of the data source attribute containing marker texts."
                },
                "enabled": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Enables marker labels."
                },
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for marker labels."
                }
              }
            },
            "maxSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the pixel-measured diameter of the marker that represents the biggest value. Setting this option makes sense only if the layer type is \"marker\"."
            },
            "minSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the pixel-measured diameter of the marker that represents the smallest value. Setting this option makes sense only if the layer type is \"marker\"."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the layer name."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the layer opacity (from 0 to 1)."
            },
            "palette": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "EnumName": "VizPalette",
              "SingularName": "palette",
              "Description": "Specifies the name of the palette or a custom range of colors to be used for coloring a layer."
            },
            "paletteSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the number of colors in a palette."
            },
            "selectedBorderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the border of the layer element when it is selected."
            },
            "selectedBorderWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a pixel-measured line width (for layers of a line type) or width for the border of the layer element when it is selected."
            },
            "selectedColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the layer element when it is selected."
            },
            "selectionMode": {
              "EnumName": "SelectionMode",
              "Description": "Specifies whether single or multiple map elements can be selected on a vector map."
            },
            "size": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the size of markers. Setting this option makes sense only if the layer type is \"marker\" and the elementType is \"dot\", \"pie\" or \"image\"."
            },
            "sizeGroupingField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the field that provides data to be used for sizing bubble markers. Setting this option makes sense only if the layer type is \"marker\" and the elementType is \"bubble\"."
            },
            "sizeGroups": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsCollection": true,
              "SingularName": "sizeGroup",
              "Description": "Allows you to display bubbles with similar attributes in the same size. Setting this option makes sense only if the layer type is \"marker\" and the elementType is \"bubble\"."
            },
            "type": {
              "EnumName": "VectorMapLayerType",
              "Description": "Specifies layer type."
            }
          }
        },
        "legends": {
          "IsCollection": true,
          "SingularName": "legend",
          "Description": "Configures map legends.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the legend's background."
            },
            "border": {
              "Description": "Specifies legend border settings.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the legend border."
                },
                "cornerRadius": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies a radius for the corners of the legend border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the legend border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of the legend border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Specifies whether the legend border is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the legend border in pixels."
                }
              }
            },
            "columnCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many columns must be taken to arrange legend items."
            },
            "columnItemSpacing": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the spacing between a pair of neighboring legend columns in pixels."
            },
            "customizeHint": {
              "IsFunc": true,
              "Description": "Specifies text for a hint that appears when a user hovers the mouse pointer over the text of a legend item."
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Specifies text for legend items."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for legend items."
            },
            "horizontalAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the legend's position on the map."
            },
            "itemsAlignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the alignment of legend items."
            },
            "itemTextPosition": {
              "EnumName": "Position",
              "Description": "Specifies the position of text relative to the item marker."
            },
            "margin": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the distance between the legend and the container borders in pixels.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                },
                "left": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's left margin in pixels."
                },
                "right": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's right margin in pixels."
                },
                "top": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                }
              }
            },
            "markerColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of item markers in the legend. The specified color applied only when the legend uses 'size' source."
            },
            "markerShape": {
              "EnumName": "VectorMapMarkerShape",
              "Description": "Specifies the shape of item markers."
            },
            "markerSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the size of item markers in the legend in pixels."
            },
            "orientation": {
              "EnumName": "Orientation",
              "Description": "Specifies whether to arrange legend items horizontally or vertically."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the spacing between the legend left/right border and legend items in pixels."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the spacing between the legend top/bottom border and legend items in pixels."
            },
            "rowCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many rows must be taken to arrange legend items."
            },
            "rowItemSpacing": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the spacing between a pair of neighboring legend rows in pixels."
            },
            "source": {
              "Description": "Specifies the source of data for the legend.",
              "Options": {
                "grouping": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the type of the legend grouping."
                },
                "layer": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a layer to which the legend belongs."
                }
              }
            },
            "verticalAlignment": {
              "EnumName": "VerticalEdge",
              "Description": "Specifies the legend's position on the map."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not the legend is visible on the map."
            }
          }
        },
        "mapData": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "IsDeprecated": true,
          "SingularName": "mapData",
          "Description": "Use the layers | dataSource option instead."
        },
        "markers": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "IsDeprecated": true,
          "SingularName": "marker",
          "Description": "Use the layers | dataSource option instead.",
          "Options": {
            "attributes": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsDeprecated": true,
              "Description": "Specify attributes in the \"properties\" field of a GeoJSON feature. The GeoJSON object is passed to the layers | dataSource option."
            },
            "coordinates": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "IsDeprecated": true,
              "SingularName": "coordinate",
              "Description": "Specify coordinates in the \"geometry.coordinates\" field of a GeoJSON feature. The GeoJSON object is passed to the layers | dataSource option."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Specify text as one of the GeoJSON attributes (the GeoJSON object is passed to the layers | dataSource option) and reference it using the layers | label | dataField option."
            },
            "url": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | dataField option instead."
            },
            "value": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Specify the value as one of the GeoJSON attributes (the GeoJSON object is passed to the layers | dataSource option) and reference it using the layers | dataField option."
            },
            "values": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "IsDeprecated": true,
              "SingularName": "value",
              "Description": "Specify the values as one of the GeoJSON attributes (the GeoJSON object is passed to the layers | dataSource option) and reference it using the layers | dataField option."
            }
          }
        },
        "markerSettings": {
          "IsDeprecated": true,
          "Description": "Use the \"marker\" type element of the layers array.",
          "Options": {
            "borderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | borderColor option instead."
            },
            "borderWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | borderWidth option instead."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | color option instead."
            },
            "colorGroupingField": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | colorGroupingField option instead."
            },
            "colorGroups": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "IsDeprecated": true,
              "SingularName": "colorGroup",
              "Description": "Use the layers | colorGroups option instead."
            },
            "customize": {
              "IsDeprecated": true,
              "IsFunc": true,
              "Description": "Use the layers | customize option instead."
            },
            "hoveredBorderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | hoveredBorderColor option instead."
            },
            "hoveredBorderWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | hoveredBorderWidth option instead."
            },
            "hoveredColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | hoveredColor option instead."
            },
            "hoverEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | hoverEnabled option instead."
            },
            "label": {
              "IsDeprecated": true,
              "Description": "Use the layers | label option instead.",
              "Options": {
                "enabled": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the layers | label | enabled option instead."
                },
                "font": {
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "IsDeprecated": true,
                  "Description": "Use the layers | label | font option instead."
                }
              }
            },
            "maxSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | maxSize option instead."
            },
            "minSize": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | minSize option instead."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | opacity option instead."
            },
            "palette": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "IsDeprecated": true,
              "EnumName": "VizPalette",
              "SingularName": "palette",
              "Description": "Use the layers | palette option instead."
            },
            "selectedBorderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | selectedBorderColor option instead."
            },
            "selectedBorderWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | selectedBorderWidth option instead."
            },
            "selectedColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | selectedColor option instead."
            },
            "selectionMode": {
              "IsDeprecated": true,
              "EnumName": "SelectionMode",
              "Description": "Use the layers | selectionMode option instead."
            },
            "size": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | size option instead."
            },
            "sizeGroupingField": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the layers | sizeGroupingField option instead."
            },
            "sizeGroups": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "IsDeprecated": true,
              "SingularName": "sizeGroup",
              "Description": "Use the layers | sizeGroups option instead."
            },
            "type": {
              "IsDeprecated": true,
              "EnumName": "VectorMapMarkerType",
              "Description": "Use the layers | elementType option instead."
            }
          }
        },
        "maxZoomFactor": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a map's maximum zoom factor."
        },
        "onAreaClick": {
          "IsDeprecated": true,
          "IsFunc": true,
          "IsEvent": true,
          "Description": "Use the onClick option instead."
        },
        "onAreaSelectionChanged": {
          "IsDeprecated": true,
          "IsFunc": true,
          "IsEvent": true,
          "Description": "Use the onSelectionChanged option instead."
        },
        "onCenterChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the centerChanged event."
        },
        "onClick": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the click event."
        },
        "onMarkerClick": {
          "IsDeprecated": true,
          "IsFunc": true,
          "IsEvent": true,
          "Description": "Use the onClick option instead."
        },
        "onMarkerSelectionChanged": {
          "IsDeprecated": true,
          "IsFunc": true,
          "IsEvent": true,
          "Description": "Use the onSelecitonChanged option instead."
        },
        "onSelectionChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the selectionChanged event."
        },
        "onTooltipHidden": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipHidden event."
        },
        "onTooltipShown": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the tooltipShown event."
        },
        "onZoomFactorChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the zoomFactorChanged event."
        },
        "panningEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Disables the panning capability."
        },
        "projection": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the map projection."
        },
        "touchEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the map should respond to touch gestures."
        },
        "wheelEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the map should respond when a user rolls the mouse wheel."
        },
        "zoomFactor": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a number that is used to zoom a map initially."
        },
        "zoomingEnabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Disables the zooming capability."
        }
      }
    }
  },
  "ExtraObjects": {
    "AnimationConfig": {
      "Description": "Defines animation options.",
      "Options": {
        "complete": {
          "IsFunc": true,
          "Description": "A function called after animation is completed."
        },
        "delay": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "A number specifying wait time before animation execution."
        },
        "direction": {
          "EnumName": "Direction",
          "Description": "Specifies the animation direction for the \"slideIn\" and \"slideOut\" animation types."
        },
        "duration": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "A number specifying the time in milliseconds spent on animation."
        },
        "easing": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A string specifying the easing function for animation."
        },
        "from": {
          "PrimitiveTypes": [
            "any",
            "double",
            "string"
          ],
          "Description": "Specifies the initial animation state."
        },
        "staggerDelay": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "A number specifying the time period to wait before the animation of the next stagger item starts."
        },
        "start": {
          "IsFunc": true,
          "Description": "A function called before animation is started."
        },
        "to": {
          "PrimitiveTypes": [
            "any",
            "double",
            "string"
          ],
          "Description": "Specifies a final animation state."
        },
        "type": {
          "EnumName": "AnimationType",
          "Description": "A string value specifying the animation type."
        }
      }
    },
    "GaugeIndicator": {
      "Description": "An object that defines a gauge indicator of the rangeBar type.",
      "Options": {
        "arrowLength": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the length of an arrow for the indicator of the textCloud type in pixels."
        },
        "backgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the background color for the indicator of the rangeBar type."
        },
        "baseValue": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the base value for the indicator of the rangeBar type."
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a color of the indicator."
        },
        "horizontalOrientation": {
          "EnumName": "HorizontalEdge",
          "Description": "Specifies the orientation of the rangeBar indicator. Applies only if the geometry | orientation option is \"vertical\"."
        },
        "indentFromCenter": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the distance between the needle and the center of a gauge for the indicator of a needle-like type."
        },
        "length": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the indicator length."
        },
        "offset": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the distance between the indicator and the invisible scale line."
        },
        "palette": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "EnumName": "VizPalette",
          "SingularName": "palette",
          "Description": "Sets the array of colors to be used for coloring subvalue indicators."
        },
        "secondColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the second color for the indicator of the twoColorNeedle type."
        },
        "secondFraction": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the length of a twoNeedleColor type indicator tip as a percentage."
        },
        "size": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the range bar size for an indicator of the rangeBar type."
        },
        "spindleGapSize": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the inner diameter in pixels, so that the spindle has the shape of a ring."
        },
        "spindleSize": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the spindle's diameter in pixels for the indicator of a needle-like type."
        },
        "text": {
          "Description": "Specifies the appearance of the text displayed in an indicator of the rangeBar type.",
          "Options": {
            "customizeText": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed in an indicator."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed by the indicator."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for the text displayed in an indicator."
            },
            "indent": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the range bar's label indent in pixels."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the text | format | precision option instead."
            }
          }
        },
        "verticalOrientation": {
          "EnumName": "VerticalEdge",
          "Description": "Specifies the orientation of the rangeBar indicator. Applies only if the geometry | orientation option is \"horizontal\"."
        },
        "width": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the width of an indicator in pixels."
        },
        "type": {
          "EnumName": "GaugeIndicatorType",
          "Description": "Specifies the type of subvalue indicators."
        }
      }
    },
    "CompareRule": {
      "Description": "A validation rule that demands that a validated editor has a value that is equal to a specified expression.",
      "IsCollection": true,
      "Options": {
        "comparisonTarget": {
          "IsFunc": true,
          "Description": "Specifies the function whose return value is used for comparison with the validated value."
        },
        "comparisonType": {
          "EnumName": "ComparisonOperator",
          "Description": "Specifies the operator to be used for comparing the validated value with the target."
        },
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "reevaluate": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates whether or not the rule should be always checked for the target value or only when the target value changes."
        },
        "type": {
          "EnumName": "ValidationRuleType",
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "CustomRule": {
      "Description": "A validation rule with custom validation logic.",
      "IsCollection": true,
      "Options": {
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "reevaluate": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates whether the rule should be always checked for the target value or only when the target value changes."
        },
        "type": {
          "EnumName": "ValidationRuleType",
          "Description": "Specifies the type of the current rule."
        },
        "validationCallback": {
          "IsFunc": true,
          "Description": "A function that validates the target value."
        }
      }
    },
    "FormEmptyItem": {
      "Description": "This article describes configuration options of an empty form item.",
      "IsCollection": true,
      "Options": {
        "colSpan": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of columns spanned by the item."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the form item."
        },
        "itemType": {
          "EnumName": "FormItemType",
          "Description": "Specifies the type of the current item."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the form item name."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the current form item is visible."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the sequence number of the item in a form, group or tab."
        }
      }
    },
    "FormGroupItem": {
      "Description": "This article describes configuration options of a group form item.",
      "IsCollection": true,
      "Options": {
        "alignItemLabels": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not all group item labels are aligned."
        },
        "caption": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the group caption."
        },
        "colCount": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "The count of columns in the group layout."
        },
        "colCountByScreen": {
          "Description": "Specifies dependency between the screen factor and the count of columns in the group layout.",
          "Options": {
            "lg": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "The count of columns for a large screen size."
            },
            "md": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "The count of columns for a middle-sized screen."
            },
            "sm": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "The count of columns for a small-sized screen."
            },
            "xs": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "The count of columns for an extra small-sized screen."
            }
          }
        },
        "colSpan": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of columns spanned by the item."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the form item."
        },
        "items": {
          "ComplexTypes": [
            "FormEmptyItem",
            "FormGroupItem",
            "FormSimpleItem",
            "FormTabbedItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "Holds an array of form items displayed within the group."
        },
        "itemType": {
          "EnumName": "FormItemType",
          "Description": "Specifies the type of the current item."
        },
        "template": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering a group item."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the current form item is visible."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the sequence number of the item in a form, group or tab."
        }
      }
    },
    "FormSimpleItem": {
      "Description": "This article describes configuration options of a simple form item.",
      "IsCollection": true,
      "Options": {
        "colSpan": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of columns spanned by the item."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the form item."
        },
        "dataField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the path to the formData object field bound to the current form item."
        },
        "editorOptions": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies configuration options for the editor widget of the current form item."
        },
        "editorType": {
          "EnumName": "FormItemEditorType",
          "Description": "Specifies which editor widget is used to display and edit the form item value."
        },
        "helpText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the help text displayed for the current form item."
        },
        "isRequired": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the current form item is required."
        },
        "itemType": {
          "EnumName": "FormItemType",
          "Description": "Specifies the type of the current item."
        },
        "label": {
          "Description": "Specifies options for the form item label.",
          "Options": {
            "alignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Specifies the label's horizontal alignment."
            },
            "location": {
              "EnumName": "FormLabelLocation",
              "Description": "Specifies the location of a label against the editor."
            },
            "showColon": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not a colon is displayed at the end of the current label."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the label text."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not the label is visible."
            }
          }
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the form item name."
        },
        "template": {
          "IsTemplate": true,
          "Description": "A template to be used for rendering the form item."
        },
        "validationRules": {
          "ComplexTypes": [
            "CompareRule",
            "CustomRule",
            "EmailRule",
            "NumericRule",
            "PatternRule",
            "RangeRule",
            "RequiredRule",
            "StringLengthRule"
          ],
          "IsCollection": true,
          "SingularName": "validationRule",
          "Description": "An array of validation rules to be checked for the form item editor."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the current form item is visible."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the sequence number of the item in a form, group or tab."
        }
      }
    },
    "FormTabbedItem": {
      "Description": "This article describes configuration options of a tabbed form item.",
      "IsCollection": true,
      "Options": {
        "colSpan": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the number of columns spanned by the item."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the form item."
        },
        "itemType": {
          "EnumName": "FormItemType",
          "Description": "Specifies the type of the current item."
        },
        "tabPanelOptions": {
          "ComplexTypes": [
            "dxTabPanelOptions"
          ],
          "Description": "Holds a configuration object for the TabPanel widget used to display the current form item."
        },
        "tabs": {
          "IsCollection": true,
          "SingularName": "tab",
          "Description": "An array of tab configuration objects.",
          "Options": {
            "alignItemLabels": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not labels of items displayed within the current tab are aligned."
            },
            "badge": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a badge text for the tab."
            },
            "colCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "The count of columns in the tab layout."
            },
            "colCountByScreen": {
              "Description": "Specifies dependency between the screen factor and the count of columns in the tab layout.",
              "Options": {
                "lg": {
                  "PrimitiveTypes": [
                    "int32"
                  ],
                  "Description": "The count of columns for a large screen size."
                },
                "md": {
                  "PrimitiveTypes": [
                    "int32"
                  ],
                  "Description": "The count of columns for a middle-sized screen."
                },
                "sm": {
                  "PrimitiveTypes": [
                    "int32"
                  ],
                  "Description": "The count of columns for a small-sized screen."
                },
                "xs": {
                  "PrimitiveTypes": [
                    "int32"
                  ],
                  "Description": "The count of columns for an extra small-sized screen."
                }
              }
            },
            "disabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "A Boolean value specifying whether or not the tab can respond to user interaction."
            },
            "icon": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the icon to be displayed on the tab."
            },
            "items": {
              "ComplexTypes": [
                "FormEmptyItem",
                "FormGroupItem",
                "FormSimpleItem",
                "FormTabbedItem"
              ],
              "IsCollection": true,
              "SingularName": "item",
              "Description": "Holds an array of form items displayed within the tab."
            },
            "tabTemplate": {
              "IsTemplate": true,
              "Description": "The template to be used for rendering the tab."
            },
            "template": {
              "IsTemplate": true,
              "Description": "The template to be used for rendering the tab content."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the tab title."
            }
          }
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the current form item is visible."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the sequence number of the item in a form, group or tab."
        }
      }
    },
    "EmailRule": {
      "Description": "A validation rule that demands that the validated field match the Email pattern.",
      "IsCollection": true,
      "Options": {
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "type": {
          "EnumName": "ValidationRuleType",
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "Format": {
      "Description": "Formats values.",
      "Options": {
        "currency": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the currency code for the 'currency' format."
        },
        "formatter": {
          "IsFunc": true,
          "Description": "Specifies a custom format."
        },
        "parser": {
          "IsFunc": true,
          "Description": "Parses string values into numeric or date-time values. Always used with formatter."
        },
        "precision": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a precision for values of a numeric format."
        },
        "type": {
          "EnumName": "Format",
          "Description": "Specifies a predefined format."
        }
      }
    },
    "NumericRule": {
      "Description": "A validation rule that demands that the validated field has a numeric value.",
      "IsCollection": true,
      "Options": {
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "type": {
          "EnumName": "ValidationRuleType",
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "PatternRule": {
      "Description": "A validation rule that demands that the validated field match a specified pattern.",
      "IsCollection": true,
      "Options": {
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "pattern": {
          "PrimitiveTypes": [
            "RegExp",
            "string"
          ],
          "Description": "Specifies the regular expression that the validated value must match."
        },
        "type": {
          "EnumName": "ValidationRuleType",
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "PivotGridDataSource": {
      "Description": "An object that provides access to data for the PivotGrid widget.",
      "Module": "ui/pivot_grid/data_source",
      "Options": {
        "fields": {
          "IsCollection": true,
          "SingularName": "field",
          "Description": "An array of pivot grid fields.",
          "Options": {
            "allowCrossGroupCalculation": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether to allow the predefined summary post-processing functions ('absoluteVariation' and 'percentVariation') and runningTotal to take values of different groups into account."
            },
            "allowExpandAll": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Allows an end-user to expand/collapse all header items within a header level."
            },
            "allowFiltering": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Allows an end-user to change filtering options."
            },
            "allowSorting": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Allows an end-user to change sorting options."
            },
            "allowSortingBySummary": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Allows an end-user to sort columns by summary values."
            },
            "area": {
              "EnumName": "PivotGridArea",
              "Description": "Type of the area where the field is located."
            },
            "areaIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Index among the other fields displayed within the same area."
            },
            "calculateCustomSummary": {
              "IsFunc": true,
              "Description": "Allows you to use a custom aggregate function to calculate the summary values. Cannot be used for the XmlaStore store type."
            },
            "calculateSummaryValue": {
              "IsFunc": true,
              "Description": "Specifies a callback function that allows you to modify summary values after they are calculated."
            },
            "caption": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A caption that will be displayed in the pivot grid's field chooser and field panel to identify the field."
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed in the cells of a field."
            },
            "dataField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Name of the data source field containing data for the pivot grid field."
            },
            "dataType": {
              "EnumName": "PivotGridDataType",
              "Description": "Specifies a type of field values."
            },
            "displayFolder": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The name of the folder in which the field is located."
            },
            "expanded": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Indicates whether all header items of the field's header level are expanded."
            },
            "filterType": {
              "EnumName": "FilterType",
              "Description": "The filter type for the current field."
            },
            "filterValues": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "filterValue",
              "Description": "The filter values for the current field."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a display format for field values."
            },
            "groupIndex": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "The index of the field within a group."
            },
            "groupInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "PivotGridGroupInterval",
              "Description": "Specifies how the values of the current field are combined into groups. Cannot be used for the XmlaStore store type."
            },
            "groupName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The name of the group to which the field belongs."
            },
            "isMeasure": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether the field should be treated as a Data Field."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the format | precision option instead."
            },
            "runningTotal": {
              "EnumName": "PivotGridRunningTotalMode",
              "Description": "Specifies whether to summarize each next summary value with the previous one by rows or columns."
            },
            "selector": {
              "IsFunc": true,
              "Description": "Specifies the function that determines how to split data from the data source into ranges for header items. Cannot be used for the XmlaStore store type and along with remote operations."
            },
            "showGrandTotals": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to display Grand Total values for the field."
            },
            "showTotals": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to display Total values for the field."
            },
            "showValues": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to display summary values. Applies only to the fields whose area is \"data\". Inherits the value of showTotals by default."
            },
            "sortBy": {
              "EnumName": "PivotGridSortBy",
              "Description": "Specifies how field data should be sorted. Can be used for the XmlaStore store type only."
            },
            "sortBySummaryField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sorts the header items of this field by the summary values of another field."
            },
            "sortBySummaryPath": {
              "PrimitiveTypes": [
                "double",
                "string"
              ],
              "IsCollection": true,
              "SingularName": "sortBySummaryPath",
              "Description": "The array of field names that specify a path to column/row whose summary field is used for sorting of this field's header items."
            },
            "sortingMethod": {
              "IsFunc": true,
              "Description": "Specifies how to sort header items."
            },
            "sortOrder": {
              "EnumName": "SortOrder",
              "Description": "Specifies the sort order of field values."
            },
            "summaryDisplayMode": {
              "EnumName": "PivotGridSummaryDisplayMode",
              "Description": "Specifies the summary post-processing algorithm."
            },
            "summaryType": {
              "EnumName": "SummaryType",
              "Description": "Specifies how to aggregate field data. Cannot be used for the XmlaStore store type."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "A boolean value specifying whether or not the field is visible in the pivot grid and the Field Chooser."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the absolute width of the field in the pivot grid."
            },
            "wordWrapEnabled": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not long text in header items should be wrapped."
            }
          }
        },
        "filter": {
          "IsFilterExpr": true,
          "Description": "Specifies data filtering conditions. Cannot be used for the XmlaStore store type."
        },
        "onChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the changed event."
        },
        "onFieldsPrepared": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the fieldsPrepared event."
        },
        "onLoadError": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the loadError event."
        },
        "onLoadingChanged": {
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A handler for the loadingChanged event."
        },
        "remoteOperations": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not all the operations (filtering, grouping and summary calculation) are performed remotely."
        },
        "retrieveFields": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates whether or not the automatic field generation from data in the Store is enabled."
        },
        "store": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the underlying Store instance used to access data.",
          "Options": {
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the type of the store used to access data."
            }
          }
        }
      }
    },
    "PositionConfig": {
      "Description": "The position object specifies the widget positioning options.",
      "Options": {
        "at": {
          "EnumName": "PositionAlignment",
          "Description": "The target element position that the widget is positioned against.",
          "Options": {
            "x": {
              "EnumName": "HorizontalAlignment",
              "Description": "Holds the horizontal position specifier."
            },
            "y": {
              "EnumName": "VerticalAlignment",
              "Description": "Holds the vertical position specifier."
            }
          }
        },
        "boundary": {
          "PrimitiveTypes": [
            "jquery",
            "window"
          ],
          "Description": "The element within which the widget is positioned."
        },
        "boundaryOffset": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the horizontal and vertical offset from the window's boundaries.",
          "Options": {
            "x": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the horizontal offset."
            },
            "y": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the vertical offset."
            }
          }
        },
        "collision": {
          "EnumName": "PositionResolveCollisionXY",
          "Description": "Specifies how to move the widget if it overflows the screen.",
          "Options": {
            "x": {
              "EnumName": "PositionResolveCollision",
              "Description": "Specifies the horizontal collision handler."
            },
            "y": {
              "EnumName": "PositionResolveCollision",
              "Description": "Specifies the vertical collision handler."
            }
          }
        },
        "my": {
          "EnumName": "PositionAlignment",
          "Description": "The position of the widget to align against the target element.",
          "Options": {
            "x": {
              "EnumName": "HorizontalAlignment",
              "Description": "Holds the horizontal position specifier."
            },
            "y": {
              "EnumName": "VerticalAlignment",
              "Description": "Holds the vertical position specifier."
            }
          }
        },
        "of": {
          "PrimitiveTypes": [
            "jquery",
            "window"
          ],
          "Description": "The target element that the widget is positioned against."
        },
        "offset": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies horizontal and vertical offset in pixels.",
          "Options": {
            "x": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the horizontal offset."
            },
            "y": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the vertical offset."
            }
          }
        }
      }
    },
    "RangeRule": {
      "Description": "A validation rule that demands the target value be within the specified value range (including the range's end points).",
      "IsCollection": true,
      "Options": {
        "max": {
          "PrimitiveTypes": [
            "date",
            "double"
          ],
          "Description": "Specifies the maximum value allowed for the validated value."
        },
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown to end-users if the current rule is broken."
        },
        "min": {
          "PrimitiveTypes": [
            "date",
            "double"
          ],
          "Description": "Specifies the minimum value allowed for the validated value."
        },
        "reevaluate": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates whether the rule should be always checked for the target value or only when the target value changes."
        },
        "type": {
          "EnumName": "ValidationRuleType",
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "RequiredRule": {
      "Description": "A validation rule that demands that a validated field has a value.",
      "IsCollection": true,
      "Options": {
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "trim": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates whether to remove the Space characters from the validated value."
        },
        "type": {
          "EnumName": "ValidationRuleType",
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "StringLengthRule": {
      "Description": "A validation rule that demands the target value length be within the specified value range (including the range's end points).",
      "IsCollection": true,
      "Options": {
        "max": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the maximum length allowed for the validated value."
        },
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "min": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the minimum length allowed for the validated value."
        },
        "trim": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Indicates whether or not to remove the Space characters from the validated value."
        },
        "type": {
          "EnumName": "ValidationRuleType",
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "VizFont": {
      "Description": "Font options.",
      "Options": {
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a font color."
        },
        "family": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a font family."
        },
        "opacity": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a font opacity."
        },
        "size": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies a font size."
        },
        "weight": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a font weight."
        }
      }
    },
    "ChartCommonSeriesSettings": {
      "Description": "Specifies settings common for all series in the chart.",
      "Options": {
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides arguments for series points."
        },
        "axis": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Binds the series to a value axis."
        },
        "border": {
          "Description": "Configures the series border (in area-like series) or the series point border (in bar-like and bubble series).",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series)."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series)."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series)."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series)."
            }
          }
        },
        "closeValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides close values for points of a financial series."
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the series."
        },
        "cornerRadius": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Makes bars look rounded. Applies only to bar-like series."
        },
        "dashStyle": {
          "EnumName": "DashStyle",
          "Description": "Specifies the dash style of the series line. Applies only to line-like series."
        },
        "highValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides high values for points of a financial series."
        },
        "hoverMode": {
          "EnumName": "ChartSeriesHoverMode",
          "Description": "Specifies series elements to be highlighted when a user points to a series."
        },
        "hoverStyle": {
          "Description": "Configures the appearance adopted by the series when a user points to it.",
          "Options": {
            "border": {
              "Description": "Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user points to the series."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user points to the series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the series in the hovered state."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies the dash style of the series line when the series is in the hovered state. Applies only to line-like series."
            },
            "hatching": {
              "Description": "Configures hatching that applies when a user points to the series.",
              "Options": {
                "direction": {
                  "EnumName": "HatchingDirection",
                  "Description": "Specifies the direction of hatching lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent hatching lines should be."
                },
                "step": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the distance between two side-by-side hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the pixel-measured width of the series line when the series is in the hovered state."
            }
          }
        },
        "ignoreEmptyPoints": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the series should ignore null data points."
        },
        "innerColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a filling color for the body of a series point that visualizes a non-reduced value. Applies only to candlestick series."
        },
        "label": {
          "Description": "Configures point labels.",
          "Options": {
            "alignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Aligns point labels in relation to their points."
            },
            "argumentFormat": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Formats the point argument before it will be displayed in the point label."
            },
            "argumentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | argumentFormat | precision instead."
            },
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of point labels. By default, point labels inherit the color from their points."
            },
            "border": {
              "Description": "Configures the borders of point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes the border visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the border in pixels."
                }
              }
            },
            "connector": {
              "Description": "Configures the label connectors.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes the connectors visible. Applies only if label | visible is set to true."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the connectors in pixels."
                }
              }
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Customizes the text displayed by point labels."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for point labels."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Formats the point value before it will be displayed in the point label."
            },
            "horizontalOffset": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Along with verticalOffset, shifts point labels from their initial positions."
            },
            "percentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | format | percentPrecision instead."
            },
            "position": {
              "EnumName": "RelativePosition",
              "Description": "Specifies whether to display point labels inside or outside of series points. Applies only to bubble, range-like and bar-like series."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | format | precision option instead."
            },
            "rotationAngle": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Rotates point labels."
            },
            "showForZeroValues": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to show labels for points with zero value. Applies only to bar-like series."
            },
            "verticalOffset": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Along with horizontalOffset, shifts point labels from their initial positions."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Makes the point labels visible."
            }
          }
        },
        "lowValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides low values for points of a financial series."
        },
        "maxLabelCount": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies a limit for the number of point labels."
        },
        "minBarSize": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the minimal possible height (or length if the chart is rotated) of a bar in pixels. Applies only to bar-like series."
        },
        "opacity": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies how transparent the series should be."
        },
        "openValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides open values for points of a financial series."
        },
        "pane": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which pane the series should belong to. Accepts the name of the pane."
        },
        "point": {
          "Description": "Configures series points in scatter, line- and area-like series.",
          "Options": {
            "border": {
              "Description": "Configures the appearance of the series point border in scatter, line- and area-like series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes the border visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets the width of the border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the series points."
            },
            "hoverMode": {
              "EnumName": "ChartPointInteractionMode",
              "Description": "Specifies series elements to be highlighted when a user pauses on a series point."
            },
            "hoverStyle": {
              "Description": "Configures the appearance adopted by a series point when a user pauses on it.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance of the point border when a user pauses on the point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the color of the point border when the point is in the hovered state."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Makes the border visible when a user pauses on the series point."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the point border when the point is in the hovered state."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of series points in the hovered state."
                },
                "size": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specfies the diameter of series points in the hovered state."
                }
              }
            },
            "image": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Substitutes the standard point symbols with an image.",
              "Options": {
                "height": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the height of the image used instead of a point marker.",
                  "Options": {
                    "rangeMaxPoint": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the height of the image that represents the maximum point in a range area series."
                    },
                    "rangeMinPoint": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the height of the image that represents the minimum point in a range area series."
                    }
                  }
                },
                "url": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the URL of the image to be used as a point marker.",
                  "Options": {
                    "rangeMaxPoint": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the URL of the image to be used as a maximum point marker."
                    },
                    "rangeMinPoint": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the URL of the image to be used as a maximum point marker."
                    }
                  }
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of an image that is used as a point marker.",
                  "Options": {
                    "rangeMaxPoint": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the image that represents the maximum point in a range area series."
                    },
                    "rangeMinPoint": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the image that represents the minimum point in a range area series."
                    }
                  }
                }
              }
            },
            "selectionMode": {
              "EnumName": "ChartPointInteractionMode",
              "Description": "Specifies series elements to be highlighted when a user selects a series point."
            },
            "selectionStyle": {
              "Description": "Configures the appearance of a selected series point.",
              "Options": {
                "border": {
                  "Description": "Configures the border of a selected point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the color of the point border when the point is selected."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Makes the border of a selected point visible."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the point border when the point is selected."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of series points in the selected state."
                },
                "size": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specfies the diameter of series points in the selected state."
                }
              }
            },
            "size": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the diameter of series points in pixels."
            },
            "symbol": {
              "EnumName": "PointSymbol",
              "Description": "Specifies which symbol should represent series points in scatter, line- and area-like series."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Makes the series points visible."
            }
          }
        },
        "rangeValue1Field": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Coupled with the rangeValue2Field option, specifies which data source field provides values for a range-like series."
        },
        "rangeValue2Field": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Coupled with the rangeValue1Field option, specifies which data source field provides values for a range-like series."
        },
        "reduction": {
          "Description": "Specifies reduction options for financial series.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the points whose price has decreased in comparison to the price of the previous point."
            },
            "level": {
              "EnumName": "FinancialChartReductionLevel",
              "Description": "Specifies whether high, low, open or close prices of points should be compared."
            }
          }
        },
        "selectionMode": {
          "EnumName": "ChartSeriesSelectionMode",
          "Description": "Specifies series elements to be highlighted when a user selects a series."
        },
        "selectionStyle": {
          "Description": "Configures the appearance adopted by the series when a user selects it.",
          "Options": {
            "border": {
              "Description": "Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user selects the series."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user selects the series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the series in the selected state."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies the dash style of the series line when the series is in the selected state. Applies only to line-like series."
            },
            "hatching": {
              "Description": "Configures hatching that applies when a user selects the series.",
              "Options": {
                "direction": {
                  "EnumName": "HatchingDirection",
                  "Description": "Specifies the direction of hatching lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent hatching lines should be."
                },
                "step": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the distance between two side-by-side hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the pixel-measured width of the series line when the series is in the selected state."
            }
          }
        },
        "showInLegend": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to show the series in the legend or not."
        },
        "sizeField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides size values for bubbles. Required by and applies only to bubble series."
        },
        "stack": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which stack the series should belongs to. Applies only to stacked bar and full-stacked bar series."
        },
        "tagField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides auxiliary data for series points."
        },
        "valueErrorBar": {
          "Description": "Configures error bars.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of error bars."
            },
            "displayMode": {
              "EnumName": "ValueErrorBarDisplayMode",
              "Description": "Specifies whether error bars must be displayed in full or partially."
            },
            "edgeLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the lines that indicate the error bar edges."
            },
            "highValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies which data field provides high error values."
            },
            "lineWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the error bar line."
            },
            "lowValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies which data field provides low error values."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies how trasparent error bars should be."
            },
            "type": {
              "EnumName": "ValueErrorBarType",
              "Description": "Specifies how error bar values must be calculated."
            },
            "value": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the value to be used for generating error bars."
            }
          }
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides values for series points."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the series is visible or not."
        },
        "width": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the width of the series line in pixels. Applies only to line-like series."
        },
        "area": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all area series."
        },
        "bar": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all bar series."
        },
        "bubble": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all bubble series."
        },
        "candlestick": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all candlestick series."
        },
        "fullstackedarea": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all full-stacked area series."
        },
        "fullstackedbar": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all full-stacked bar series."
        },
        "fullstackedline": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all full-stacked line series."
        },
        "fullstackedspline": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all full-stacked spline series."
        },
        "fullstackedsplinearea": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all full-stacked spline area series."
        },
        "line": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all line series."
        },
        "rangearea": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all range area series."
        },
        "rangebar": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all range bar series."
        },
        "scatter": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all scatter series."
        },
        "spline": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all spline series."
        },
        "splinearea": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all spline area series."
        },
        "stackedarea": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all stacked area series."
        },
        "stackedbar": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all stacked bar series."
        },
        "stackedline": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all stacked line series."
        },
        "stackedspline": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all stacked spline series."
        },
        "stackedsplinearea": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all stacked spline area series."
        },
        "steparea": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all step area series."
        },
        "stepline": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all step line series."
        },
        "stock": {
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all stock series."
        },
        "type": {
          "EnumName": "SeriesType",
          "Description": "Specifies the type of the series."
        }
      }
    },
    "PieChartCommonSeriesSettings": {
      "Description": "An object defining the configuration options that are common for all series of the PieChart widget.",
      "Options": {
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides arguments for series points."
        },
        "argumentType": {
          "EnumName": "ChartDataType",
          "Description": "Specifies the required type for series arguments."
        },
        "border": {
          "Description": "An object defining the series border configuration options.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a border color for a series."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies a dash style for the border of a series point."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Sets border visibility for a series."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Sets a border width for a series in pixels."
            }
          }
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a series color."
        },
        "hoverMode": {
          "EnumName": "PieChartSeriesInteractionMode",
          "Description": "Specifies the chart elements to highlight when a series is hovered over."
        },
        "hoverStyle": {
          "Description": "An object defining configuration options for a hovered series.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a hovered series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for the series when it is hovered over."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for the border of a series point when this point is hovered over."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets border visibility for a hovered series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a border width for a hovered series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for the series when it is hovered over."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a point is hovered over.",
              "Options": {
                "direction": {
                  "EnumName": "HatchingDirection",
                  "Description": "Specifies how to apply hatching to highlight the hovered point."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the distance between two hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            }
          }
        },
        "innerRadius": {
          "PrimitiveTypes": [
            "double"
          ],
          "IsDeprecated": true,
          "Description": "Use the innerRadius option instead."
        },
        "label": {
          "Description": "An object defining the label configuration options.",
          "Options": {
            "argumentFormat": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for arguments displayed by point labels."
            },
            "argumentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | argumentFormat | precision instead."
            },
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a background color for point labels."
            },
            "border": {
              "Description": "Specifies border options for point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a border color for point labels."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not borders are visible in point labels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the border width for point labels."
                }
              }
            },
            "connector": {
              "Description": "Specifies connector options for series point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of label connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not label connectors are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of label connectors."
                }
              }
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by point labels."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in point labels."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for the text displayed by point labels."
            },
            "percentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | format | percentPrecision instead."
            },
            "position": {
              "EnumName": "PieChartLabelPosition",
              "Description": "Specifies a label position relative to the chart."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | format | precision option instead."
            },
            "radialOffset": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies how to shift labels from their initial position in a radial direction in pixels."
            },
            "rotationAngle": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the angle used to rotate point labels from their initial position."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies the visibility of point labels."
            }
          }
        },
        "maxLabelCount": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed."
        },
        "minSegmentSize": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a minimal size of a displayed pie segment."
        },
        "segmentsDirection": {
          "IsDeprecated": true,
          "EnumName": "PieChartSegmentsDirection",
          "Description": "Use the segmentsDirection option instead."
        },
        "selectionMode": {
          "EnumName": "PieChartSeriesInteractionMode",
          "Description": "Specifies the chart elements to highlight when the series is selected."
        },
        "selectionStyle": {
          "Description": "An object defining configuration options for the series when it is selected.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a selected series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for a selected series."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for the border of a selected series point."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets a border visibility for a selected series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a border width for a selected series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for a series when it is selected."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a point is selected.",
              "Options": {
                "direction": {
                  "EnumName": "HatchingDirection",
                  "Description": "Specifies how to apply hatching to highlight the selected point."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the distance between two hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            }
          }
        },
        "smallValuesGrouping": {
          "Description": "Specifies chart segment grouping options.",
          "Options": {
            "groupName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the grouped chart segment. This name represents the segment in the chart legend."
            },
            "mode": {
              "EnumName": "SmallValuesGroupingMode",
              "Description": "Specifies the segment grouping mode."
            },
            "threshold": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a threshold for segment values."
            },
            "topCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many segments must not be grouped."
            }
          }
        },
        "startAngle": {
          "PrimitiveTypes": [
            "double"
          ],
          "IsDeprecated": true,
          "Description": "Use the startAngle option instead."
        },
        "tagField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides data about a point."
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides values for series points."
        },
        "type": {
          "IsDeprecated": true,
          "EnumName": "PieChartType",
          "Description": "Use the type option instead."
        }
      }
    },
    "PolarChartCommonSeriesSettings": {
      "Description": "An object defining the configuration options that are common for all series of the PolarChart widget.",
      "Options": {
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides arguments for series points."
        },
        "border": {
          "Description": "An object defining the series border configuration options.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a border color for a series."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies a dash style for the borders of series points."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Sets border visibility for a series."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Sets a border width for a series in pixels."
            }
          }
        },
        "closed": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to close the chart by joining the end point with the first point."
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a series color."
        },
        "dashStyle": {
          "EnumName": "DashStyle",
          "Description": "Specifies the dash style of the series' line."
        },
        "hoverMode": {
          "EnumName": "ChartSeriesHoverMode",
          "Description": "Specifies the series elements to highlight when a series is hovered over."
        },
        "hoverStyle": {
          "Description": "An object defining configuration options for a hovered series.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a hovered series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for a hovered series."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets a border visibility for a hovered series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a border width for a hovered series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for a series when it is hovered over."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies the dash style for the line in a hovered series."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a series is hovered over.",
              "Options": {
                "direction": {
                  "EnumName": "HatchingDirection",
                  "Description": "Specifies how to apply hatching to highlight the hovered series."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the distance between hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of a line in a hovered series."
            }
          }
        },
        "ignoreEmptyPoints": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a chart ignores null data points or not."
        },
        "label": {
          "Description": "An object defining the label configuration options.",
          "Options": {
            "argumentFormat": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for arguments displayed by point labels."
            },
            "argumentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | argumentFormat | precision instead."
            },
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a background color for point labels."
            },
            "border": {
              "Description": "Specifies border options for point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a border color for point labels."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether borders are visible in point labels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the border width for point labels."
                }
              }
            },
            "connector": {
              "Description": "Specifies connector options for series point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of label connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not label connectors are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of label connectors."
                }
              }
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by point labels."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in point labels."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for the text displayed by point labels."
            },
            "position": {
              "EnumName": "RelativePosition",
              "Description": "Specifies a label position in bar-like series."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | format | precision option instead."
            },
            "rotationAngle": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the angle used to rotate point labels from their initial position."
            },
            "showForZeroValues": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to show a label when the point has a zero value."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies the visibility of point labels."
            }
          }
        },
        "maxLabelCount": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed."
        },
        "minBarSize": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the minimal length of a displayed bar in pixels."
        },
        "opacity": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies opacity for a series."
        },
        "point": {
          "Description": "An object defining configuration options for points in line and area series.",
          "Options": {
            "border": {
              "Description": "Specifies border options for points in the line and area series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for points in the line and area series."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets border visibility for points in the line and area series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a border width for points in the line or area series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the points color."
            },
            "hoverMode": {
              "EnumName": "ChartPointInteractionMode",
              "Description": "Specifies what series points to highlight when a point is hovered over."
            },
            "hoverStyle": {
              "Description": "An object defining configuration options for a hovered point.",
              "Options": {
                "border": {
                  "Description": "An object defining the border options for a hovered point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Sets a border color for a hovered point."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Sets border visibility for a hovered point."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Sets a border width for a hovered point."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a color for a point when it is hovered over."
                },
                "size": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the diameter of a hovered point in the series that represents data points as symbols (not as bars for instance)."
                }
              }
            },
            "image": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "An object specifying the parameters of an image that is used as a point marker.",
              "Options": {
                "height": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the height of an image that is used as a point marker."
                },
                "url": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a URL leading to the image to be used as a point marker."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of an image that is used as a point marker."
                }
              }
            },
            "selectionMode": {
              "EnumName": "ChartPointInteractionMode",
              "Description": "Specifies what series points to highlight when a point is selected."
            },
            "selectionStyle": {
              "Description": "An object defining configuration options for a selected point.",
              "Options": {
                "border": {
                  "Description": "An object defining the border options for a selected point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Sets a border color for a selected point."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Sets border visibility for a selected point."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Sets a border width for a selected point."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a color for a point when it is selected."
                },
                "size": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the diameter of a selected point in the series that represents data points as symbols (not as bars for instance)."
                }
              }
            },
            "size": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the point diameter in pixels for those series that represent data points as symbols (not as bars for instance)."
            },
            "symbol": {
              "EnumName": "VizPointSymbol",
              "Description": "Specifies a symbol for presenting points of the line and area series."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies the points visibility for a line and area series."
            }
          }
        },
        "selectionMode": {
          "EnumName": "ChartSeriesSelectionMode",
          "Description": "Specifies the series elements to highlight when the series is selected."
        },
        "selectionStyle": {
          "Description": "An object defining configuration options for a selected series.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a selected series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for a selected series."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets border visibility for a selected series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a border width for a selected series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for a series when it is selected."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies the dash style for the line in a selected series."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a series is selected.",
              "Options": {
                "direction": {
                  "EnumName": "HatchingDirection",
                  "Description": "Specifies how to apply hatching to highlight a selected series."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the distance between hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of a line in a selected series."
            }
          }
        },
        "showInLegend": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to show the series in the chart's legend."
        },
        "stack": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the stack where the values of the 'stackedBar' series must be located."
        },
        "tagField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides data about a point."
        },
        "valueErrorBar": {
          "Description": "Configures error bars.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of error bars."
            },
            "displayMode": {
              "EnumName": "ValueErrorBarDisplayMode",
              "Description": "Specifies whether error bars must be displayed in full or partially."
            },
            "edgeLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the lines that indicate the error bar edges."
            },
            "highValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data field that provides data for high error values."
            },
            "lineWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the error bar line."
            },
            "lowValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data field that provides data for low error values."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of error bars."
            },
            "type": {
              "EnumName": "ValueErrorBarType",
              "Description": "Specifies how error bar values must be calculated."
            },
            "value": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the value to be used for generating error bars."
            }
          }
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides values for series points."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies the visibility of a series."
        },
        "width": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a line width."
        },
        "area": {
          "ComplexTypes": [
            "PolarChartCommonSeriesSettings"
          ],
          "Description": "An object that specifies configuration options for all series of the area type in the chart."
        },
        "bar": {
          "ComplexTypes": [
            "PolarChartCommonSeriesSettings"
          ],
          "Description": "An object that specifies configuration options for all series of the 'bar' type in the chart."
        },
        "line": {
          "ComplexTypes": [
            "PolarChartCommonSeriesSettings"
          ],
          "Description": "An object that specifies configuration options for all series of the 'line' type in the chart."
        },
        "scatter": {
          "ComplexTypes": [
            "PolarChartCommonSeriesSettings"
          ],
          "Description": "An object that specifies configuration options for all series of the 'scatter' type in the chart."
        },
        "stackedbar": {
          "ComplexTypes": [
            "PolarChartCommonSeriesSettings"
          ],
          "Description": "An object that specifies configuration options for all series of the 'stackedBar' type in the chart."
        },
        "type": {
          "EnumName": "PolarChartSeriesType",
          "Description": "Sets a series type."
        }
      }
    },
    "ChartSeries": {
      "Description": "Specifies options for Chart widget series.",
      "IsCollection": true,
      "Options": {
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides arguments for series points."
        },
        "axis": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Binds the series to a value axis."
        },
        "border": {
          "Description": "Configures the series border (in area-like series) or the series point border (in bar-like and bubble series).",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series)."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series)."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series)."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series)."
            }
          }
        },
        "closeValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides close values for points of a financial series."
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the series."
        },
        "cornerRadius": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Makes bars look rounded. Applies only to bar-like series."
        },
        "dashStyle": {
          "EnumName": "DashStyle",
          "Description": "Specifies the dash style of the series line. Applies only to line-like series."
        },
        "highValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides high values for points of a financial series."
        },
        "hoverMode": {
          "EnumName": "ChartSeriesHoverMode",
          "Description": "Specifies series elements to be highlighted when a user points to a series."
        },
        "hoverStyle": {
          "Description": "Configures the appearance adopted by the series when a user points to it.",
          "Options": {
            "border": {
              "Description": "Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user points to the series."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user points to the series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the series in the hovered state."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies the dash style of the series line when the series is in the hovered state. Applies only to line-like series."
            },
            "hatching": {
              "Description": "Configures hatching that applies when a user points to the series.",
              "Options": {
                "direction": {
                  "EnumName": "HatchingDirection",
                  "Description": "Specifies the direction of hatching lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent hatching lines should be."
                },
                "step": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the distance between two side-by-side hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the pixel-measured width of the series line when the series is in the hovered state."
            }
          }
        },
        "ignoreEmptyPoints": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the series should ignore null data points."
        },
        "innerColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a filling color for the body of a series point that visualizes a non-reduced value. Applies only to candlestick series."
        },
        "label": {
          "Description": "Configures point labels.",
          "Options": {
            "alignment": {
              "EnumName": "HorizontalAlignment",
              "Description": "Aligns point labels in relation to their points."
            },
            "argumentFormat": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Formats the point argument before it will be displayed in the point label."
            },
            "argumentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | argumentFormat | precision instead."
            },
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of point labels. By default, point labels inherit the color from their points."
            },
            "border": {
              "Description": "Configures the borders of point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the border."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies the dash style of the border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes the border visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the border in pixels."
                }
              }
            },
            "connector": {
              "Description": "Configures the label connectors.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes the connectors visible. Applies only if label | visible is set to true."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of the connectors in pixels."
                }
              }
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Customizes the text displayed by point labels."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for point labels."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Formats the point value before it will be displayed in the point label."
            },
            "horizontalOffset": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Along with verticalOffset, shifts point labels from their initial positions."
            },
            "percentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | format | percentPrecision instead."
            },
            "position": {
              "EnumName": "RelativePosition",
              "Description": "Specifies whether to display point labels inside or outside of series points. Applies only to bubble, range-like and bar-like series."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | format | precision option instead."
            },
            "rotationAngle": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Rotates point labels."
            },
            "showForZeroValues": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to show labels for points with zero value. Applies only to bar-like series."
            },
            "verticalOffset": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Along with horizontalOffset, shifts point labels from their initial positions."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Makes the point labels visible."
            }
          }
        },
        "lowValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides low values for points of a financial series."
        },
        "maxLabelCount": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies a limit for the number of point labels."
        },
        "minBarSize": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the minimal possible height (or length if the chart is rotated) of a bar in pixels. Applies only to bar-like series."
        },
        "opacity": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies how transparent the series should be."
        },
        "openValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides open values for points of a financial series."
        },
        "pane": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which pane the series should belong to. Accepts the name of the pane."
        },
        "point": {
          "Description": "Configures series points in scatter, line- and area-like series.",
          "Options": {
            "border": {
              "Description": "Configures the appearance of the series point border in scatter, line- and area-like series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Makes the border visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets the width of the border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the series points."
            },
            "hoverMode": {
              "EnumName": "ChartPointInteractionMode",
              "Description": "Specifies series elements to be highlighted when a user pauses on a series point."
            },
            "hoverStyle": {
              "Description": "Configures the appearance adopted by a series point when a user pauses on it.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance of the point border when a user pauses on the point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the color of the point border when the point is in the hovered state."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Makes the border visible when a user pauses on the series point."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the point border when the point is in the hovered state."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of series points in the hovered state."
                },
                "size": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specfies the diameter of series points in the hovered state."
                }
              }
            },
            "image": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Substitutes the standard point symbols with an image.",
              "Options": {
                "height": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the height of the image used instead of a point marker.",
                  "Options": {
                    "rangeMaxPoint": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the height of the image that represents the maximum point in a range area series."
                    },
                    "rangeMinPoint": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the height of the image that represents the minimum point in a range area series."
                    }
                  }
                },
                "url": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the URL of the image to be used as a point marker.",
                  "Options": {
                    "rangeMaxPoint": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the URL of the image to be used as a maximum point marker."
                    },
                    "rangeMinPoint": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the URL of the image to be used as a maximum point marker."
                    }
                  }
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of an image that is used as a point marker.",
                  "Options": {
                    "rangeMaxPoint": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the image that represents the maximum point in a range area series."
                    },
                    "rangeMinPoint": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the image that represents the minimum point in a range area series."
                    }
                  }
                }
              }
            },
            "selectionMode": {
              "EnumName": "ChartPointInteractionMode",
              "Description": "Specifies series elements to be highlighted when a user selects a series point."
            },
            "selectionStyle": {
              "Description": "Configures the appearance of a selected series point.",
              "Options": {
                "border": {
                  "Description": "Configures the border of a selected point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the color of the point border when the point is selected."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Makes the border of a selected point visible."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Specifies the width of the point border when the point is selected."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of series points in the selected state."
                },
                "size": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specfies the diameter of series points in the selected state."
                }
              }
            },
            "size": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the diameter of series points in pixels."
            },
            "symbol": {
              "EnumName": "PointSymbol",
              "Description": "Specifies which symbol should represent series points in scatter, line- and area-like series."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Makes the series points visible."
            }
          }
        },
        "rangeValue1Field": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Coupled with the rangeValue2Field option, specifies which data source field provides values for a range-like series."
        },
        "rangeValue2Field": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Coupled with the rangeValue1Field option, specifies which data source field provides values for a range-like series."
        },
        "reduction": {
          "Description": "Specifies reduction options for financial series.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the points whose price has decreased in comparison to the price of the previous point."
            },
            "level": {
              "EnumName": "FinancialChartReductionLevel",
              "Description": "Specifies whether high, low, open or close prices of points should be compared."
            }
          }
        },
        "selectionMode": {
          "EnumName": "ChartSeriesSelectionMode",
          "Description": "Specifies series elements to be highlighted when a user selects a series."
        },
        "selectionStyle": {
          "Description": "Configures the appearance adopted by the series when a user selects it.",
          "Options": {
            "border": {
              "Description": "Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user selects the series."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user selects the series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the series in the selected state."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies the dash style of the series line when the series is in the selected state. Applies only to line-like series."
            },
            "hatching": {
              "Description": "Configures hatching that applies when a user selects the series.",
              "Options": {
                "direction": {
                  "EnumName": "HatchingDirection",
                  "Description": "Specifies the direction of hatching lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies how transparent hatching lines should be."
                },
                "step": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the distance between two side-by-side hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the pixel-measured width of the series line when the series is in the selected state."
            }
          }
        },
        "showInLegend": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether to show the series in the legend or not."
        },
        "sizeField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides size values for bubbles. Required by and applies only to bubble series."
        },
        "stack": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which stack the series should belongs to. Applies only to stacked bar and full-stacked bar series."
        },
        "tagField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides auxiliary data for series points."
        },
        "valueErrorBar": {
          "Description": "Configures error bars.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of error bars."
            },
            "displayMode": {
              "EnumName": "ValueErrorBarDisplayMode",
              "Description": "Specifies whether error bars must be displayed in full or partially."
            },
            "edgeLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the lines that indicate the error bar edges."
            },
            "highValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies which data field provides high error values."
            },
            "lineWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the error bar line."
            },
            "lowValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies which data field provides low error values."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies how trasparent error bars should be."
            },
            "type": {
              "EnumName": "ValueErrorBarType",
              "Description": "Specifies how error bar values must be calculated."
            },
            "value": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the value to be used for generating error bars."
            }
          }
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides values for series points."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the series is visible or not."
        },
        "width": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the width of the series line in pixels. Applies only to line-like series."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name that identifies the series."
        },
        "tag": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies data about a series."
        },
        "type": {
          "EnumName": "SeriesType",
          "Description": "Sets the series type."
        }
      }
    },
    "PieChartSeries": {
      "Description": "Specifies options for the series of the PieChart widget.",
      "IsCollection": true,
      "Options": {
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides arguments for series points."
        },
        "argumentType": {
          "EnumName": "ChartDataType",
          "Description": "Specifies the required type for series arguments."
        },
        "border": {
          "Description": "An object defining the series border configuration options.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a border color for a series."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies a dash style for the border of a series point."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Sets border visibility for a series."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Sets a border width for a series in pixels."
            }
          }
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a series color."
        },
        "hoverMode": {
          "EnumName": "PieChartSeriesInteractionMode",
          "Description": "Specifies the chart elements to highlight when a series is hovered over."
        },
        "hoverStyle": {
          "Description": "An object defining configuration options for a hovered series.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a hovered series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for the series when it is hovered over."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for the border of a series point when this point is hovered over."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets border visibility for a hovered series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a border width for a hovered series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for the series when it is hovered over."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a point is hovered over.",
              "Options": {
                "direction": {
                  "EnumName": "HatchingDirection",
                  "Description": "Specifies how to apply hatching to highlight the hovered point."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the distance between two hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            }
          }
        },
        "innerRadius": {
          "PrimitiveTypes": [
            "double"
          ],
          "IsDeprecated": true,
          "Description": "Use the innerRadius option instead."
        },
        "label": {
          "Description": "An object defining the label configuration options.",
          "Options": {
            "argumentFormat": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for arguments displayed by point labels."
            },
            "argumentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | argumentFormat | precision instead."
            },
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a background color for point labels."
            },
            "border": {
              "Description": "Specifies border options for point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a border color for point labels."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not borders are visible in point labels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the border width for point labels."
                }
              }
            },
            "connector": {
              "Description": "Specifies connector options for series point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of label connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not label connectors are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of label connectors."
                }
              }
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by point labels."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in point labels."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for the text displayed by point labels."
            },
            "percentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | format | percentPrecision instead."
            },
            "position": {
              "EnumName": "PieChartLabelPosition",
              "Description": "Specifies a label position relative to the chart."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | format | precision option instead."
            },
            "radialOffset": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies how to shift labels from their initial position in a radial direction in pixels."
            },
            "rotationAngle": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the angle used to rotate point labels from their initial position."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies the visibility of point labels."
            }
          }
        },
        "maxLabelCount": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed."
        },
        "minSegmentSize": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a minimal size of a displayed pie segment."
        },
        "segmentsDirection": {
          "IsDeprecated": true,
          "EnumName": "PieChartSegmentsDirection",
          "Description": "Use the segmentsDirection option instead."
        },
        "selectionMode": {
          "EnumName": "PieChartSeriesInteractionMode",
          "Description": "Specifies the chart elements to highlight when the series is selected."
        },
        "selectionStyle": {
          "Description": "An object defining configuration options for the series when it is selected.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a selected series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for a selected series."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for the border of a selected series point."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets a border visibility for a selected series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a border width for a selected series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for a series when it is selected."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a point is selected.",
              "Options": {
                "direction": {
                  "EnumName": "HatchingDirection",
                  "Description": "Specifies how to apply hatching to highlight the selected point."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the distance between two hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            }
          }
        },
        "smallValuesGrouping": {
          "Description": "Specifies chart segment grouping options.",
          "Options": {
            "groupName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the grouped chart segment. This name represents the segment in the chart legend."
            },
            "mode": {
              "EnumName": "SmallValuesGroupingMode",
              "Description": "Specifies the segment grouping mode."
            },
            "threshold": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies a threshold for segment values."
            },
            "topCount": {
              "PrimitiveTypes": [
                "int32"
              ],
              "Description": "Specifies how many segments must not be grouped."
            }
          }
        },
        "startAngle": {
          "PrimitiveTypes": [
            "double"
          ],
          "IsDeprecated": true,
          "Description": "Use the startAngle option instead."
        },
        "tagField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides data about a point."
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides values for series points."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name that identifies the series."
        },
        "tag": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies data about a series."
        },
        "type": {
          "IsDeprecated": true,
          "EnumName": "PieChartType",
          "Description": "Use the type option instead."
        }
      }
    },
    "PolarChartSeries": {
      "Description": "Specifies options for PolarChart widget series.",
      "IsCollection": true,
      "Options": {
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides arguments for series points."
        },
        "border": {
          "Description": "An object defining the series border configuration options.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a border color for a series."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies a dash style for the borders of series points."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Sets border visibility for a series."
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Sets a border width for a series in pixels."
            }
          }
        },
        "closed": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to close the chart by joining the end point with the first point."
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a series color."
        },
        "dashStyle": {
          "EnumName": "DashStyle",
          "Description": "Specifies the dash style of the series' line."
        },
        "hoverMode": {
          "EnumName": "ChartSeriesHoverMode",
          "Description": "Specifies the series elements to highlight when a series is hovered over."
        },
        "hoverStyle": {
          "Description": "An object defining configuration options for a hovered series.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a hovered series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for a hovered series."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets a border visibility for a hovered series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a border width for a hovered series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for a series when it is hovered over."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies the dash style for the line in a hovered series."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a series is hovered over.",
              "Options": {
                "direction": {
                  "EnumName": "HatchingDirection",
                  "Description": "Specifies how to apply hatching to highlight the hovered series."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the distance between hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of a line in a hovered series."
            }
          }
        },
        "ignoreEmptyPoints": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a chart ignores null data points or not."
        },
        "label": {
          "Description": "An object defining the label configuration options.",
          "Options": {
            "argumentFormat": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for arguments displayed by point labels."
            },
            "argumentPrecision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | argumentFormat | precision instead."
            },
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a background color for point labels."
            },
            "border": {
              "Description": "Specifies border options for point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a border color for point labels."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether borders are visible in point labels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the border width for point labels."
                }
              }
            },
            "connector": {
              "Description": "Specifies connector options for series point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of label connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Indicates whether or not label connectors are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of label connectors."
                }
              }
            },
            "customizeText": {
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by point labels."
            },
            "font": {
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in point labels."
            },
            "format": {
              "PrimitiveTypes": [
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "EnumName": "Format",
              "Description": "Specifies a format for the text displayed by point labels."
            },
            "position": {
              "EnumName": "RelativePosition",
              "Description": "Specifies a label position in bar-like series."
            },
            "precision": {
              "PrimitiveTypes": [
                "double"
              ],
              "IsDeprecated": true,
              "Description": "Use the series | label | format | precision option instead."
            },
            "rotationAngle": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the angle used to rotate point labels from their initial position."
            },
            "showForZeroValues": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether or not to show a label when the point has a zero value."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies the visibility of point labels."
            }
          }
        },
        "maxLabelCount": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed."
        },
        "minBarSize": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the minimal length of a displayed bar in pixels."
        },
        "opacity": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies opacity for a series."
        },
        "point": {
          "Description": "An object defining configuration options for points in line and area series.",
          "Options": {
            "border": {
              "Description": "Specifies border options for points in the line and area series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for points in the line and area series."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets border visibility for points in the line and area series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a border width for points in the line or area series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the points color."
            },
            "hoverMode": {
              "EnumName": "ChartPointInteractionMode",
              "Description": "Specifies what series points to highlight when a point is hovered over."
            },
            "hoverStyle": {
              "Description": "An object defining configuration options for a hovered point.",
              "Options": {
                "border": {
                  "Description": "An object defining the border options for a hovered point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Sets a border color for a hovered point."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Sets border visibility for a hovered point."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Sets a border width for a hovered point."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a color for a point when it is hovered over."
                },
                "size": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the diameter of a hovered point in the series that represents data points as symbols (not as bars for instance)."
                }
              }
            },
            "image": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "An object specifying the parameters of an image that is used as a point marker.",
              "Options": {
                "height": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the height of an image that is used as a point marker."
                },
                "url": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a URL leading to the image to be used as a point marker."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of an image that is used as a point marker."
                }
              }
            },
            "selectionMode": {
              "EnumName": "ChartPointInteractionMode",
              "Description": "Specifies what series points to highlight when a point is selected."
            },
            "selectionStyle": {
              "Description": "An object defining configuration options for a selected point.",
              "Options": {
                "border": {
                  "Description": "An object defining the border options for a selected point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Sets a border color for a selected point."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "bool"
                      ],
                      "Description": "Sets border visibility for a selected point."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "double"
                      ],
                      "Description": "Sets a border width for a selected point."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a color for a point when it is selected."
                },
                "size": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the diameter of a selected point in the series that represents data points as symbols (not as bars for instance)."
                }
              }
            },
            "size": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the point diameter in pixels for those series that represent data points as symbols (not as bars for instance)."
            },
            "symbol": {
              "EnumName": "VizPointSymbol",
              "Description": "Specifies a symbol for presenting points of the line and area series."
            },
            "visible": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies the points visibility for a line and area series."
            }
          }
        },
        "selectionMode": {
          "EnumName": "ChartSeriesSelectionMode",
          "Description": "Specifies the series elements to highlight when the series is selected."
        },
        "selectionStyle": {
          "Description": "An object defining configuration options for a selected series.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a selected series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for a selected series."
                },
                "dashStyle": {
                  "EnumName": "DashStyle",
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "bool"
                  ],
                  "Description": "Sets border visibility for a selected series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Sets a border width for a selected series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for a series when it is selected."
            },
            "dashStyle": {
              "EnumName": "DashStyle",
              "Description": "Specifies the dash style for the line in a selected series."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a series is selected.",
              "Options": {
                "direction": {
                  "EnumName": "HatchingDirection",
                  "Description": "Specifies how to apply hatching to highlight a selected series."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the distance between hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "double"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of a line in a selected series."
            }
          }
        },
        "showInLegend": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to show the series in the chart's legend."
        },
        "stack": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the stack where the values of the 'stackedBar' series must be located."
        },
        "tagField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides data about a point."
        },
        "valueErrorBar": {
          "Description": "Configures error bars.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of error bars."
            },
            "displayMode": {
              "EnumName": "ValueErrorBarDisplayMode",
              "Description": "Specifies whether error bars must be displayed in full or partially."
            },
            "edgeLength": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the length of the lines that indicate the error bar edges."
            },
            "highValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data field that provides data for high error values."
            },
            "lineWidth": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the width of the error bar line."
            },
            "lowValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data field that provides data for low error values."
            },
            "opacity": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the opacity of error bars."
            },
            "type": {
              "EnumName": "ValueErrorBarType",
              "Description": "Specifies how error bar values must be calculated."
            },
            "value": {
              "PrimitiveTypes": [
                "double"
              ],
              "Description": "Specifies the value to be used for generating error bars."
            }
          }
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides values for series points."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies the visibility of a series."
        },
        "width": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies a line width."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name that identifies the series."
        },
        "tag": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies data about a series."
        },
        "type": {
          "EnumName": "PolarChartSeriesType",
          "Description": "Sets the series type."
        }
      }
    },
    "DataGridColumn": {
      "Description": "An array of grid columns.",
      "IsCollection": true,
      "Options": {
        "alignment": {
          "EnumName": "HorizontalAlignment",
          "Description": "Aligns the content of the column."
        },
        "allowEditing": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can edit values in the column at runtime. By default, inherits the value of the editing | allowUpdating option."
        },
        "allowFiltering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether data can be filtered by this column. Applies only if filterRow | visible is true."
        },
        "allowFixing": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can fix the column at runtime. Applies only if columnFixing | enabled is true."
        },
        "allowHeaderFiltering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the header filter can be used to filter data by this column. Applies only if headerFilter | visible is true. By default, inherits the value of the allowFiltering option."
        },
        "allowHiding": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can hide the column using the column chooser at runtime. Applies only if columnChooser | enabled is true."
        },
        "allowReordering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether this column can be used in column reordering at runtime. Applies only if allowColumnReordering is true."
        },
        "allowResizing": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can resize the column at runtime. Applies only if allowColumnResizing is true."
        },
        "allowSearch": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether this column can be searched. Applies only if searchPanel | visible is true. Inherits the value of the allowFiltering option by default."
        },
        "allowSorting": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can sort rows by this column at runtime. Applies only if sorting | mode differs from \"none\"."
        },
        "calculateCellValue": {
          "IsFunc": true,
          "Description": "Calculates custom values for column cells."
        },
        "calculateDisplayValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Calculates custom display values for column cells. Used when display values should differ from values for editing."
        },
        "calculateFilterExpression": {
          "IsFunc": true,
          "Description": "Specifies the column's custom filtering rules."
        },
        "calculateSortValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Calculates custom values to be used in sorting."
        },
        "caption": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a caption for the column."
        },
        "cellTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for column cells."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the column."
        },
        "customizeText": {
          "IsFunc": true,
          "Description": "Customizes the text displayed in column cells."
        },
        "dataField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Binds the column to a field of the dataSource."
        },
        "dataType": {
          "EnumName": "GridColumnDataType",
          "Description": "Casts column values to a specific data type."
        },
        "editCellTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for column cells in the editing state."
        },
        "editorOptions": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies options for the underlain editor."
        },
        "encodeHtml": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether HTML tags are displayed as plain text or applied to the values of the column."
        },
        "falseText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "In a boolean column, replaces all false items with a specified text. Applies only if showEditorAlways option is false."
        },
        "filterOperations": {
          "IsCollection": true,
          "EnumName": "FilterOperations",
          "SingularName": "filterOperation",
          "Description": "Specifies a set of available filter operations. Applies only if filterRow | visible and allowFiltering are true."
        },
        "filterType": {
          "EnumName": "FilterType",
          "Description": "Specifies whether a user changes the current filter by including (selecting) or excluding (clearing the selection of) values. Applies only if headerFilter | visible and allowHeaderFiltering are true."
        },
        "filterValue": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies a filter value for the column."
        },
        "filterValues": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "filterValue",
          "Description": "Specifies filter values for the column's header filter."
        },
        "fixed": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Fixes the column."
        },
        "fixedPosition": {
          "EnumName": "HorizontalEdge",
          "Description": "Specifies the widget's edge to which the column is fixed. Applies only if columns] | [fixed is true."
        },
        "format": {
          "PrimitiveTypes": [
            "string"
          ],
          "ComplexTypes": [
            "Format"
          ],
          "EnumName": "Format",
          "Description": "Specifies a format for the values displayed in the column."
        },
        "formItem": {
          "ComplexTypes": [
            "FormSimpleItem"
          ],
          "Description": "Configures the form item produced by this column in the editing state. Used only if editing | mode is \"form\" or \"popup\"."
        },
        "headerCellTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for the column header."
        },
        "headerFilter": {
          "Description": "Specifies data settings for the header filter.",
          "Options": {
            "dataSource": {
              "IsFunc": true,
              "IsDataSource": true,
              "Description": "Specifies a data source for the header filter."
            },
            "groupInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "HeaderFilterGroupInterval",
              "Description": "Specifies how the header filter combines values into groups."
            }
          }
        },
        "hidingPriority": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the order in which columns are hidden when the widget adapts to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is \"widget\"."
        },
        "isBand": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the column bands other columns or not."
        },
        "lookup": {
          "Description": "Specifies options of a lookup column.",
          "Options": {
            "allowClearing": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can nullify values of the lookup column."
            },
            "dataSource": {
              "IsFunc": true,
              "IsDataSource": true,
              "Description": "Specifies the data source for the lookup column."
            },
            "displayExpr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data source field whose values must be displayed."
            },
            "valueExpr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data source field whose values must be replaced."
            }
          }
        },
        "minWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the minimum width of the column."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the identifier of the column."
        },
        "ownerBand": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the band column that owns the current column. Accepts the index of the band column in the columns array."
        },
        "selectedFilterOperation": {
          "EnumName": "FilterOperations",
          "Description": "Specifies the selected filter operation for the column."
        },
        "setCellValue": {
          "IsFunc": true,
          "Description": "Specifies a function to be invoked after the user has edited a cell value, but before it will be saved in the data source."
        },
        "showEditorAlways": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the column displays its values using editors."
        },
        "showInColumnChooser": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the column chooser can contain the column header."
        },
        "sortIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the index according to which columns participate in sorting."
        },
        "sortOrder": {
          "EnumName": "SortOrder",
          "Description": "Specifies the sort order of column values."
        },
        "trueText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "In a boolean column, replaces all true items with a specified text. Applies only if showEditorAlways option is false."
        },
        "validationRules": {
          "ComplexTypes": [
            "CompareRule",
            "CustomRule",
            "EmailRule",
            "NumericRule",
            "PatternRule",
            "RangeRule",
            "RequiredRule",
            "StringLengthRule"
          ],
          "IsCollection": true,
          "SingularName": "validationRule",
          "Description": "Specifies validation rules to be checked on updating cell values."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the column is visible or not."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the position of the column regarding other columns in the resulting widget."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the column's width in pixels or percentages. Ignored if less than minWidth."
        },
        "allowExporting": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether data from this column should be exported."
        },
        "allowGrouping": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the user can group data by values of this column. Applies only when grouping is enabled."
        },
        "autoExpandGroup": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether groups appear expanded or not when records are grouped by a specific column. Setting this option makes sense only when grouping is allowed for this column."
        },
        "calculateGroupValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a field name or a function that returns a field name or a value to be used for grouping column cells."
        },
        "columns": {
          "ComplexTypes": [
            "DataGridColumn"
          ],
          "IsCollection": true,
          "SingularName": "column",
          "Description": "An array of grid columns."
        },
        "groupCellTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for the group cell of a grid column."
        },
        "groupIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the index of a column when grid records are grouped by the values of this column."
        },
        "precision": {
          "PrimitiveTypes": [
            "double"
          ],
          "IsDeprecated": true,
          "Description": "Use the format | precision option instead."
        },
        "showWhenGrouped": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not to display the column when grid records are grouped by it."
        }
      }
    },
    "TreeListColumn": {
      "Description": "Configures columns.",
      "IsCollection": true,
      "Options": {
        "alignment": {
          "EnumName": "HorizontalAlignment",
          "Description": "Aligns the content of the column."
        },
        "allowEditing": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can edit values in the column at runtime. By default, inherits the value of the editing | allowUpdating option."
        },
        "allowFiltering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether data can be filtered by this column. Applies only if filterRow | visible is true."
        },
        "allowFixing": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can fix the column at runtime. Applies only if columnFixing | enabled is true."
        },
        "allowHeaderFiltering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the header filter can be used to filter data by this column. Applies only if headerFilter | visible is true. By default, inherits the value of the allowFiltering option."
        },
        "allowHiding": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can hide the column using the column chooser at runtime. Applies only if columnChooser | enabled is true."
        },
        "allowReordering": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether this column can be used in column reordering at runtime. Applies only if allowColumnReordering is true."
        },
        "allowResizing": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can resize the column at runtime. Applies only if allowColumnResizing is true."
        },
        "allowSearch": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether this column can be searched. Applies only if searchPanel | visible is true. Inherits the value of the allowFiltering option by default."
        },
        "allowSorting": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a user can sort rows by this column at runtime. Applies only if sorting | mode differs from \"none\"."
        },
        "calculateCellValue": {
          "IsFunc": true,
          "Description": "Calculates custom values for column cells."
        },
        "calculateDisplayValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Calculates custom display values for column cells. Used when display values should differ from values for editing."
        },
        "calculateFilterExpression": {
          "IsFunc": true,
          "Description": "Specifies the column's custom filtering rules."
        },
        "calculateSortValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Calculates custom values to be used in sorting."
        },
        "caption": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a caption for the column."
        },
        "cellTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for column cells."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the column."
        },
        "customizeText": {
          "IsFunc": true,
          "Description": "Customizes the text displayed in column cells."
        },
        "dataField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Binds the column to a field of the dataSource."
        },
        "dataType": {
          "EnumName": "GridColumnDataType",
          "Description": "Casts column values to a specific data type."
        },
        "editCellTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for column cells in the editing state."
        },
        "editorOptions": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies options for the underlain editor."
        },
        "encodeHtml": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether HTML tags are displayed as plain text or applied to the values of the column."
        },
        "falseText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "In a boolean column, replaces all false items with a specified text. Applies only if showEditorAlways option is false."
        },
        "filterOperations": {
          "IsCollection": true,
          "EnumName": "FilterOperations",
          "SingularName": "filterOperation",
          "Description": "Specifies a set of available filter operations. Applies only if filterRow | visible and allowFiltering are true."
        },
        "filterType": {
          "EnumName": "FilterType",
          "Description": "Specifies whether a user changes the current filter by including (selecting) or excluding (clearing the selection of) values. Applies only if headerFilter | visible and allowHeaderFiltering are true."
        },
        "filterValue": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies a filter value for the column."
        },
        "filterValues": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "filterValue",
          "Description": "Specifies filter values for the column's header filter."
        },
        "fixed": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Fixes the column."
        },
        "fixedPosition": {
          "EnumName": "HorizontalEdge",
          "Description": "Specifies the widget's edge to which the column is fixed. Applies only if columns] | [fixed is true."
        },
        "format": {
          "PrimitiveTypes": [
            "string"
          ],
          "ComplexTypes": [
            "Format"
          ],
          "EnumName": "Format",
          "Description": "Specifies a format for the values displayed in the column."
        },
        "formItem": {
          "ComplexTypes": [
            "FormSimpleItem"
          ],
          "Description": "Configures the form item produced by this column in the editing state. Used only if editing | mode is \"form\" or \"popup\"."
        },
        "headerCellTemplate": {
          "IsTemplate": true,
          "Description": "Specifies a custom template for the column header."
        },
        "headerFilter": {
          "Description": "Specifies data settings for the header filter.",
          "Options": {
            "dataSource": {
              "IsFunc": true,
              "IsDataSource": true,
              "Description": "Specifies a data source for the header filter."
            },
            "groupInterval": {
              "PrimitiveTypes": [
                "double"
              ],
              "EnumName": "HeaderFilterGroupInterval",
              "Description": "Specifies how the header filter combines values into groups."
            }
          }
        },
        "hidingPriority": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the order in which columns are hidden when the widget adapts to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is \"widget\"."
        },
        "isBand": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the column bands other columns or not."
        },
        "lookup": {
          "Description": "Specifies options of a lookup column.",
          "Options": {
            "allowClearing": {
              "PrimitiveTypes": [
                "bool"
              ],
              "Description": "Specifies whether a user can nullify values of the lookup column."
            },
            "dataSource": {
              "IsFunc": true,
              "IsDataSource": true,
              "Description": "Specifies the data source for the lookup column."
            },
            "displayExpr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data source field whose values must be displayed."
            },
            "valueExpr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data source field whose values must be replaced."
            }
          }
        },
        "minWidth": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the minimum width of the column."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the identifier of the column."
        },
        "ownerBand": {
          "PrimitiveTypes": [
            "double"
          ],
          "Description": "Specifies the band column that owns the current column. Accepts the index of the band column in the columns array."
        },
        "selectedFilterOperation": {
          "EnumName": "FilterOperations",
          "Description": "Specifies the selected filter operation for the column."
        },
        "setCellValue": {
          "IsFunc": true,
          "Description": "Specifies a function to be invoked after the user has edited a cell value, but before it will be saved in the data source."
        },
        "showEditorAlways": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the column displays its values using editors."
        },
        "showInColumnChooser": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the column chooser can contain the column header."
        },
        "sortIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the index according to which columns participate in sorting."
        },
        "sortOrder": {
          "EnumName": "SortOrder",
          "Description": "Specifies the sort order of column values."
        },
        "trueText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "In a boolean column, replaces all true items with a specified text. Applies only if showEditorAlways option is false."
        },
        "validationRules": {
          "ComplexTypes": [
            "CompareRule",
            "CustomRule",
            "EmailRule",
            "NumericRule",
            "PatternRule",
            "RangeRule",
            "RequiredRule",
            "StringLengthRule"
          ],
          "IsCollection": true,
          "SingularName": "validationRule",
          "Description": "Specifies validation rules to be checked on updating cell values."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether the column is visible or not."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "int32"
          ],
          "Description": "Specifies the position of the column regarding other columns in the resulting widget."
        },
        "width": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Specifies the column's width in pixels or percentages. Ignored if less than minWidth."
        },
        "columns": {
          "ComplexTypes": [
            "TreeListColumn"
          ],
          "IsCollection": true,
          "SingularName": "column",
          "Description": "Configures columns."
        }
      }
    },
    "MenuItem": {
      "Description": "Holds an array of menu items.",
      "IsCollection": true,
      "Options": {
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the menu item is disabled."
        },
        "template": {
          "IsTemplate": true,
          "Description": "Specifies an item template that should be used to render this item only."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text inserted into the item element."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the menu item is visible."
        },
        "beginGroup": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a group separator is displayed over the item."
        },
        "closeMenuOnClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies if a menu is closed when a user clicks the item."
        },
        "icon": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The name of an icon to be displayed on the menu item."
        },
        "iconSrc": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsDeprecated": true,
          "Description": "Use the icon field instead."
        },
        "items": {
          "ComplexTypes": [
            "MenuItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "Holds an array of menu items."
        },
        "selectable": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not a user can select a menu item."
        },
        "selected": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the item is selected."
        }
      }
    },
    "ContextMenuItem": {
      "Description": "Holds an array of menu items.",
      "IsCollection": true,
      "Options": {
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the menu item is disabled."
        },
        "template": {
          "IsTemplate": true,
          "Description": "Specifies an item template that should be used to render this item only."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text inserted into the item element."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the menu item is visible."
        },
        "beginGroup": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether a group separator is displayed over the item."
        },
        "closeMenuOnClick": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies if a menu is closed when a user clicks the item."
        },
        "icon": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The name of an icon to be displayed on the menu item."
        },
        "iconSrc": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsDeprecated": true,
          "Description": "Use the icon field instead."
        },
        "items": {
          "ComplexTypes": [
            "ContextMenuItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "Holds an array of menu items."
        },
        "selectable": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not a user can select a menu item."
        },
        "selected": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the item is selected."
        }
      }
    },
    "TreeViewItem": {
      "Description": "An array of items displayed by the widget.",
      "IsCollection": true,
      "Options": {
        "disabled": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not a widget item must be displayed disabled."
        },
        "html": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies html code inserted into the widget item element."
        },
        "template": {
          "IsTemplate": true,
          "Description": "Specifies an item template that should be used to render this item only."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text displayed for the widget item."
        },
        "visible": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not a widget item must be displayed."
        },
        "expanded": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the tree view item is displayed expanded."
        },
        "hasItems": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the tree view item has children."
        },
        "icon": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The name of an icon to be displayed on the tree view item."
        },
        "iconSrc": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsDeprecated": true,
          "Description": "Use the icon field instead."
        },
        "items": {
          "ComplexTypes": [
            "TreeViewItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "Holds an array of tree view items."
        },
        "parentId": {
          "PrimitiveTypes": [
            "double",
            "string"
          ],
          "Description": "Holds the key of the parent item."
        },
        "selected": {
          "PrimitiveTypes": [
            "bool"
          ],
          "Description": "Specifies whether or not the tree view item is displayed selected."
        }
      }
    }
  },
  "Enums": {
    "HorizontalAlignment": {
      "Items": [
        {
          "Name": "center"
        },
        {
          "Name": "left"
        },
        {
          "Name": "right"
        }
      ]
    },
    "VerticalAlignment": {
      "Items": [
        {
          "Name": "bottom"
        },
        {
          "Name": "center"
        },
        {
          "Name": "top"
        }
      ]
    },
    "Position": {
      "Items": [
        {
          "Name": "bottom"
        },
        {
          "Name": "left"
        },
        {
          "Name": "right"
        },
        {
          "Name": "top"
        }
      ]
    },
    "Direction": {
      "Items": [
        {
          "Name": "bottom"
        },
        {
          "Name": "left"
        },
        {
          "Name": "right"
        },
        {
          "Name": "top"
        }
      ]
    },
    "BoxAlign": {
      "Items": [
        {
          "Name": "center"
        },
        {
          "Name": "end"
        },
        {
          "Name": "space-around"
        },
        {
          "Name": "space-between"
        },
        {
          "Name": "start"
        }
      ]
    },
    "BoxCrossAlign": {
      "Items": [
        {
          "Name": "center"
        },
        {
          "Name": "end"
        },
        {
          "Name": "start"
        },
        {
          "Name": "stretch"
        }
      ]
    },
    "BoxDirection": {
      "Items": [
        {
          "Name": "col"
        },
        {
          "Name": "row"
        }
      ]
    },
    "PositionResolveCollision": {
      "Items": [
        {
          "Name": "fit"
        },
        {
          "Name": "flip"
        },
        {
          "Name": "flipfit"
        },
        {
          "Name": "none"
        }
      ],
      "Renamings": {
        "flipfit": "flipFit"
      }
    },
    "PositionResolveCollisionXY": {
      "Items": [
        {
          "Name": "fit"
        },
        {
          "Name": "fit flip"
        },
        {
          "Name": "fit flipfit"
        },
        {
          "Name": "fit none"
        },
        {
          "Name": "flip"
        },
        {
          "Name": "flip fit"
        },
        {
          "Name": "flip none"
        },
        {
          "Name": "flipfit"
        },
        {
          "Name": "flipfit fit"
        },
        {
          "Name": "flipfit none"
        },
        {
          "Name": "none"
        },
        {
          "Name": "none fit"
        },
        {
          "Name": "none flip"
        },
        {
          "Name": "none flipfit"
        }
      ]
    },
    "PositionAlignment": {
      "Items": [
        {
          "Name": "bottom"
        },
        {
          "Name": "center"
        },
        {
          "Name": "left"
        },
        {
          "Name": "left bottom"
        },
        {
          "Name": "left top"
        },
        {
          "Name": "right"
        },
        {
          "Name": "right bottom"
        },
        {
          "Name": "right top"
        },
        {
          "Name": "top"
        }
      ]
    },
    "AnimationType": {
      "Items": [
        {
          "Name": "css"
        },
        {
          "Name": "fade"
        },
        {
          "Name": "fadeIn"
        },
        {
          "Name": "fadeOut"
        },
        {
          "Name": "pop"
        },
        {
          "Name": "slide"
        },
        {
          "Name": "slideIn"
        },
        {
          "Name": "slideOut"
        }
      ]
    },
    "AnimationEasing": {
      "Items": [
        {
          "Name": "ease"
        },
        {
          "Name": "ease-in"
        },
        {
          "Name": "ease-in-out"
        },
        {
          "Name": "ease-out"
        },
        {
          "Name": "linear"
        },
        {
          "Name": "step-end"
        },
        {
          "Name": "step-start"
        },
        {
          "Name": "swing"
        }
      ]
    },
    "FilterOperations": {
      "Items": [
        {
          "Name": "="
        },
        {
          "Name": "<>"
        },
        {
          "Name": "<"
        },
        {
          "Name": "<="
        },
        {
          "Name": ">"
        },
        {
          "Name": ">="
        },
        {
          "Name": "between"
        },
        {
          "Name": "contains"
        },
        {
          "Name": "endswith"
        },
        {
          "Name": "notcontains"
        },
        {
          "Name": "startswith"
        }
      ],
      "Renamings": {
        "=": "equal",
        ">": "greaterThan",
        "<": "lessThan",
        ">=": "greaterThanOrEqual",
        "<=": "lessThanOrEqual",
        "<>": "notEqual",
        "notcontains": "notContains",
        "contains": "contains",
        "startswith": "startsWith",
        "endswith": "endsWith"
      }
    },
    "ButtonType": {
      "Items": [
        {
          "Name": "back"
        },
        {
          "Name": "danger"
        },
        {
          "Name": "default"
        },
        {
          "Name": "normal"
        },
        {
          "Name": "success"
        }
      ]
    },
    "DropDownSearchMode": {
      "Items": [
        {
          "Name": "contains"
        },
        {
          "Name": "startswith"
        }
      ],
      "Renamings": {
        "startswith": "startsWith"
      }
    },
    "NumberBoxMode": {
      "Items": [
        {
          "Name": "number"
        },
        {
          "Name": "text"
        }
      ]
    },
    "VerticalEdge": {
      "Items": [
        {
          "Name": "bottom"
        },
        {
          "Name": "top"
        }
      ]
    },
    "HorizontalEdge": {
      "Items": [
        {
          "Name": "left"
        },
        {
          "Name": "right"
        }
      ]
    },
    "SliderTooltipShowMode": {
      "Items": [
        {
          "Name": "always"
        },
        {
          "Name": "onHover"
        }
      ]
    },
    "ValidationMessageMode": {
      "Items": [
        {
          "Name": "always"
        },
        {
          "Name": "auto"
        }
      ]
    },
    "Toolbar": {
      "Items": [
        {
          "Name": "bottom"
        },
        {
          "Name": "top"
        }
      ]
    },
    "ToolbarItemLocation": {
      "Items": [
        {
          "Name": "after"
        },
        {
          "Name": "before"
        },
        {
          "Name": "center"
        }
      ]
    },
    "ToolbarRenderMode": {
      "Items": [
        {
          "Name": "bottomToolbar"
        },
        {
          "Name": "topToolbar"
        }
      ]
    },
    "ToolbarItemWidget": {
      "Items": [
        {
          "Name": "dxAutocomplete"
        },
        {
          "Name": "dxButton"
        },
        {
          "Name": "dxCheckBox"
        },
        {
          "Name": "dxDateBox"
        },
        {
          "Name": "dxDropDownMenu"
        },
        {
          "Name": "dxMenu"
        },
        {
          "Name": "dxSelectBox"
        },
        {
          "Name": "dxTabs"
        },
        {
          "Name": "dxTextBox"
        }
      ],
      "Renamings": {
        "dxAutocomplete": "Autocomplete",
        "dxButton": "Button",
        "dxCheckBox": "CheckBox",
        "dxDateBox": "DateBox",
        "dxDropDownMenu": "DropDownMenu",
        "dxMenu": "Menu",
        "dxSelectBox": "SelectBox",
        "dxTabs": "Tabs",
        "dxTextBox": "TextBox"
      }
    },
    "SelectionMode": {
      "Items": [
        {
          "Name": "multiple"
        },
        {
          "Name": "none"
        },
        {
          "Name": "single"
        }
      ]
    },
    "SelectAllMode": {
      "Items": [
        {
          "Name": "allPages"
        },
        {
          "Name": "page"
        }
      ]
    },
    "NavSelectionMode": {
      "Items": [
        {
          "Name": "multiple"
        },
        {
          "Name": "single"
        }
      ]
    },
    "ListSelectionMode": {
      "Items": [
        {
          "Name": "all"
        },
        {
          "Name": "multiple"
        },
        {
          "Name": "none"
        },
        {
          "Name": "single"
        }
      ]
    },
    "MenuSelectionMode": {
      "Items": [
        {
          "Name": "none"
        },
        {
          "Name": "single"
        }
      ]
    },
    "GridSortingMode": {
      "Items": [
        {
          "Name": "multiple"
        },
        {
          "Name": "none"
        },
        {
          "Name": "single"
        }
      ]
    },
    "ShowSubmenuMode": {
      "Items": [
        {
          "Name": "onClick"
        },
        {
          "Name": "onHover"
        }
      ]
    },
    "SubmenuDirection": {
      "Items": [
        {
          "Name": "auto"
        },
        {
          "Name": "leftOrTop"
        },
        {
          "Name": "rightOrBottom"
        }
      ]
    },
    "ContextMenuSubmenuDirection": {
      "Items": [
        {
          "Name": "auto"
        },
        {
          "Name": "left"
        },
        {
          "Name": "right"
        }
      ]
    },
    "ListItemDeleteMode": {
      "Items": [
        {
          "Name": "context"
        },
        {
          "Name": "slideButton"
        },
        {
          "Name": "slideItem"
        },
        {
          "Name": "static"
        },
        {
          "Name": "swipe"
        },
        {
          "Name": "toggle"
        }
      ]
    },
    "ListMenuMode": {
      "Items": [
        {
          "Name": "context"
        },
        {
          "Name": "slide"
        }
      ]
    },
    "ListPageLoadMode": {
      "Items": [
        {
          "Name": "nextButton"
        },
        {
          "Name": "scrollBottom"
        }
      ]
    },
    "ShowScrollbarMode": {
      "Items": [
        {
          "Name": "always"
        },
        {
          "Name": "never"
        },
        {
          "Name": "onHover"
        },
        {
          "Name": "onScroll"
        }
      ]
    },
    "CalendarZoomLevel": {
      "Items": [
        {
          "Name": "century"
        },
        {
          "Name": "decade"
        },
        {
          "Name": "month"
        },
        {
          "Name": "year"
        }
      ]
    },
    "EditorApplyValueMode": {
      "Items": [
        {
          "Name": "instantly"
        },
        {
          "Name": "useButtons"
        }
      ]
    },
    "FileUploadMode": {
      "Items": [
        {
          "Name": "instantly"
        },
        {
          "Name": "useButtons"
        },
        {
          "Name": "useForm"
        }
      ]
    },
    "DateBoxType": {
      "Items": [
        {
          "Name": "date"
        },
        {
          "Name": "datetime"
        },
        {
          "Name": "time"
        }
      ],
      "Renamings": {
        "datetime": "DateTime"
      }
    },
    "TextBoxMode": {
      "Items": [
        {
          "Name": "email"
        },
        {
          "Name": "password"
        },
        {
          "Name": "search"
        },
        {
          "Name": "tel"
        },
        {
          "Name": "text"
        },
        {
          "Name": "url"
        }
      ]
    },
    "Orientation": {
      "Items": [
        {
          "Name": "horizontal"
        },
        {
          "Name": "vertical"
        }
      ]
    },
    "DateBoxPickerType": {
      "Items": [
        {
          "Name": "calendar"
        },
        {
          "Name": "list"
        },
        {
          "Name": "native"
        },
        {
          "Name": "rollers"
        }
      ]
    },
    "GeoMapProvider": {
      "Items": [
        {
          "Name": "bing"
        },
        {
          "Name": "google"
        },
        {
          "Name": "googleStatic"
        }
      ]
    },
    "GeoMapType": {
      "Items": [
        {
          "Name": "hybrid"
        },
        {
          "Name": "roadmap"
        },
        {
          "Name": "satellite"
        }
      ]
    },
    "GeoMapRouteMode": {
      "Items": [
        {
          "Name": "driving"
        },
        {
          "Name": "walking"
        }
      ]
    },
    "TreeViewDataStructure": {
      "Items": [
        {
          "Name": "plain"
        },
        {
          "Name": "tree"
        }
      ]
    },
    "TreeListDataStructure": {
      "Items": [
        {
          "Name": "plain"
        },
        {
          "Name": "tree"
        }
      ]
    },
    "ScrollDirection": {
      "Items": [
        {
          "Name": "both"
        },
        {
          "Name": "horizontal"
        },
        {
          "Name": "vertical"
        }
      ]
    },
    "ToastType": {
      "Items": [
        {
          "Name": "custom"
        },
        {
          "Name": "error"
        },
        {
          "Name": "info"
        },
        {
          "Name": "success"
        },
        {
          "Name": "warning"
        }
      ]
    },
    "TreeViewCheckBoxMode": {
      "Items": [
        {
          "Name": "none"
        },
        {
          "Name": "normal"
        },
        {
          "Name": "selectAll"
        }
      ]
    },
    "ResizeHandle": {
      "Items": [
        {
          "Name": "bottom"
        },
        {
          "Name": "left"
        },
        {
          "Name": "right"
        },
        {
          "Name": "top"
        }
      ]
    },
    "SlideOutMenuPosition": {
      "Items": [
        {
          "Name": "inverted"
        },
        {
          "Name": "normal"
        }
      ]
    },
    "SchedulerViewType": {
      "Items": [
        {
          "Name": "agenda"
        },
        {
          "Name": "day"
        },
        {
          "Name": "month"
        },
        {
          "Name": "timelineDay"
        },
        {
          "Name": "timelineMonth"
        },
        {
          "Name": "timelineWeek"
        },
        {
          "Name": "timelineWorkWeek"
        },
        {
          "Name": "week"
        },
        {
          "Name": "workWeek"
        }
      ]
    },
    "FirstDayOfWeek": {
      "Items": [
        {
          "Name": "0"
        },
        {
          "Name": "1"
        },
        {
          "Name": "2"
        },
        {
          "Name": "3"
        },
        {
          "Name": "4"
        },
        {
          "Name": "5"
        },
        {
          "Name": "6"
        }
      ],
      "Renamings": {
        "0": "Sunday",
        "1": "Monday",
        "2": "Tuesday",
        "3": "Wednesday",
        "4": "Thursday",
        "5": "Friday",
        "6": "Saturday"
      }
    },
    "SchedulerRecurrenceEditMode": {
      "Items": [
        {
          "Name": "dialog"
        },
        {
          "Name": "occurrence"
        },
        {
          "Name": "series"
        }
      ]
    },
    "GridColumnDataType": {
      "Items": [
        {
          "Name": "string"
        },
        {
          "Name": "number"
        },
        {
          "Name": "date"
        },
        {
          "Name": "boolean"
        },
        {
          "Name": "object"
        }
      ]
    },
    "SortOrder": {
      "Items": [
        {
          "Name": "asc"
        },
        {
          "Name": "desc"
        }
      ]
    },
    "GridEditMode": {
      "Items": [
        {
          "Name": "batch"
        },
        {
          "Name": "cell"
        },
        {
          "Name": "row"
        },
        {
          "Name": "form"
        },
        {
          "Name": "popup"
        }
      ]
    },
    "GridApplyFilterMode": {
      "Items": [
        {
          "Name": "auto"
        },
        {
          "Name": "onClick"
        }
      ]
    },
    "GridScrollingMode": {
      "Items": [
        {
          "Name": "infinite"
        },
        {
          "Name": "standard"
        },
        {
          "Name": "virtual"
        }
      ]
    },
    "TreeListScrollingMode": {
      "Items": [
        {
          "Name": "standard"
        },
        {
          "Name": "virtual"
        }
      ]
    },
    "GridSelectionShowCheckBoxesMode": {
      "Items": [
        {
          "Name": "always"
        },
        {
          "Name": "none"
        },
        {
          "Name": "onClick"
        },
        {
          "Name": "onLongTap"
        }
      ]
    },
    "StateStoringType": {
      "Items": [
        {
          "Name": "custom"
        },
        {
          "Name": "localStorage"
        },
        {
          "Name": "sessionStorage"
        }
      ]
    },
    "ColumnResizingMode": {
      "Items": [
        {
          "Name": "nextColumn"
        },
        {
          "Name": "widget"
        }
      ]
    },
    "SummaryType": {
      "Items": [
        {
          "Name": "avg"
        },
        {
          "Name": "count"
        },
        {
          "Name": "custom"
        },
        {
          "Name": "max"
        },
        {
          "Name": "min"
        },
        {
          "Name": "sum"
        }
      ]
    },
    "FilterType": {
      "Items": [
        {
          "Name": "exclude"
        },
        {
          "Name": "include"
        }
      ]
    },
    "HeaderFilterGroupInterval": {
      "Items": [
        {
          "Name": "day"
        },
        {
          "Name": "hour"
        },
        {
          "Name": "minute"
        },
        {
          "Name": "month"
        },
        {
          "Name": "quarter"
        },
        {
          "Name": "second"
        },
        {
          "Name": "year"
        }
      ]
    },
    "PivotGridFieldChooserLayout": {
      "Items": [
        {
          "Name": "0"
        },
        {
          "Name": "1"
        },
        {
          "Name": "2"
        }
      ],
      "Renamings": {
        "0": "Layout0",
        "1": "Layout1",
        "2": "Layout2"
      }
    },
    "PivotGridTotalsDisplayMode": {
      "Items": [
        {
          "Name": "both"
        },
        {
          "Name": "columns"
        },
        {
          "Name": "none"
        },
        {
          "Name": "rows"
        }
      ]
    },
    "PivotGridScrollingMode": {
      "Items": [
        {
          "Name": "standard"
        },
        {
          "Name": "virtual"
        }
      ]
    },
    "PivotGridArea": {
      "Items": [
        {
          "Name": "column"
        },
        {
          "Name": "data"
        },
        {
          "Name": "filter"
        },
        {
          "Name": "row"
        }
      ]
    },
    "PivotGridDataType": {
      "Items": [
        {
          "Name": "date"
        },
        {
          "Name": "number"
        },
        {
          "Name": "string"
        }
      ]
    },
    "PivotGridGroupInterval": {
      "Items": [
        {
          "Name": "day"
        },
        {
          "Name": "dayOfWeek"
        },
        {
          "Name": "month"
        },
        {
          "Name": "quarter"
        },
        {
          "Name": "year"
        }
      ]
    },
    "PivotGridSortBy": {
      "Items": [
        {
          "Name": "displayText"
        },
        {
          "Name": "value"
        }
      ]
    },
    "PivotGridRunningTotalMode": {
      "Items": [
        {
          "Name": "column"
        },
        {
          "Name": "row"
        }
      ]
    },
    "PivotGridSummaryDisplayMode": {
      "Items": [
        {
          "Name": "absoluteVariation"
        },
        {
          "Name": "percentOfColumnGrandTotal"
        },
        {
          "Name": "percentOfColumnTotal"
        },
        {
          "Name": "percentOfGrandTotal"
        },
        {
          "Name": "percentOfRowGrandTotal"
        },
        {
          "Name": "percentOfRowTotal"
        },
        {
          "Name": "percentVariation"
        }
      ]
    },
    "PivotGridRowHeadersLayout": {
      "Items": [
        {
          "Name": "standard"
        },
        {
          "Name": "tree"
        }
      ]
    },
    "PivotGridDataFieldArea": {
      "Items": [
        {
          "Name": "column"
        },
        {
          "Name": "row"
        }
      ]
    },
    "FormLabelLocation": {
      "Items": [
        {
          "Name": "left"
        },
        {
          "Name": "right"
        },
        {
          "Name": "top"
        }
      ]
    },
    "FormItemType": {
      "Items": [
        {
          "Name": "empty"
        },
        {
          "Name": "group"
        },
        {
          "Name": "simple"
        },
        {
          "Name": "tabbed"
        }
      ]
    },
    "FormItemEditorType": {
      "Items": [
        {
          "Name": "dxAutocomplete"
        },
        {
          "Name": "dxCalendar"
        },
        {
          "Name": "dxCheckBox"
        },
        {
          "Name": "dxColorBox"
        },
        {
          "Name": "dxDateBox"
        },
        {
          "Name": "dxDropDownBox"
        },
        {
          "Name": "dxLookup"
        },
        {
          "Name": "dxNumberBox"
        },
        {
          "Name": "dxRadioGroup"
        },
        {
          "Name": "dxSelectBox"
        },
        {
          "Name": "dxSlider"
        },
        {
          "Name": "dxSwitch"
        },
        {
          "Name": "dxTagBox"
        },
        {
          "Name": "dxTextArea"
        },
        {
          "Name": "dxTextBox"
        }
      ],
      "Renamings": {
        "dxAutocomplete": "Autocomplete",
        "dxCalendar": "Calendar",
        "dxCheckBox": "CheckBox",
        "dxColorBox": "ColorBox",
        "dxDateBox": "DateBox",
        "dxDropDownBox": "DropDownBox",
        "dxLookup": "Lookup",
        "dxNumberBox": "NumberBox",
        "dxRadioGroup": "RadioGroup",
        "dxSelectBox": "SelectBox",
        "dxSlider": "Slider",
        "dxSwitch": "Switch",
        "dxTagBox": "TagBox",
        "dxTextArea": "TextArea",
        "dxTextBox": "TextBox"
      }
    },
    "VizTheme": {
      "Items": [
        {
          "Name": "android5.light"
        },
        {
          "Name": "generic.dark"
        },
        {
          "Name": "generic.light"
        },
        {
          "Name": "generic.contrast"
        },
        {
          "Name": "ios7.default"
        },
        {
          "Name": "win10.black"
        },
        {
          "Name": "win10.white"
        },
        {
          "Name": "win8.black",
          "Deprecated": true,
          "InsteadUse": "win10.black"
        },
        {
          "Name": "win8.white",
          "Deprecated": true,
          "InsteadUse": "win10.white"
        }
      ],
      "Renamings": {
        "ios7.default": "iOS7Default"
      }
    },
    "VizAnimationEasing": {
      "Items": [
        {
          "Name": "easeOutCubic"
        },
        {
          "Name": "linear"
        }
      ]
    },
    "Format": {
      "Items": [
        {
          "Name": "billions"
        },
        {
          "Name": "currency"
        },
        {
          "Name": "day"
        },
        {
          "Name": "decimal"
        },
        {
          "Name": "exponential"
        },
        {
          "Name": "fixedPoint"
        },
        {
          "Name": "largeNumber"
        },
        {
          "Name": "longDate"
        },
        {
          "Name": "longTime"
        },
        {
          "Name": "millions"
        },
        {
          "Name": "millisecond"
        },
        {
          "Name": "month"
        },
        {
          "Name": "monthAndDay"
        },
        {
          "Name": "monthAndYear"
        },
        {
          "Name": "percent"
        },
        {
          "Name": "quarter"
        },
        {
          "Name": "quarterAndYear"
        },
        {
          "Name": "shortDate"
        },
        {
          "Name": "shortTime"
        },
        {
          "Name": "thousands"
        },
        {
          "Name": "trillions"
        },
        {
          "Name": "year"
        },
        {
          "Name": "dayOfWeek"
        },
        {
          "Name": "hour"
        },
        {
          "Name": "longDateLongTime"
        },
        {
          "Name": "minute"
        },
        {
          "Name": "second"
        },
        {
          "Name": "shortDateShortTime"
        }
      ]
    },
    "VizPalette": {
      "Items": [
        {
          "Name": "Bright"
        },
        {
          "Name": "Default"
        },
        {
          "Name": "Harmony Light"
        },
        {
          "Name": "Ocean"
        },
        {
          "Name": "Pastel"
        },
        {
          "Name": "Soft"
        },
        {
          "Name": "Soft Pastel"
        },
        {
          "Name": "Vintage"
        },
        {
          "Name": "Violet"
        }
      ]
    },
    "ChartElementSelectionMode": {
      "Items": [
        {
          "Name": "multiple"
        },
        {
          "Name": "single"
        }
      ]
    },
    "ChartResolveLabelOverlapping": {
      "Items": [
        {
          "Name": "hide"
        },
        {
          "Name": "none"
        },
        {
          "Name": "stack"
        }
      ]
    },
    "PieChartResolveLabelOverlapping": {
      "Items": [
        {
          "Name": "hide"
        },
        {
          "Name": "none"
        },
        {
          "Name": "shift"
        }
      ]
    },
    "OverlappingBehavior": {
      "Items": [
        {
          "Name": "enlargeTickInterval",
          "Deprecated": true,
          "InsteadUse": "hide"
        },
        {
          "Name": "ignore",
          "Deprecated": true,
          "InsteadUse": "none"
        },
        {
          "Name": "rotate"
        },
        {
          "Name": "stagger"
        },
        {
          "Name": "none"
        },
        {
          "Name": "hide"
        }
      ]
    },
    "ChartLabelDisplayMode": {
      "Items": [
        {
          "Name": "rotate"
        },
        {
          "Name": "stagger"
        },
        {
          "Name": "standard"
        }
      ]
    },
    "ChartPointerType": {
      "Items": [
        {
          "Name": "all"
        },
        {
          "Name": "mouse"
        },
        {
          "Name": "none"
        },
        {
          "Name": "touch"
        }
      ]
    },
    "ChartLegendHoverMode": {
      "Items": [
        {
          "Name": "excludePoints"
        },
        {
          "Name": "includePoints"
        },
        {
          "Name": "none"
        }
      ]
    },
    "ChartSeriesHoverMode": {
      "Items": [
        {
          "Name": "allArgumentPoints"
        },
        {
          "Name": "allSeriesPoints"
        },
        {
          "Name": "excludePoints"
        },
        {
          "Name": "includePoints"
        },
        {
          "Name": "nearestPoint"
        },
        {
          "Name": "none"
        },
        {
          "Name": "onlyPoint"
        }
      ]
    },
    "ChartSeriesSelectionMode": {
      "Items": [
        {
          "Name": "allArgumentPoints"
        },
        {
          "Name": "allSeriesPoints"
        },
        {
          "Name": "excludePoints"
        },
        {
          "Name": "includePoints"
        },
        {
          "Name": "none"
        },
        {
          "Name": "onlyPoint"
        }
      ]
    },
    "PieChartLegendHoverMode": {
      "Items": [
        {
          "Name": "none"
        },
        {
          "Name": "allArgumentPoints"
        }
      ]
    },
    "RelativePosition": {
      "Items": [
        {
          "Name": "inside"
        },
        {
          "Name": "outside"
        }
      ]
    },
    "ChartTooltipLocation": {
      "Items": [
        {
          "Name": "center"
        },
        {
          "Name": "edge"
        }
      ]
    },
    "DiscreteAxisDivisionMode": {
      "Items": [
        {
          "Name": "betweenLabels"
        },
        {
          "Name": "crossLabels"
        }
      ]
    },
    "ChartDataType": {
      "Items": [
        {
          "Name": "datetime"
        },
        {
          "Name": "numeric"
        },
        {
          "Name": "string"
        }
      ],
      "Renamings": {
        "datetime": "DateTime"
      }
    },
    "ArgumentAxisHoverMode": {
      "Items": [
        {
          "Name": "allArgumentPoints"
        },
        {
          "Name": "none"
        }
      ]
    },
    "ChartPointInteractionMode": {
      "Items": [
        {
          "Name": "allArgumentPoints"
        },
        {
          "Name": "allSeriesPoints"
        },
        {
          "Name": "none"
        },
        {
          "Name": "onlyPoint"
        }
      ]
    },
    "AxisScaleType": {
      "Items": [
        {
          "Name": "continuous"
        },
        {
          "Name": "discrete"
        },
        {
          "Name": "logarithmic"
        }
      ]
    },
    "RangeSelectorAxisScaleType": {
      "Items": [
        {
          "Name": "continuous"
        },
        {
          "Name": "discrete"
        },
        {
          "Name": "logarithmic"
        },
        {
          "Name": "semidiscrete"
        }
      ]
    },
    "DashStyle": {
      "Items": [
        {
          "Name": "dash"
        },
        {
          "Name": "dot"
        },
        {
          "Name": "longDash"
        },
        {
          "Name": "solid"
        }
      ]
    },
    "SeriesType": {
      "Items": [
        {
          "Name": "area"
        },
        {
          "Name": "bar"
        },
        {
          "Name": "bubble"
        },
        {
          "Name": "candlestick"
        },
        {
          "Name": "fullstackedarea"
        },
        {
          "Name": "fullstackedbar"
        },
        {
          "Name": "fullstackedline"
        },
        {
          "Name": "fullstackedspline"
        },
        {
          "Name": "fullstackedsplinearea"
        },
        {
          "Name": "line"
        },
        {
          "Name": "rangearea"
        },
        {
          "Name": "rangebar"
        },
        {
          "Name": "scatter"
        },
        {
          "Name": "spline"
        },
        {
          "Name": "splinearea"
        },
        {
          "Name": "stackedarea"
        },
        {
          "Name": "stackedbar"
        },
        {
          "Name": "stackedline"
        },
        {
          "Name": "stackedspline"
        },
        {
          "Name": "stackedsplinearea"
        },
        {
          "Name": "steparea"
        },
        {
          "Name": "stepline"
        },
        {
          "Name": "stock"
        }
      ],
      "Renamings": {
        "fullstackedarea": "FullStackedArea",
        "fullstackedbar": "FullStackedBar",
        "fullstackedline": "FullStackedLine",
        "fullstackedspline": "FullStackedSpline",
        "fullstackedsplinearea": "FullStackedSplineArea",
        "rangearea": "RangeArea",
        "rangebar": "RangeBar",
        "splinearea": "SplineArea",
        "stackedarea": "StackedArea",
        "stackedbar": "StackedBar",
        "stackedline": "StackedLine",
        "stackedspline": "StackedSpline",
        "stackedsplinearea": "StackedSplineArea",
        "steparea": "StepArea",
        "stepline": "StepLine"
      }
    },
    "SparklineType": {
      "Items": [
        {
          "Name": "area"
        },
        {
          "Name": "bar"
        },
        {
          "Name": "line"
        },
        {
          "Name": "spline"
        },
        {
          "Name": "splinearea"
        },
        {
          "Name": "steparea"
        },
        {
          "Name": "stepline"
        },
        {
          "Name": "winloss"
        }
      ],
      "Renamings": {
        "splinearea": "SplineArea",
        "steparea": "StepArea",
        "stepline": "StepLine",
        "winloss": "WinLoss"
      }
    },
    "PointSymbol": {
      "Items": [
        {
          "Name": "circle"
        },
        {
          "Name": "cross"
        },
        {
          "Name": "polygon"
        },
        {
          "Name": "square"
        },
        {
          "Name": "triangleDown"
        },
        {
          "Name": "triangleUp"
        }
      ]
    },
    "VizPointSymbol": {
      "Items": [
        {
          "Name": "circle"
        },
        {
          "Name": "cross"
        },
        {
          "Name": "polygon"
        },
        {
          "Name": "square"
        },
        {
          "Name": "triangle"
        }
      ]
    },
    "FinancialChartReductionLevel": {
      "Items": [
        {
          "Name": "close"
        },
        {
          "Name": "high"
        },
        {
          "Name": "low"
        },
        {
          "Name": "open"
        }
      ]
    },
    "ValueErrorBarDisplayMode": {
      "Items": [
        {
          "Name": "auto"
        },
        {
          "Name": "high"
        },
        {
          "Name": "low"
        },
        {
          "Name": "none"
        }
      ]
    },
    "ValueErrorBarType": {
      "Items": [
        {
          "Name": "fixed"
        },
        {
          "Name": "percent"
        },
        {
          "Name": "stdDeviation"
        },
        {
          "Name": "stdError"
        },
        {
          "Name": "variance"
        }
      ]
    },
    "HatchingDirection": {
      "Items": [
        {
          "Name": "left"
        },
        {
          "Name": "none"
        },
        {
          "Name": "right"
        }
      ]
    },
    "PieChartSeriesInteractionMode": {
      "Items": [
        {
          "Name": "none"
        },
        {
          "Name": "onlyPoint"
        }
      ]
    },
    "PieChartSegmentsDirection": {
      "Items": [
        {
          "Name": "anticlockwise"
        },
        {
          "Name": "clockwise"
        }
      ],
      "Renamings": {
        "anticlockwise": "AntiClockwise"
      }
    },
    "PieChartType": {
      "Items": [
        {
          "Name": "donut"
        },
        {
          "Name": "doughnut"
        },
        {
          "Name": "pie"
        }
      ]
    },
    "PieChartLabelPosition": {
      "Items": [
        {
          "Name": "columns"
        },
        {
          "Name": "inside"
        },
        {
          "Name": "outside"
        }
      ]
    },
    "SmallValuesGroupingMode": {
      "Items": [
        {
          "Name": "none"
        },
        {
          "Name": "smallValueThreshold"
        },
        {
          "Name": "topN"
        }
      ]
    },
    "ValueChangedCallMode": {
      "Items": [
        {
          "Name": "onMoving"
        },
        {
          "Name": "onMovingComplete"
        }
      ]
    },
    "BackgroundImageLocation": {
      "Items": [
        {
          "Name": "center"
        },
        {
          "Name": "centerBottom"
        },
        {
          "Name": "centerTop"
        },
        {
          "Name": "full"
        },
        {
          "Name": "leftBottom"
        },
        {
          "Name": "leftCenter"
        },
        {
          "Name": "leftTop"
        },
        {
          "Name": "rightBottom"
        },
        {
          "Name": "rightCenter"
        },
        {
          "Name": "rightTop"
        }
      ]
    },
    "RangeSelectorChartAxisScaleType": {
      "Items": [
        {
          "Name": "continuous"
        },
        {
          "Name": "logarithmic"
        }
      ]
    },
    "GaugeTitlePosition": {
      "Items": [
        {
          "Name": "bottom-center"
        },
        {
          "Name": "bottom-left"
        },
        {
          "Name": "bottom-right"
        },
        {
          "Name": "top-center"
        },
        {
          "Name": "top-left"
        },
        {
          "Name": "top-right"
        }
      ]
    },
    "CircularGaugeElementOrientation": {
      "Items": [
        {
          "Name": "center"
        },
        {
          "Name": "inside"
        },
        {
          "Name": "outside"
        }
      ]
    },
    "GaugeOverlappingBehavior": {
      "Items": [
        {
          "Name": "first"
        },
        {
          "Name": "last"
        }
      ],
      "Renamings": {
        "first": "HideFirstLabel",
        "last": "HideLastLabel"
      }
    },
    "ScaleLabelOverlappingBehavior": {
      "Items": [
        {
          "Name": "hide"
        },
        {
          "Name": "none"
        }
      ]
    },
    "GaugeIndicatorType": {
      "Items": [
        {
          "Name": "circle"
        },
        {
          "Name": "rangeBar"
        },
        {
          "Name": "rectangle"
        },
        {
          "Name": "rectangleNeedle"
        },
        {
          "Name": "rhombus"
        },
        {
          "Name": "textCloud"
        },
        {
          "Name": "triangleMarker"
        },
        {
          "Name": "triangleNeedle"
        },
        {
          "Name": "twoColorNeedle"
        }
      ]
    },
    "PolarChartOverlappingBehavior": {
      "Items": [
        {
          "Name": "enlargeTickInterval",
          "Deprecated": true,
          "InsteadUse": "hide"
        },
        {
          "Name": "ignore",
          "Deprecated": true,
          "InsteadUse": "none"
        },
        {
          "Name": "none"
        },
        {
          "Name": "hide"
        }
      ]
    },
    "PolarChartSeriesType": {
      "Items": [
        {
          "Name": "area"
        },
        {
          "Name": "bar"
        },
        {
          "Name": "line"
        },
        {
          "Name": "scatter"
        },
        {
          "Name": "stackedbar"
        }
      ]
    },
    "PolarChartResolveLabelOverlapping": {
      "Items": [
        {
          "Name": "hide"
        },
        {
          "Name": "none"
        }
      ]
    },
    "VizTimeInterval": {
      "Items": [
        {
          "Name": "day"
        },
        {
          "Name": "hour"
        },
        {
          "Name": "millisecond"
        },
        {
          "Name": "minute"
        },
        {
          "Name": "month"
        },
        {
          "Name": "quarter"
        },
        {
          "Name": "second"
        },
        {
          "Name": "week"
        },
        {
          "Name": "year"
        }
      ]
    },
    "VectorMapMarkerType": {
      "Items": [
        {
          "Name": "bubble"
        },
        {
          "Name": "dot"
        },
        {
          "Name": "image"
        },
        {
          "Name": "pie"
        }
      ]
    },
    "VectorMapLayerType": {
      "Items": [
        {
          "Name": "area"
        },
        {
          "Name": "line"
        },
        {
          "Name": "marker"
        }
      ]
    },
    "VectorMapMarkerShape": {
      "Items": [
        {
          "Name": "circle"
        },
        {
          "Name": "square"
        }
      ]
    },
    "Mode": {
      "Items": [
        {
          "Name": "auto"
        }
      ]
    },
    "GridColumnChooserMode": {
      "Items": [
        {
          "Name": "dragAndDrop"
        },
        {
          "Name": "select"
        }
      ]
    },
    "GridGroupingExpandMode": {
      "Items": [
        {
          "Name": "buttonClick"
        },
        {
          "Name": "rowClick"
        }
      ]
    },
    "UploadHttpMethod": {
      "Items": [
        {
          "Name": "POST"
        },
        {
          "Name": "PUT"
        }
      ]
    },
    "ToolbarItemLocateInMenuMode": {
      "Items": [
        {
          "Name": "always"
        },
        {
          "Name": "auto"
        },
        {
          "Name": "never"
        }
      ]
    },
    "ToolbarItemShowTextMode": {
      "Items": [
        {
          "Name": "always"
        },
        {
          "Name": "inMenu"
        }
      ]
    },
    "TreeMapLayoutAlgorithm": {
      "Items": [
        {
          "Name": "sliceanddice"
        },
        {
          "Name": "squarified"
        },
        {
          "Name": "strip"
        }
      ],
      "Renamings": {
        "sliceanddice": "SliceAndDice"
      }
    },
    "TreeMapLayoutDirection": {
      "Items": [
        {
          "Name": "leftBottomRightTop"
        },
        {
          "Name": "leftTopRightBottom"
        },
        {
          "Name": "rightBottomLeftTop"
        },
        {
          "Name": "rightTopLeftBottom"
        }
      ]
    },
    "TreeMapColorizerType": {
      "Items": [
        {
          "Name": "discrete"
        },
        {
          "Name": "gradient"
        },
        {
          "Name": "none"
        },
        {
          "Name": "range"
        }
      ]
    },
    "TreeMapResolveLabelOverflow": {
      "Items": [
        {
          "Name": "ellipsis"
        },
        {
          "Name": "hide"
        }
      ]
    },
    "EdmType": {
      "Items": [
        {
          "Name": "Guid"
        },
        {
          "Name": "Int32"
        },
        {
          "Name": "Int64"
        },
        {
          "Name": "String"
        }
      ]
    },
    "ComparisonOperator": {
      "Items": [
        {
          "Name": "!="
        },
        {
          "Name": "!=="
        },
        {
          "Name": "<"
        },
        {
          "Name": "<="
        },
        {
          "Name": "=="
        },
        {
          "Name": "==="
        },
        {
          "Name": ">"
        },
        {
          "Name": ">="
        }
      ],
      "Renamings": {
        "==": "equal",
        "!=": "notEqual",
        "===": "strictEqual",
        "!==": "notStrictEqual",
        ">": "greaterThan",
        ">=": "greaterThanOrEqual",
        "<": "lessThan",
        "<=": "lessThanOrEqual"
      }
    },
    "ExportFormat": {
      "Items": [
        {
          "Name": "GIF"
        },
        {
          "Name": "JPEG"
        },
        {
          "Name": "PDF"
        },
        {
          "Name": "PNG"
        },
        {
          "Name": "SVG"
        }
      ]
    },
    "ValidationRuleType": {
      "Items": [
        {
          "Name": "required"
        },
        {
          "Name": "numeric"
        },
        {
          "Name": "range"
        },
        {
          "Name": "stringLength"
        },
        {
          "Name": "custom"
        },
        {
          "Name": "compare"
        },
        {
          "Name": "pattern"
        },
        {
          "Name": "email"
        }
      ]
    }
  }
}