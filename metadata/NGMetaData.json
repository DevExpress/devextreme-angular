{
  "Widgets": {
    "dxAccordion": {
      "Description": "The Accordion widget contains several panels displayed one under another. These panels can be collapsed or expanded by an end user, which makes this widget very useful for presenting information in a limited amount of space.",
      "Module": "ui/accordion",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "animationDuration": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "A number specifying the time in milliseconds spent on the animation of the expanding or collapsing of a panel."
        },
        "collapsible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether all items can be collapsed or whether at least one item must always be expanded."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the panel's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "icon": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the icon displayed by the widget item title."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item title."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "itemTitleTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for item titles."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides keys for widget items."
        },
        "multiple": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can expand several items or only a single item at once."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onItemTitleClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an accordion item's title is clicked or tapped."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is selected or the selection is canceled."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "The index number of the currently selected item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "The selected item object."
        },
        "selectedItemKeys": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "selectedItemKey",
          "Description": "Specifies an array of currently selected item keys."
        },
        "selectedItems": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "selectedItem",
          "Description": "An array of currently selected item objects."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxActionSheet": {
      "Description": "The ActionSheet widget is a sheet containing a set of buttons located one under the other. These buttons usually represent several choices relating to a single task.",
      "Module": "ui/action_sheet",
      "Options": {
        "cancelText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed in the button that closes the action sheet."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "icon": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the icon to be displayed on an action sheet button."
            },
            "onClick": {
              "PrimitiveTypes": [
                "Function",
                "string"
              ],
              "IsFunc": true,
              "IsEvent": true,
              "Description": "A handler for the click event raised for the button representing the given action sheet button."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the type of the button that represents an action sheet item."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "onCancelClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the Cancel button is clicked or tapped."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showCancelButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to display the Cancel button in action sheet."
        },
        "showTitle": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the title of the action sheet is visible."
        },
        "target": {
          "PrimitiveTypes": [
            "Element",
            "JQuery"
          ],
          "Description": "Specifies the element the action sheet popover points at. Applies only if usePopover is true."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The title of the action sheet."
        },
        "usePopover": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to show the action sheet within a Popover widget."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "A Boolean value specifying whether or not the ActionSheet widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxAutocomplete": {
      "Description": "The Autocomplete widget is a textbox that provides suggestions while a user types into it.",
      "Module": "ui/autocomplete",
      "IsEditor": true,
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data the widget should display."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the drop-down field's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "displayValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "Returns the value currently displayed by the widget."
        },
        "dropDownButtonTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "grouped": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether data items should be grouped."
        },
        "groupTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for group captions."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "maxItemCount": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the maximum count of items displayed by the widget."
        },
        "maxLength": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the maximum number of characters you can enter into the textbox."
        },
        "minSearchLength": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The minimum number of characters that must be entered into the text box to begin a search."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onChange": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus after the content has been changed."
        },
        "onClosed": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is closed."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onCopy": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been copied."
        },
        "onCut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been cut."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEnterKey": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the Enter key has been pressed while the widget is focused."
        },
        "onFocusIn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget gets focus."
        },
        "onFocusOut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onInput": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the widget's input is changed while the widget is focused."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a list item is clicked or tapped."
        },
        "onKeyDown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user is pressing a key on the keyboard."
        },
        "onKeyPress": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user presses a key on the keyboard."
        },
        "onKeyUp": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user releases a key on the keyboard."
        },
        "onOpened": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is opened."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPaste": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been pasted."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a list item is selected or the selection is canceled."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "opened": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is empty."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "searchExpr": {
          "PrimitiveTypes": [
            "Function"
          ],
          "ItemPrimitiveTypes": [
            "Function"
          ],
          "IsCollection": true,
          "SingularName": "searchExpr",
          "Description": "Specifies the name of a data source item field or an expression whose value is compared to the search criterion."
        },
        "searchMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a comparison operation used to search widget items."
        },
        "searchTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsReadonly": true,
          "Description": "Gets the currently selected item."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "showDropDownButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the drop-down button is visible."
        },
        "spellcheck": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget checks the inner text for spelling mistakes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsChangeable": true,
          "Description": "Specifies the current value displayed by the widget."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "valueExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides the widget's value. When this option is not set, the value is the entire data object."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxBarGauge": {
      "Description": "The BarGauge widget contains several circular bars that each indicates a single value.",
      "Module": "viz/bar_gauge",
      "Options": {
        "animation": {
          "Description": "Specifies animation options.",
          "Options": {
            "duration": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Determines how long animation runs."
            },
            "easing": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the animation easing mode."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not animation is enabled."
            }
          }
        },
        "backgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a color for the remaining segment of the bar's track."
        },
        "barSpacing": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a distance between bars in pixels."
        },
        "baseValue": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a base value for bars."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "endValue": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies an end value for the gauge's invisible scale."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "format",
              "Description": "Specifies a set of export formats."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Adds an empty space around the exported widget; measured in pixels."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export.enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            }
          }
        },
        "geometry": {
          "Description": "Defines the shape of the gauge's arc.",
          "Options": {
            "endAngle": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the end angle of the bar gauge's arc."
            },
            "startAngle": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the start angle of the bar gauge's arc."
            }
          }
        },
        "label": {
          "Description": "Specifies the options of the labels that accompany gauge bars.",
          "Options": {
            "connectorColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the label connector text."
            },
            "connectorWidth": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the label connector in pixels."
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns a text for labels."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for bar labels."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed in a label. Accepts only numeric formats."
            },
            "indent": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the distance between the upper bar and bar labels in pixels."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether bar labels appear on a gauge or not."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onTooltipHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip becomes hidden."
        },
        "onTooltipShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip appears."
        },
        "palette": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "palette",
          "Description": "Sets the palette to be used for colorizing bars in the gauge."
        },
        "paletteExtensionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies what to do with colors in the palette when their number is less than the number of bars in the gauge."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "relativeInnerRadius": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Defines the radius of the bar that is closest to the center relatively to the radius of the topmost bar."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "startValue": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a start value for the gauge's invisible scale."
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Configures the widget's title.",
          "Options": {
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the widget's subtitle.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's text."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of a tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Configures a tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of a tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip's border is visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of a tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors all tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "Element",
                "JQuery"
              ],
              "Description": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element."
            },
            "customizeTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Allows you to change tooltip appearance."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies tooltips' font options."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed it in a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies tooltips' transparency."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
            },
            "shadow": {
              "Description": "Configures a tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a tooltip's z-index."
            }
          }
        },
        "values": {
          "ItemPrimitiveTypes": [
            "number"
          ],
          "IsCollection": true,
          "SingularName": "value",
          "Description": "Specifies the array of values to be indicated on a bar gauge."
        }
      }
    },
    "dxBox": {
      "Description": "The Box widget allows you to arrange various elements within it. Separate and adaptive, the Box widget acts as a building block for the layout.",
      "Module": "ui/box",
      "Options": {
        "align": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how widget items are aligned along the main direction."
        },
        "crossAlign": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how widget items are aligned cross-wise."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "direction": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the direction of item positioning in the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "baseSize": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the base size of an item element along the main direction."
            },
            "box": {
              "PrimitiveTypes": [
                "DevExpress.ui.dxBoxOptions"
              ],
              "ComplexTypes": [
                "dxBoxOptions"
              ],
              "Description": "Holds a Box configuration object for the item."
            },
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "ratio": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the ratio value used to count the item element size along the main direction."
            },
            "shrink": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "A factor that defines how much an item shrinks relative to the rest of the items in the container."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxBullet": {
      "Description": "The Bullet widget is useful when you need to compare a single measure to a target value. The widget comprises a horizontal bar indicating the measure and a vertical line indicating the target value.",
      "Module": "viz/bullet",
      "Options": {
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a color for the bullet bar."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "endScaleValue": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies an end value for the invisible scale."
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onTooltipHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip becomes hidden."
        },
        "onTooltipShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip appears."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showTarget": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to show the target line."
        },
        "showZeroLevel": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to show the line indicating zero on the invisible scale."
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "startScaleValue": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a start value for the invisible scale."
        },
        "target": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the value indicated by the target line."
        },
        "targetColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a color for both the target and zero level lines."
        },
        "targetWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the width of the target line."
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "tooltip": {
          "Description": "Configures the tooltip.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of a tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Configures a tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of a tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip's border is visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of a tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors all tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "Element",
                "JQuery"
              ],
              "Description": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element."
            },
            "customizeTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Allows you to change tooltip appearance."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies tooltips' font options."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed it in a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies tooltips' transparency."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
            },
            "shadow": {
              "Description": "Configures a tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a tooltip's z-index."
            }
          }
        },
        "value": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the primary value indicated by the bullet bar."
        }
      }
    },
    "dxButton": {
      "Description": "The Button widget is a simple button that performs specified commands when a user clicks it.",
      "IsTranscludedContent": true,
      "Module": "ui/button",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "icon": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the icon to be displayed on the button."
        },
        "onClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the Button is clicked or tapped."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "template": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the Button widget."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the button."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the button type."
        },
        "useSubmitBehavior": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the button must submit an HTML form."
        },
        "validationGroup": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the validation group to be accessed in the click event handler."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxCalendar": {
      "Description": "The Calendar is a widget that displays a calendar and allows an end user to select the required date within a specified date range.",
      "Module": "ui/calendar",
      "IsEditor": true,
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "cellTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for calendar cells."
        },
        "dateSerializationFormat": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the date-time value serialization format. Use it only if you do not specify the value at design time."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "disabledDates": {
          "PrimitiveTypes": [
            "Function"
          ],
          "ItemPrimitiveTypes": [
            "Date"
          ],
          "IsCollection": true,
          "IsFunc": true,
          "SingularName": "disabledDate",
          "Description": "Specifies dates to be disabled."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "firstDayOfWeek": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the first day of a week."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "max": {
          "PrimitiveTypes": [
            "Date",
            "number",
            "string"
          ],
          "Description": "The latest date the widget allows to select."
        },
        "maxZoomLevel": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the maximum zoom level of the calendar."
        },
        "min": {
          "PrimitiveTypes": [
            "Date",
            "number",
            "string"
          ],
          "Description": "The earliest date the widget allows to select."
        },
        "minZoomLevel": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the minimum zoom level of the calendar."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showTodayButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget displays a button that selects the current date."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "Date",
            "number",
            "string"
          ],
          "IsChangeable": true,
          "Description": "An object or a value specifying the date and time currently selected in the calendar."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        },
        "zoomLevel": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the current calendar zoom level."
        }
      }
    },
    "dxChart": {
      "Description": "The Chart is a widget that visualizes data from a local or remote storage using a great variety of series types along with different interactive elements, such as tooltips, crosshair pointer, legend, etc.",
      "Module": "viz/chart",
      "Options": {
        "adaptiveLayout": {
          "Description": "Specifies adaptive layout options.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the widget's height small enough for the layout to begin adapting."
            },
            "keepLabels": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not point labels should be kept when the layout is adapting."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the widget's width small enough for the layout to begin adapting."
            }
          }
        },
        "adjustOnZoom": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to adjust the value axis when zooming the widget."
        },
        "animation": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies animation options.",
          "Options": {
            "duration": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how long the animation runs in milliseconds."
            },
            "easing": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the easing function of the animation."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the animation in the widget."
            },
            "maxPointCountSupported": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many series points the widget should have before the animation will be disabled."
            }
          }
        },
        "argumentAxis": {
          "Description": "Configures the argument axis.",
          "Options": {
            "aggregationGroupWidth": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of aggregation intervals in pixels. May be ignored in favor of the aggregationInterval option."
            },
            "aggregationInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the length of aggregation intervals in axis units. Applies only to axes of continuous and logarithmic types.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "allowDecimals": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to allow decimal values on the axis. When false, the axis contains integer values only."
            },
            "argumentType": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Casts arguments to a specified data type."
            },
            "axisDivisionFactor": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum distance between two neighboring major ticks in pixels. Applies only to the axes of the \"continuous\" and \"logarithmic\" types."
            },
            "breaks": {
              "ItemPrimitiveTypes": [
                "DevExpress.viz.ScaleBreak"
              ],
              "IsCollection": true,
              "SingularName": "break",
              "Description": "Declares a scale break collection. Applies only if the axis' type is \"continuous\" or \"logarithmic\".",
              "Options": {
                "endValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Along with the startValue option, limits the scale break."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Along with the endValue option, limits the scale break."
                }
              }
            },
            "breakStyle": {
              "Description": "Configures the scale breaks' appearance.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the scale breaks' color."
                },
                "line": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the scale breaks' line style."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the scale breaks' width in pixels."
                }
              }
            },
            "categories": {
              "ItemPrimitiveTypes": [
                "number",
                "string",
                "Date"
              ],
              "IsCollection": true,
              "SingularName": "category",
              "Description": "Specifies the order of categories on an axis of the \"discrete\" type."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the axis line."
            },
            "constantLines": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "constantLine",
              "Description": "Declares a collection of constant lines belonging to the argument axis.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of constant lines."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of constant lines."
                },
                "label": {
                  "Description": "Configures the constant line label.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for constant line labels."
                    },
                    "horizontalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns constant line labels in the horizontal direction."
                    },
                    "position": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the position of constant line labels on the chart plot."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text of a constant line label. By default, equals to the value of the constant line."
                    },
                    "verticalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns constant line labels in the vertical direction."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Makes constant line labels visible."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right side of a constant line and the constant line label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom side of a constant line and the constant line label."
                },
                "value": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Specifies the value indicated by a constant line. Setting this option is necessary."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of constant lines in pixels."
                }
              }
            },
            "constantLineStyle": {
              "Description": "Specifies the appearance of those constant lines that belong to the argument axis.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of constant lines."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of constant lines."
                },
                "label": {
                  "Description": "Specifies the appearance of the labels of those constant lines that belong to the argument axis.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for constant line labels."
                    },
                    "horizontalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns constant line labels in the horizontal direction."
                    },
                    "position": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the position of constant line labels on the chart plot."
                    },
                    "verticalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns constant line labels in the vertical direction."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Makes constant line labels visible."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right side of a constant line and the constant line label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom side of a constant line and the constant line label."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of constant lines in pixels."
                }
              }
            },
            "discreteAxisDivisionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether ticks and grid lines should cross axis labels or lie between them. Applies only to the axes of the \"discrete\" type."
            },
            "endOnTick": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to force the axis to start and end on ticks."
            },
            "grid": {
              "Description": "Configures the grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of grid lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent grid lines should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes grid lines visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of grid lines in pixels."
                }
              }
            },
            "holidays": {
              "ItemPrimitiveTypes": [
                "Date",
                "string",
                "number"
              ],
              "IsCollection": true,
              "SingularName": "holiday",
              "Description": "Dates to be excluded from the axis when workdaysOnly is true."
            },
            "hoverMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies chart elements to be highlighted when a user points to an axis label."
            },
            "inverted": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Inverts the axis."
            },
            "label": {
              "Description": "Configures the labels of the argument axis.",
              "Options": {
                "alignment": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Aligns axis labels in relation to ticks."
                },
                "customizeHint": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Specifies the hint that appears when a user points to an axis label."
                },
                "customizeText": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Customizes the text displayed by axis labels."
                },
                "displayMode": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Allows you to rotate or stagger axis labels. Applies to the horizontal axis only."
                },
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for axis labels."
                },
                "format": {
                  "PrimitiveTypes": [
                    "DevExpress.ui.format",
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "Description": "Formats a value before it is displayed in an axis label."
                },
                "indentFromAxis": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Adds a pixel-measured empty space between an axis and its labels."
                },
                "overlappingBehavior": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Decides how to arrange axis labels when there is not enough space to keep all of them."
                },
                "rotationAngle": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the rotation angle of axis labels. Applies only if displayMode or overlappingBehavior is \"rotate\"."
                },
                "staggeringSpacing": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Adds a pixel-measured empty space between two staggered rows of axis labels. Applies only if displayMode or overlappingBehavior is \"stagger\"."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows/hides axis labels."
                }
              }
            },
            "logarithmBase": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the value to be raised to a power when generating ticks for an axis of the \"logarithmic\" type."
            },
            "max": {
              "PrimitiveTypes": [
                "Date",
                "number",
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the argumentAxis.visualRange option instead."
            },
            "maxValueMargin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Controls the empty space between the maximum series points and the axis. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "min": {
              "PrimitiveTypes": [
                "Date",
                "number",
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the argumentAxis.visualRange option instead."
            },
            "minorGrid": {
              "Description": "Configures the minor grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the lines of the minor grid."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent the lines of the minor grid should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes the minor grid visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a width for the lines of the minor grid in pixels."
                }
              }
            },
            "minorTick": {
              "Description": "Configures the appearance of minor axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the length of minor ticks in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent minor ticks should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes minor ticks visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of minor ticks in pixels."
                }
              }
            },
            "minorTickCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many minor ticks to place between two neighboring major ticks."
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the interval between minor ticks. Applies only to the axes of the \"continuous\" type.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "minValueMargin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Controls the empty space between the minimum series points and the axis. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how transparent the axis line should be."
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Reserves a pixel-measured space for the axis."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Relocates the argument axis."
            },
            "singleWorkdays": {
              "ItemPrimitiveTypes": [
                "Date",
                "string",
                "number"
              ],
              "IsCollection": true,
              "SingularName": "singleWorkday",
              "Description": "Dates to be included on the axis when workdaysOnly is true."
            },
            "strips": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "strip",
              "Description": "Declares a collection of strips belonging to the argument axis.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the strip."
                },
                "endValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Along with the startValue option, limits the strip."
                },
                "label": {
                  "Description": "Configures the strip label.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for strip labels."
                    },
                    "horizontalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns strip labels in the horizontal direction."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text of the strip label."
                    },
                    "verticalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns strip labels in the vertical direction."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right border of a strip and the strip label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom border of a strip and the strip label."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Along with the endValue option, limits the strip."
                }
              }
            },
            "stripStyle": {
              "Description": "Configures the appearance of strips.",
              "Options": {
                "label": {
                  "Description": "Configures the appearance of strip labels.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for strip labels."
                    },
                    "horizontalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns strip labels in the horizontal direction."
                    },
                    "verticalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns strip labels in the vertical direction."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right border of a strip and the strip label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom border of a strip and the strip label."
                }
              }
            },
            "tick": {
              "Description": "Configures the appearance of major axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the length of ticks in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent ticks should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes ticks visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of ticks in pixels."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the interval between major ticks.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the axis title.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the axis title."
                },
                "margin": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Adds a pixel-measured empty space between the axis title and axis labels."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the axis title."
                }
              }
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the type of the argument axis."
            },
            "valueMarginsEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Adds an empty space between the axis and the minimum and maximum series points."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Makes the axis line visible."
            },
            "visualRange": {
              "PrimitiveTypes": [
                "DevExpress.viz.VizRange"
              ],
              "ItemPrimitiveTypes": [
                "number",
                "string",
                "Date"
              ],
              "IsCollection": true,
              "SingularName": "visualRange"
            },
            "visualRangeUpdateMode": {
              "PrimitiveTypes": [
                "string"
              ]
            },
            "wholeRange": {
              "PrimitiveTypes": [
                "DevExpress.viz.VizRange"
              ],
              "ItemPrimitiveTypes": [
                "number",
                "string",
                "Date"
              ],
              "IsCollection": true,
              "SingularName": "wholeRange"
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the axis line in pixels."
            },
            "workdaysOnly": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Leaves only workdays on the axis: the work week days plus single workdays minus holidays. Applies only if the axis' argumentType is \"datetime\"."
            },
            "workWeek": {
              "ItemPrimitiveTypes": [
                "number"
              ],
              "IsCollection": true,
              "SingularName": "workWeek",
              "Description": "Specifies which days are workdays. The array can contain values from 0 (Sunday) to 6 (Saturday). Applies only if workdaysOnly is true."
            }
          }
        },
        "barGroupPadding": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Controls the padding and consequently the width of a group of bars with the same argument using relative units. Ignored if the barGroupWidth option is set."
        },
        "barGroupWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a fixed width for groups of bars with the same argument, measured in pixels. Takes precedence over the barGroupPadding option."
        },
        "barWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsDeprecated": true,
          "Description": "Use CommonSeries.barPadding instead."
        },
        "commonAxisSettings": {
          "Description": "Defines common settings for both the argument and value axis in a chart.",
          "Options": {
            "allowDecimals": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to allow decimal values on the axis. When false, the axis contains integer values only."
            },
            "breakStyle": {
              "Description": "Configures the scale breaks' appearance.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the scale breaks' color."
                },
                "line": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the scale breaks' line style."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the scale breaks' width in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the axis line."
            },
            "constantLineStyle": {
              "Description": "Configures the appearance of all constant lines in the widget.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of constant lines."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of constant lines."
                },
                "label": {
                  "Description": "Configures constant line labels.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for constant line labels."
                    },
                    "position": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the position of constant line labels on the chart plot."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Makes constant line labels visible."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right side of a constant line and the constant line label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom side of a constant line and the constant line label."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of constant lines in pixels."
                }
              }
            },
            "discreteAxisDivisionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether ticks and grid lines should cross axis labels or lie between them. Applies only to the axes of the \"discrete\" type."
            },
            "endOnTick": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to force the axis to start and end on ticks."
            },
            "grid": {
              "Description": "Configures the grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of grid lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent grid lines should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes grid lines visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of grid lines in pixels."
                }
              }
            },
            "inverted": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Inverts the axis."
            },
            "label": {
              "Description": "Configures axis labels.",
              "Options": {
                "alignment": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Aligns axis labels in relation to ticks."
                },
                "displayMode": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Allows you to rotate or stagger axis labels. Applies to the horizontal axis only."
                },
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for axis labels."
                },
                "indentFromAxis": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Adds a pixel-measured empty space between an axis and its labels."
                },
                "overlappingBehavior": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Decides how to arrange axis labels when there is not enough space to keep all of them."
                },
                "rotationAngle": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the rotation angle of axis labels. Applies only if displayMode or overlappingBehavior is \"rotate\"."
                },
                "staggeringSpacing": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Adds a pixel-measured empty space between two staggered rows of axis labels. Applies only if displayMode or overlappingBehavior is \"stagger\"."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows/hides axis labels."
                }
              }
            },
            "maxValueMargin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Controls the empty space between the maximum series points and the axis. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "minorGrid": {
              "Description": "Configures the minor grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the lines of the minor grid."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent the lines of the minor grid should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes the minor grid visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a width for the lines of the minor grid in pixels."
                }
              }
            },
            "minorTick": {
              "Description": "Configures the appearance of minor axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the length of minor ticks in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent minor ticks should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes minor ticks visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of minor ticks in pixels."
                }
              }
            },
            "minValueMargin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Controls the empty space between the minimum series points and the axis. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how transparent the axis line should be."
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Reserves a pixel-measured space for the axis."
            },
            "stripStyle": {
              "Description": "Configures the appearance of strips.",
              "Options": {
                "label": {
                  "Description": "Configures the appearance of strip labels.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for strip labels."
                    },
                    "horizontalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns strip labels in the horizontal direction."
                    },
                    "verticalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns strip labels in the vertical direction."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right border of a strip and the strip label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom border of a strip and the strip label."
                }
              }
            },
            "tick": {
              "Description": "Configures the appearance of major axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the length of ticks in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent ticks should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes ticks visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of ticks in pixels."
                }
              }
            },
            "title": {
              "Description": "Configures axis titles.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the axis title."
                },
                "margin": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Adds a pixel-measured empty space between the axis title and axis labels."
                }
              }
            },
            "valueMarginsEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Adds an empty space between the axis and the minimum and maximum series points."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Makes the axis line visible."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the axis line in pixels."
            }
          }
        },
        "commonPaneSettings": {
          "Description": "Defines common settings for all panes in a chart.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the pane's background."
            },
            "border": {
              "Description": "Configures the pane border.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows/hides the bottom border of the pane. Applies only when the border.visible option is true."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the pane border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of the pane border."
                },
                "left": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows/hides the left border of the pane. Applies only when the border.visible option is true."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent the pane border should be."
                },
                "right": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows/hides the right border of the pane. Applies only when the border.visible option is true."
                },
                "top": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows/hides the top border of the pane. Applies only when the border.visible option is true."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows the pane border."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the pane border in pixels."
                }
              }
            }
          }
        },
        "commonSeriesSettings": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Specifies settings common for all series in the chart."
        },
        "containerBackgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Colors the background of the chart container."
        },
        "crosshair": {
          "Description": "Configures the crosshair feature.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the crosshair lines."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the dash style of the crosshair lines."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the crosshair."
            },
            "horizontalLine": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Configures the horizontal crosshair line individually.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the horizontal crosshair line."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of the horizontal crosshair line."
                },
                "label": {
                  "Description": "Configures the label that belongs to the horizontal crosshair line.",
                  "Options": {
                    "backgroundColor": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Paints the background of the label that belongs to the horizontal crosshair line."
                    },
                    "customizeText": {
                      "PrimitiveTypes": [
                        "Function"
                      ],
                      "IsFunc": true,
                      "Description": "Customizes the text displayed by the label that belongs to the horizontal crosshair line."
                    },
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for the label of the horizontal crosshair line."
                    },
                    "format": {
                      "PrimitiveTypes": [
                        "DevExpress.ui.format",
                        "string"
                      ],
                      "ComplexTypes": [
                        "Format"
                      ],
                      "Description": "Formats a point value before it is displayed in the crosshair label."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Makes the label of the horizontal crosshair line visible. Applies only if the crosshair feature is enabled and the horizontal line is visible."
                    }
                  }
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent the horizontal crosshair line should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether to show the horizontal crosshair line or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the horizontal crosshair line in pixels."
                }
              }
            },
            "label": {
              "Description": "Configures the crosshair labels.",
              "Options": {
                "backgroundColor": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Paints the background of the crosshair labels."
                },
                "customizeText": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Customizes the text displayed by the crosshair labels."
                },
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the crosshair labels."
                },
                "format": {
                  "PrimitiveTypes": [
                    "DevExpress.ui.format",
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "Description": "Formats a point value/argument before it is displayed in the crosshair label."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes the crosshair labels visible. Applies only if the crosshair feature is enabled."
                }
              }
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how transparent the crosshair lines should be."
            },
            "verticalLine": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Configures the vertical crosshair line individually.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the vertical crosshair line."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of the vertical crosshair line."
                },
                "label": {
                  "Description": "Configures the label that belongs to the vertical crosshair line.",
                  "Options": {
                    "backgroundColor": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Paints the background of the label that belongs to the vertical crosshair line."
                    },
                    "customizeText": {
                      "PrimitiveTypes": [
                        "Function"
                      ],
                      "IsFunc": true,
                      "Description": "Customizes the text displayed by the label that belongs to the vertical crosshair line."
                    },
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for the label of the vertical crosshair line."
                    },
                    "format": {
                      "PrimitiveTypes": [
                        "DevExpress.ui.format",
                        "string"
                      ],
                      "ComplexTypes": [
                        "Format"
                      ],
                      "Description": "Formats the point argument before it is displayed in the crosshair label."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Makes the label of the vertical crosshair line visible. Applies only if the crosshair feature is enabled and the vertical line is visible."
                    }
                  }
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent the vertical crosshair line should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether to show the vertical crosshair line or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the vertical crosshair line in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the crosshair lines."
            }
          }
        },
        "customizeLabel": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Customizes the appearance of an individual point label."
        },
        "customizePoint": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Customizes the appearance of an individual series point."
        },
        "dataPrepareSettings": {
          "Description": "Processes data before visualizing it.",
          "Options": {
            "checkTypeForAllData": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Validates the type of each value coming from the data source."
            },
            "convertToAxisDataType": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Converts data coming from a data source into a data type supported by the axis."
            },
            "sortingMethod": {
              "PrimitiveTypes": [
                "boolean",
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies the sorting order in which series points should be drawn."
            }
          }
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "Specifies the widget's data origin."
        },
        "defaultPane": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which pane should be used by default."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "equalBarWidth": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsDeprecated": true,
          "Description": "Use CommonSeries.ignoreEmptyPoints instead."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "format",
              "Description": "Specifies a set of export formats."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Adds an empty space around the exported widget; measured in pixels."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export.enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            }
          }
        },
        "legend": {
          "Description": "Specifies the options of a chart's legend.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the legend's background."
            },
            "border": {
              "Description": "Specifies legend border options.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies border color."
                },
                "cornerRadius": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a radius of a border's corners in degrees."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the border's dash style in the legend."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a border's opacity."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets a legend's border visibility state."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a border's width, in pixels."
                }
              }
            },
            "columnCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many columns it takes to arrange legend items."
            },
            "columnItemSpacing": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a blank space between legend columns in pixels."
            },
            "customizeHint": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item."
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by a legend item."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in the legend."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a legend's position on the chart."
            },
            "hoverMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies what series elements to highlight when a corresponding item in the legend is hovered over."
            },
            "itemsAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the alignment of legend items."
            },
            "itemTextPosition": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the position of text relative to the item marker."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the distance between the legend and surrounding widget elements or container borders in pixels.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's left margin in pixels."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's right margin in pixels."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's top margin in pixels."
                }
              }
            },
            "markerSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the size of item markers in the legend in pixels."
            },
            "orientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether to place legend items horizontally or vertically."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a blank space between a legend's left/right boundaries and the inner item boundaries in pixels."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a blank space between a legend's top/bottom boundaries and the inner item boundaries in pixels."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether the legend is located outside or inside the chart's plot."
            },
            "rowCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many rows it takes to arrange legend items."
            },
            "rowItemSpacing": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a blank space between legend rows in pixels."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a legend's position on the chart."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies the visibility state of the chart's legend."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "maxBubbleSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a coefficient determining the diameter of the largest bubble."
        },
        "minBubbleSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the diameter of the smallest bubble measured in pixels."
        },
        "negativesAsZeroes": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Forces the widget to treat negative values as zeroes. Applies to stacked-like series only."
        },
        "onArgumentAxisClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a label on the argument axis is clicked or tapped."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDone": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when all series are ready."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onLegendClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a legend item is clicked or tapped."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPointClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a series point is clicked or tapped."
        },
        "onPointHoverChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the pointer enters or leaves a series point."
        },
        "onPointSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a series point is selected or the selection is canceled."
        },
        "onSeriesClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a series is clicked or tapped."
        },
        "onSeriesHoverChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the pointer enters or leaves a series."
        },
        "onSeriesSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a series is selected or the selection is canceled."
        },
        "onTooltipHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip becomes hidden."
        },
        "onTooltipShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip appears."
        },
        "onZoomEnd": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when zooming or scrolling ends."
        },
        "onZoomStart": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when zooming or scrolling begins."
        },
        "palette": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "palette",
          "Description": "Sets the palette to be used for colorizing series and their elements."
        },
        "paletteExtensionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies what to do with colors in the palette when their number is less than the number of series (in the Chart widget) or points in a series (in the PieChart widget)."
        },
        "panes": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "pane",
          "Description": "Declares a collection of panes.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the pane's background."
            },
            "border": {
              "Description": "Configures the pane border.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows/hides the bottom border of the pane. Applies only when the border.visible option is true."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the pane border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of the pane border."
                },
                "left": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows/hides the left border of the pane. Applies only when the border.visible option is true."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent the pane border should be."
                },
                "right": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows/hides the right border of the pane. Applies only when the border.visible option is true."
                },
                "top": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows/hides the top border of the pane. Applies only when the border.visible option is true."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows the pane border."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the pane border in pixels."
                }
              }
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the pane."
            }
          }
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "pointSelectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether a single point or multiple points can be selected in the chart."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "resolveLabelOverlapping": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the chart must behave when series point labels overlap."
        },
        "rotated": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Swaps the axes around making the value axis horizontal and the argument axis vertical."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scrollBar": {
          "Description": "Specifies the settings of the scroll bar.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the scroll bar."
            },
            "offset": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the spacing between the scroll bar and the chart's plot in pixels."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the opacity of the scroll bar."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the position of the scroll bar in the chart."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the scroll bar is visible or not."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the scroll bar in pixels."
            }
          }
        },
        "scrollingMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Enables scrolling in your chart."
        },
        "series": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartSeries"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "ItemComplexTypes": [
            "ChartSeries"
          ],
          "IsCollection": true,
          "SingularName": "series",
          "Description": "Specifies options for Chart widget series."
        },
        "seriesSelectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether a single series or multiple series can be selected in the chart."
        },
        "seriesTemplate": {
          "Description": "Defines options for the series template.",
          "Options": {
            "customizeSeries": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns a series object with individual series settings."
            },
            "nameField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a data source field that represents the series name."
            }
          }
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "synchronizeMultiAxes": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Indicates whether or not to synchronize value axes when they are displayed on a single pane."
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Configures the widget's title.",
          "Options": {
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the widget's subtitle.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's text."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "argumentFormat": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats the point argument before it is displayed in the tooltip. To format the point value, use the format option."
            },
            "arrowLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of a tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Configures a tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of a tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip's border is visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of a tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors all tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "Element",
                "JQuery"
              ],
              "Description": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element."
            },
            "customizeTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Allows you to change tooltip appearance."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies tooltips' font options."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed it in a tooltip."
            },
            "location": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether the tooltip must be located in the center of a series point or on its edge. Applies to bar-like and bubble series only."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies tooltips' transparency."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
            },
            "shadow": {
              "Description": "Configures a tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's shadow."
                }
              }
            },
            "shared": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies the kind of information to display in a tooltip."
            },
            "zIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a tooltip's z-index."
            }
          }
        },
        "useAggregation": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsDeprecated": true,
          "Description": "Use CommonSeries.aggregation.enabled instead."
        },
        "valueAxis": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "valueAxis",
          "Description": "Configures the value axis.",
          "Options": {
            "allowDecimals": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to allow decimal values on the axis. When false, the axis contains integer values only."
            },
            "autoBreaksEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables auto-calculated scale breaks. Applies only if the axis' type is \"continuous\" or \"logarithmic\" and valueType is \"numeric\"."
            },
            "axisDivisionFactor": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum distance between two neighboring major ticks in pixels. Applies only to the axes of the \"continuous\" and \"logarithmic\" types."
            },
            "breaks": {
              "ItemPrimitiveTypes": [
                "DevExpress.viz.ScaleBreak"
              ],
              "IsCollection": true,
              "SingularName": "break",
              "Description": "Declares a custom scale break collection. Applies only if the axis' type is \"continuous\" or \"logarithmic\".",
              "Options": {
                "endValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Along with the startValue option, limits the scale break."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Along with the endValue option, limits the scale break."
                }
              }
            },
            "breakStyle": {
              "Description": "Configures the scale breaks' appearance.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the scale breaks' color."
                },
                "line": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the scale breaks' line style."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the scale breaks' width in pixels."
                }
              }
            },
            "categories": {
              "ItemPrimitiveTypes": [
                "number",
                "string",
                "Date"
              ],
              "IsCollection": true,
              "SingularName": "category",
              "Description": "Specifies the order of categories on an axis of the \"discrete\" type."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the axis line."
            },
            "constantLines": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "constantLine",
              "Description": "Declares a collection of constant lines belonging to the value axis.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of constant lines."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of constant lines."
                },
                "label": {
                  "Description": "Configures the constant line label.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for constant line labels."
                    },
                    "horizontalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns constant line labels in the horizontal direction."
                    },
                    "position": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the position of constant line labels on the chart plot."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text of a constant line label. By default, equals to the value of the constant line."
                    },
                    "verticalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns constant line labels in the vertical direction."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Makes constant line labels visible."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right side of a constant line and the constant line label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom side of a constant line and the constant line label."
                },
                "value": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Specifies the value indicated by a constant line. Setting this option is necessary."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of constant lines in pixels."
                }
              }
            },
            "constantLineStyle": {
              "Description": "Specifies the appearance of those constant lines that belong to the value axis.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of constant lines."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of constant lines."
                },
                "label": {
                  "Description": "Specifies the appearance of the labels of those constant lines that belong to the value axis.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for constant line labels."
                    },
                    "horizontalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns constant line labels in the horizontal direction."
                    },
                    "position": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the position of constant line labels on the chart plot."
                    },
                    "verticalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns constant line labels in the vertical direction."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Makes constant line labels visible."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right side of a constant line and the constant line label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom side of a constant line and the constant line label."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of constant lines in pixels."
                }
              }
            },
            "discreteAxisDivisionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether ticks and grid lines should cross axis labels or lie between them. Applies only to the axes of the \"discrete\" type."
            },
            "endOnTick": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to force the axis to start and end on ticks."
            },
            "grid": {
              "Description": "Configures the grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of grid lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent grid lines should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes grid lines visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of grid lines in pixels."
                }
              }
            },
            "inverted": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Inverts the axis."
            },
            "label": {
              "Description": "Configures the labels of the value axis.",
              "Options": {
                "alignment": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Aligns axis labels in relation to ticks."
                },
                "customizeHint": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Specifies the hint that appears when a user points to an axis label."
                },
                "customizeText": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Customizes the text displayed by axis labels."
                },
                "displayMode": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Allows you to rotate or stagger axis labels. Applies to the horizontal axis only."
                },
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for axis labels."
                },
                "format": {
                  "PrimitiveTypes": [
                    "DevExpress.ui.format",
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "Description": "Formats a value before it is displayed in an axis label."
                },
                "indentFromAxis": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Adds a pixel-measured empty space between an axis and its labels."
                },
                "overlappingBehavior": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Decides how to arrange axis labels when there is not enough space to keep all of them."
                },
                "rotationAngle": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the rotation angle of axis labels. Applies only if displayMode or overlappingBehavior is \"rotate\"."
                },
                "staggeringSpacing": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Adds a pixel-measured empty space between two staggered rows of axis labels. Applies only if displayMode or overlappingBehavior is \"stagger\"."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows/hides axis labels."
                }
              }
            },
            "logarithmBase": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the value to be raised to a power when generating ticks for an axis of the \"logarithmic\" type."
            },
            "max": {
              "PrimitiveTypes": [
                "Date",
                "number",
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the valueAxis.visualRange option instead."
            },
            "maxAutoBreakCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Sets a limit on auto-calculated scale breaks. Custom scale breaks are not counted."
            },
            "maxValueMargin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Controls the empty space between the maximum series points and the axis. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "min": {
              "PrimitiveTypes": [
                "Date",
                "number",
                "string"
              ],
              "IsDeprecated": true,
              "Description": "Use the valueAxis.visualRange option instead."
            },
            "minorGrid": {
              "Description": "Configures the minor grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the lines of the minor grid."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent the lines of the minor grid should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes the minor grid visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a width for the lines of the minor grid in pixels."
                }
              }
            },
            "minorTick": {
              "Description": "Configures the appearance of minor axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the length of minor ticks in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent minor ticks should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes minor ticks visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of minor ticks in pixels."
                }
              }
            },
            "minorTickCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many minor ticks to place between two neighboring major ticks."
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the interval between minor ticks. Applies only to continuous axes.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "minValueMargin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Controls the empty space between the minimum series points and the axis. Applies only to the axes of the \"continuous\" and \"logarithmic\" type."
            },
            "multipleAxesSpacing": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Adds a pixel-measured empty space between two side-by-side value axes. Applies if several value axes are located on one side of the chart."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the value axis."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how transparent the axis line should be."
            },
            "pane": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Binds the value axis to a pane."
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Reserves a pixel-measured space for the axis."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Relocates the value axis."
            },
            "showZero": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to show zero on the value axis."
            },
            "strips": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "strip",
              "Description": "Declares a collection of strips belonging to the value axis.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the strip."
                },
                "endValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Along with the startValue option, limits the strip."
                },
                "label": {
                  "Description": "Configures the strip label.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for strip labels."
                    },
                    "horizontalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns strip labels in the horizontal direction."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text of the strip label."
                    },
                    "verticalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns strip labels in the vertical direction."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right border of a strip and the strip label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom border of a strip and the strip label."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Along with the endValue option, limits the strip."
                }
              }
            },
            "stripStyle": {
              "Description": "Configures the appearance of strips.",
              "Options": {
                "label": {
                  "Description": "Configures the appearance of strip labels.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for strip labels."
                    },
                    "horizontalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns strip labels in the horizontal direction."
                    },
                    "verticalAlignment": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Aligns strip labels in the vertical direction."
                    }
                  }
                },
                "paddingLeftRight": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the left/right border of a strip and the strip label."
                },
                "paddingTopBottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Generates a pixel-measured empty space between the top/bottom border of a strip and the strip label."
                }
              }
            },
            "synchronizedValue": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Synchronizes two or more value axes with each other at a specific value."
            },
            "tick": {
              "Description": "Configures the appearance of major axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the length of ticks in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent ticks should be."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes ticks visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of ticks in pixels."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the interval between major ticks. Does not apply to discrete axes.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the axis title.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the axis title."
                },
                "margin": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Adds a pixel-measured empty space between the axis title and axis labels."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the axis title."
                }
              }
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the type of the value axis."
            },
            "valueMarginsEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Adds an empty space between the axis and the minimum and maximum series points."
            },
            "valueType": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Casts values to a specified data type."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Makes the axis line visible."
            },
            "visualRange": {
              "PrimitiveTypes": [
                "DevExpress.viz.VizRange"
              ],
              "ItemPrimitiveTypes": [
                "number",
                "string",
                "Date"
              ],
              "IsCollection": true,
              "SingularName": "visualRange"
            },
            "wholeRange": {
              "PrimitiveTypes": [
                "DevExpress.viz.VizRange"
              ],
              "ItemPrimitiveTypes": [
                "number",
                "string",
                "Date"
              ],
              "IsCollection": true,
              "SingularName": "wholeRange"
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the axis line in pixels."
            }
          }
        },
        "zoomingMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Enables zooming in your chart."
        }
      }
    },
    "dxCheckBox": {
      "Description": "The CheckBox is a small box, which when selected by the end user, shows that a particular feature has been enabled or a specific option has been chosen.",
      "Module": "ui/check_box",
      "IsEditor": true,
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed by the check box."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "Specifies the widget state."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxCircularGauge": {
      "Description": "The CircularGauge is a widget that indicates values on a circular numeric scale.",
      "Module": "viz/circular_gauge",
      "Options": {
        "animation": {
          "Description": "Specifies animation options.",
          "Options": {
            "duration": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Determines how long animation runs."
            },
            "easing": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the animation easing mode."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not animation is enabled."
            }
          }
        },
        "containerBackgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the parent page element."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "format",
              "Description": "Specifies a set of export formats."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Adds an empty space around the exported widget; measured in pixels."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export.enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            }
          }
        },
        "geometry": {
          "Description": "Specifies the options required to set the geometry of the CircularGauge widget.",
          "Options": {
            "endAngle": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the end angle of the circular gauge's arc."
            },
            "startAngle": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the start angle of the circular gauge's arc."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onTooltipHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip becomes hidden."
        },
        "onTooltipShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip appears."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "rangeContainer": {
          "Description": "Specifies gauge range container options.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a range container's background color."
            },
            "offset": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the offset of the range container from an invisible scale line in pixels."
            },
            "orientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the orientation of the range container in the CircularGauge widget."
            },
            "palette": {
              "PrimitiveTypes": [
                "string"
              ],
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "palette",
              "Description": "Specifies the palette to be used for colorizing ranges in the range container."
            },
            "paletteExtensionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies what to do with colors in the palette when their number is less than the number of ranges in the range container."
            },
            "ranges": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "range",
              "Description": "An array of objects representing ranges contained in the range container.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color of a range."
                },
                "endValue": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies an end value of a range."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a start value of a range."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the range container's width in pixels."
            }
          }
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scale": {
          "Description": "Specifies a gauge's scale options.",
          "Options": {
            "allowDecimals": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to allow decimal values on the scale. When false, the scale contains integer values only."
            },
            "customMinorTicks": {
              "ItemPrimitiveTypes": [
                "number"
              ],
              "IsCollection": true,
              "SingularName": "customMinorTick",
              "Description": "Specifies an array of custom minor ticks."
            },
            "customTicks": {
              "ItemPrimitiveTypes": [
                "number"
              ],
              "IsCollection": true,
              "SingularName": "customTick",
              "Description": "Specifies an array of custom major ticks."
            },
            "endValue": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the end value for the scale of the gauge."
            },
            "label": {
              "Description": "Specifies common options for scale labels.",
              "Options": {
                "customizeText": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Specifies a callback function that returns the text to be displayed in scale labels."
                },
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the text displayed in the scale labels of the gauge."
                },
                "format": {
                  "PrimitiveTypes": [
                    "DevExpress.ui.format",
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "Description": "Formats a value before it is displayed in a scale label. Accepts only numeric formats."
                },
                "hideFirstOrLast": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies which label to hide in case of overlapping."
                },
                "indentFromTick": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the spacing between scale labels and ticks."
                },
                "overlappingBehavior": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Decides how to arrange scale labels when there is not enough space to keep all of them."
                },
                "useRangeColors": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether or not scale labels should be colored similarly to their corresponding ranges in the range container."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether or not scale labels are visible on the gauge."
                }
              }
            },
            "minorTick": {
              "Description": "Specifies options of the gauge's minor ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the scale's minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the length of the scale's minor ticks."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of the scale's minor ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether scale minor ticks are visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the scale's minor ticks."
                }
              }
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies an interval between minor ticks."
            },
            "orientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the orientation of scale ticks."
            },
            "startValue": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the start value for the scale of the gauge."
            },
            "tick": {
              "Description": "Specifies options of the gauge's major ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the scale's major ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the length of the scale's major ticks."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of the scale's major ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether scale major ticks are visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the scale's major ticks."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies an interval between major ticks."
            }
          }
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "subvalueIndicator": {
          "ComplexTypes": [
            "GaugeIndicator"
          ],
          "Description": "Specifies the appearance options of subvalue indicators."
        },
        "subvalues": {
          "ItemPrimitiveTypes": [
            "number"
          ],
          "IsCollection": true,
          "SingularName": "subvalue",
          "Description": "Specifies a set of subvalues to be designated by the subvalue indicators."
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Configures the widget's title.",
          "Options": {
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the widget's subtitle.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's text."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of a tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Configures a tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of a tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip's border is visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of a tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors all tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "Element",
                "JQuery"
              ],
              "Description": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element."
            },
            "customizeTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Allows you to change the appearance of specified tooltips."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies tooltips' font options."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed it in a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies tooltips' transparency."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
            },
            "shadow": {
              "Description": "Configures a tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a tooltip's z-index."
            }
          }
        },
        "value": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the main value on a gauge."
        },
        "valueIndicator": {
          "ComplexTypes": [
            "GaugeIndicator"
          ],
          "Description": "Specifies the appearance options of the value indicator."
        }
      }
    },
    "dxColorBox": {
      "Description": "The ColorBox is a widget that allows an end user to enter a color or pick it out from the drop-down editor.",
      "Module": "ui/color_box",
      "IsEditor": true,
      "Options": {
        "acceptCustomValue": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget allows an end-user to enter a custom value."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "applyButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed on the button that applies changes and closes the drop-down editor."
        },
        "applyValueMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the way an end-user applies the selected value."
        },
        "cancelButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed on the button that cancels changes and closes the drop-down editor."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the drop-down field's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "dropDownButtonTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "editAlphaChannel": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget value includes the alpha channel component."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "fieldTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the input field. Must contain the TextBox widget."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "keyStep": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the size of a step by which a handle is moved using a keyboard shortcut."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onChange": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus after the content has been changed."
        },
        "onClosed": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is closed."
        },
        "onCopy": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been copied."
        },
        "onCut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been cut."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEnterKey": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the Enter key has been pressed while the widget is focused."
        },
        "onFocusIn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget gets focus."
        },
        "onFocusOut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onInput": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the widget's input is changed while the widget is focused."
        },
        "onKeyDown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user is pressing a key on the keyboard."
        },
        "onKeyPress": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user presses a key on the keyboard."
        },
        "onKeyUp": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user releases a key on the keyboard."
        },
        "onOpened": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is opened."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPaste": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been pasted."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "opened": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is empty."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsChangeable": true,
          "Description": "Specifies the currently selected value."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxContextMenu": {
      "Description": "The ContextMenu widget displays a single- or multi-level context menu. An end user invokes this menu by a right click or a long press.",
      "Module": "ui/context_menu",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget changes its state when interacting with a user."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "boolean",
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies whether to close the ContextMenu if a user clicks outside it."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the CSS class to be applied to the root menu level and all submenus."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "disabledExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget item is disabled."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxContextMenuItemTemplate"
          ],
          "ItemComplexTypes": [
            "ContextMenuItem"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "Holds an array of menu items."
        },
        "itemsExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field contains nested items."
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the ContextMenu is hidden."
        },
        "onHiding": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the ContextMenu is hidden."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPositioning": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the ContextMenu is positioned."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is selected or the selection is canceled."
        },
        "onShowing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the ContextMenu is shown."
        },
        "onShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the ContextMenu is shown."
        },
        "position": {
          "PrimitiveTypes": [
            "DevExpress.positionConfig"
          ],
          "ComplexTypes": [
            "PositionConfig"
          ],
          "Description": "An object defining widget positioning options."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "selectByClick": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not an item becomes selected if a user clicks it."
        },
        "selectedExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget items is selected."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "The selected item object."
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the selection mode supported by the menu."
        },
        "showEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options for displaying the widget.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The delay in milliseconds after which the widget is displayed."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the event names on which the widget is shown."
            }
          }
        },
        "showSubmenuMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options of submenu showing and hiding.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the delay of submenu show and hiding.",
              "Options": {
                "hide": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The time span after which the submenu is hidden."
                },
                "show": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The time span after which the submenu is shown."
                }
              }
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the mode name."
            }
          }
        },
        "submenuDirection": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the direction at which submenus are displayed."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "target": {
          "PrimitiveTypes": [
            "Element",
            "JQuery"
          ],
          "Description": "The target element associated with the context menu."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "A Boolean value specifying whether or not the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxDataGrid": {
      "Description": "The DataGrid is a widget that represents data from a local or remote source in the form of a grid. This widget offers such basic features as sorting, grouping, filtering, as well as more advanced capabilities, like state storing, export to Excel, master-detail interface, and many others.",
      "Module": "ui/data_grid",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "allowColumnReordering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can reorder columns."
        },
        "allowColumnResizing": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can resize columns."
        },
        "cacheEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether data should be cached."
        },
        "cellHintEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content."
        },
        "columnAutoWidth": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether columns should adjust their widths to the content."
        },
        "columnChooser": {
          "Description": "Configures the column chooser.",
          "Options": {
            "allowSearch": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether searching is enabled in the column chooser."
            },
            "emptyPanelText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed by the column chooser when it is empty."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can open the column chooser."
            },
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the column chooser."
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies how a user manages columns using the column chooser."
            },
            "searchTimeout": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a delay in milliseconds between when a user finishes typing in the column chooser's search panel, and when the search is executed."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title of the column chooser."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the column chooser."
            }
          }
        },
        "columnFixing": {
          "Description": "Configures column fixing.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables column fixing."
            },
            "texts": {
              "Description": "Contains options that specify texts for column fixing commands in the context menu of a column header.",
              "Options": {
                "fix": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu item that fixes a column."
                },
                "leftPosition": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu subitem that fixes a column to the left edge of the widget."
                },
                "rightPosition": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu subitem that fixes a column to the right edge of the widget."
                },
                "unfix": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu item that unfixes a column."
                }
              }
            }
          }
        },
        "columnHidingEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is \"widget\"."
        },
        "columnMinWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the minimum width of columns."
        },
        "columnResizingMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the widget resizes columns. Applies only if allowColumnResizing is true."
        },
        "columns": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxDataGridColumn"
          ],
          "ItemComplexTypes": [
            "DataGridColumn"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "column",
          "Description": "An array of grid columns."
        },
        "columnWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the width for all data columns. Has a lower priority than the column.width option."
        },
        "customizeColumns": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies a function that customizes grid columns after they are created."
        },
        "customizeExportData": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Customizes data before exporting."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "Specifies the origin of data for the widget."
        },
        "dateSerializationFormat": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies date-time values' serialization format. Use it only if you do not specify the dataSource at design time."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "editing": {
          "Description": "Configures editing.",
          "Options": {
            "allowAdding": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can add new rows."
            },
            "allowDeleting": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can delete rows."
            },
            "allowUpdating": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can update rows."
            },
            "form": {
              "PrimitiveTypes": [
                "DevExpress.ui.dxFormOptions"
              ],
              "ComplexTypes": [
                "dxFormOptions"
              ],
              "Description": "Configures the form. Used only if editing.mode is \"form\" or \"popup\"."
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies how a user edits data."
            },
            "popup": {
              "PrimitiveTypes": [
                "DevExpress.ui.dxPopupOptions"
              ],
              "ComplexTypes": [
                "dxPopupOptions"
              ],
              "Description": "Configures the popup. Used only if editing.mode is \"popup\"."
            },
            "texts": {
              "Description": "Contains options that specify texts for editing-related UI elements.",
              "Options": {
                "addRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint that appears when a user pauses on the global \"Add\" button. Applies only if editing.allowAdding is true."
                },
                "cancelAllChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint that appears when a user pauses on the \"Discard\" button. Applies only if editing.mode is \"batch\"."
                },
                "cancelRowChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a button that cancels changes in a row. Applies only if editing.allowUpdating is true and editing.mode is \"row\"."
                },
                "confirmDeleteMessage": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a message that prompts a user to confirm deletion."
                },
                "confirmDeleteTitle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a title for the window that asks a user to confirm deletion."
                },
                "deleteRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for buttons that delete rows. Applies only if allowDeleting is true."
                },
                "editRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for buttons that switch rows into the editing state. Applies only if allowUpdating is true."
                },
                "saveAllChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint that appears when a user pauses on the global \"Save\" button. Applies only if editing.mode is \"batch\"."
                },
                "saveRowChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a button that saves changes made in a row. Applies only if allowUpdating is true."
                },
                "undeleteRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for buttons that recover deleted rows. Applies only if allowDeleting is true and editing.mode is \"batch\"."
                },
                "validationCancelChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint appearing when a user pauses on the button that cancels changes in a cell. Applies only if editing.mode is \"cell\" and data validation is enabled."
                }
              }
            },
            "useIcons": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the editing column uses icons instead of links."
            }
          }
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "errorRowEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Indicates whether to show the error row."
        },
        "export": {
          "Description": "Configures client-side exporting.",
          "Options": {
            "allowExportSelectedData": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Allows an end user to export selected rows only."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the client-side exporting."
            },
            "excelFilterEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to enable Excel filtering for the exported data in the resulting XLSX file."
            },
            "excelWrapTextEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to enable word wrapping for the exported data in the resulting XLSX file."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which grid data is exported."
            },
            "ignoreExcelErrors": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether Excel should hide warnings if there are errors in the exported document."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            },
            "texts": {
              "Description": "Contains options that specify texts for the export-related commands and hints.",
              "Options": {
                "exportAll": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the command that exports all data."
                },
                "exportSelectedRows": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the drop-down menu command that exports selected rows."
                },
                "exportTo": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the hint of the Export button when the allowExportSelectedData option is true."
                }
              }
            }
          }
        },
        "filterBuilder": {
          "PrimitiveTypes": [
            "DevExpress.ui.dxFilterBuilderOptions"
          ],
          "ComplexTypes": [
            "dxFilterBuilderOptions"
          ],
          "Description": "Configures the integrated filter builder."
        },
        "filterBuilderPopup": {
          "PrimitiveTypes": [
            "DevExpress.ui.dxPopupOptions"
          ],
          "ComplexTypes": [
            "dxPopupOptions"
          ],
          "Description": "Configures the popup in which the integrated filter builder is shown."
        },
        "filterPanel": {
          "Description": "Configures the filter panel.",
          "Options": {
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Customizes the filter expression's text representation."
            },
            "filterEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the filter expression is applied."
            },
            "texts": {
              "Description": "Specifies texts for the filter panel's elements.",
              "Options": {
                "clearFilter": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The text of the \"Clear\" link."
                },
                "createFilter": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The text of the \"Create Filter\" link."
                },
                "filterEnabledHint": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The hint of the checkbox that applies the filter."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the filter panel is visible."
            }
          }
        },
        "filterRow": {
          "Description": "Configures the filter row.",
          "Options": {
            "applyFilter": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies when to apply a filter."
            },
            "applyFilterText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for a hint that appears when a user pauses on a button that applies the filter."
            },
            "betweenEndText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a placeholder for the editor that specifies the end of a range when a user selects the \"between\" filter operation."
            },
            "betweenStartText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a placeholder for the editor that specifies the start of a range when a user selects the \"between\" filter operation."
            },
            "operationDescriptions": {
              "Description": "Specifies descriptions for filter operations on the filter list.",
              "Options": {
                "between": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"between\" operation."
                },
                "contains": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"contains\" operation."
                },
                "endsWith": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"endswith\" operation."
                },
                "equal": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"=\" operation."
                },
                "greaterThan": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \">\" operation."
                },
                "greaterThanOrEqual": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \">=\" operation."
                },
                "lessThan": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"<\" operation."
                },
                "lessThanOrEqual": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"<=\" operation."
                },
                "notContains": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"notcontains\" operation."
                },
                "notEqual": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"<>\" operation."
                },
                "startsWith": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"startswith\" operation."
                }
              }
            },
            "resetOperationText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the reset operation on the filter list."
            },
            "showAllText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the item that clears the applied filter. Used only when a cell of the filter row contains a select box."
            },
            "showOperationChooser": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether icons that open the filter lists are visible."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the filter row is visible."
            }
          }
        },
        "filterSyncEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to synchronize the filter row, header filter, and filter builder. The synchronized filter expression is stored in the filterValue option."
        },
        "filterValue": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsFilterExpr": true,
          "Description": "Specifies a filter expression."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "grouping": {
          "Description": "Configures grouping.",
          "Options": {
            "allowCollapsing": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the user can collapse grouped records in a grid or not."
            },
            "autoExpandAll": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether groups appear expanded or not."
            },
            "contextMenuEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the user to group data using the context menu."
            },
            "expandMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the event on which a group will be expanded/collapsed."
            },
            "texts": {
              "Description": "Defines the texts of grouping-related visual elements.",
              "Options": {
                "groupByThisColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the context menu item that groups data by a specific column."
                },
                "groupContinuedMessage": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the message displayed in a group row when the corresponding group is continued from the previous page."
                },
                "groupContinuesMessage": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the message displayed in a group row when the corresponding group continues on the next page."
                },
                "ungroup": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the context menu item that clears grouping settings of a specific column."
                },
                "ungroupAll": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the context menu item that clears grouping settings of all columns."
                }
              }
            }
          }
        },
        "groupPanel": {
          "Description": "Configures the group panel.",
          "Options": {
            "allowColumnDragging": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether columns can be dragged onto or from the group panel."
            },
            "emptyPanelText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed by the group panel when it does not contain any columns."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean",
                "string"
              ],
              "Description": "Specifies whether the group panel is visible or not."
            }
          }
        },
        "headerFilter": {
          "Description": "Configures the header filter feature.",
          "Options": {
            "allowSearch": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether searching is enabled in the header filter."
            },
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the popup menu that contains values for filtering."
            },
            "searchTimeout": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a delay in milliseconds between when a user finishes typing in the header filter's search panel, and when the search is executed."
            },
            "texts": {
              "Description": "Contains options that specify text for various elements of the popup menu.",
              "Options": {
                "cancel": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the button that closes the popup menu without applying a filter."
                },
                "emptyValue": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a name for the item that represents empty values in the popup menu."
                },
                "ok": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the button that applies the specified filter."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether header filter icons are visible."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the popup menu that contains values for filtering."
            }
          }
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "keyExpr",
          "Description": "Specifies which data field provides keys for data items. Applies only if data is a simple array."
        },
        "loadPanel": {
          "Description": "Configures the load panel.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables displaying the load panel automatically."
            },
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the load panel in pixels."
            },
            "indicatorSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a URL pointing to an image to be used as a loading indicator."
            },
            "showIndicator": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator."
            },
            "showPane": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the pane of the load panel."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed on the load panel."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the load panel in pixels."
            }
          }
        },
        "masterDetail": {
          "Description": "Allows you to build a master-detail interface in the grid.",
          "Options": {
            "autoExpandAll": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether detail sections appear expanded or collapsed."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables an end-user to expand/collapse detail sections."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies a custom template for detail sections."
            }
          }
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text shown when the widget does not display any data."
        },
        "onAdaptiveDetailRowPreparing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before an adaptive detail row is rendered."
        },
        "onCellClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a cell is clicked or tapped. Executed before onRowClick."
        },
        "onCellHoverChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the pointer enters or leaves a cell."
        },
        "onCellPrepared": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a cell is created."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onContextMenuPreparing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the context menu is rendered."
        },
        "onDataErrorOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error occurs in the data source."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEditingStart": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a cell or row switches to the editing state."
        },
        "onEditorPrepared": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after an editor is created."
        },
        "onEditorPreparing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before an editor is created."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after data is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before data is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported data is saved to the user's local storage."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onInitNewRow": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a new row is added to the widget."
        },
        "onKeyDown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget is in focus and a key has been pressed down."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onRowClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a row is clicked or tapped."
        },
        "onRowCollapsed": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a row is collapsed."
        },
        "onRowCollapsing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a row is collapsed."
        },
        "onRowExpanded": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a row is expanded."
        },
        "onRowExpanding": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a row is expanded."
        },
        "onRowInserted": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a new row has been inserted into the data source."
        },
        "onRowInserting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a new row is inserted into the data source."
        },
        "onRowPrepared": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a row is created."
        },
        "onRowRemoved": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a row has been removed from the data source."
        },
        "onRowRemoving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a row is removed from the data source."
        },
        "onRowUpdated": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a row has been updated in the data source."
        },
        "onRowUpdating": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a row is updated in the data source."
        },
        "onRowValidating": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after cells in a row are validated against validation rules."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after selecting a row or clearing its selection."
        },
        "onToolbarPreparing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the toolbar is created."
        },
        "pager": {
          "Description": "Configures the pager.",
          "Options": {
            "allowedPageSizes": {
              "ItemPrimitiveTypes": [
                "number"
              ],
              "IsCollection": true,
              "SingularName": "allowedPageSize",
              "Description": "Specifies the available page sizes in the page size selector."
            },
            "infoText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the page information text."
            },
            "showInfo": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the page information."
            },
            "showNavigationButtons": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show navigation buttons."
            },
            "showPageSizeSelector": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the page size selector."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the pager is visible."
            }
          }
        },
        "paging": {
          "Description": "Configures paging.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables paging."
            },
            "pageIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "IsChangeable": true,
              "Description": "Specifies the page to be displayed using a zero-based index."
            },
            "pageSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "IsChangeable": true,
              "Description": "Specifies the page size."
            }
          }
        },
        "remoteOperations": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the DataGrid of the server's data processing operations.",
          "Options": {
            "filtering": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not filtering must be performed on the server side."
            },
            "grouping": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not grouping must be performed on the server side."
            },
            "groupPaging": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether paging by groups should be performed on the server side."
            },
            "paging": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not paging must be performed on the server side."
            },
            "sorting": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not sorting must be performed on the server side."
            },
            "summary": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not summaries calculation must be performed on the server."
            }
          }
        },
        "renderAsync": {
          "PrimitiveTypes": [
            "boolean"
          ]
        },
        "rowAlternationEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether rows should be shaded differently."
        },
        "rowTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for rows."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scrolling": {
          "Description": "Configures scrolling.",
          "Options": {
            "columnRenderingMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the rendering mode for columns. Applies when columns are left outside the viewport."
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the scrolling mode."
            },
            "preloadEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the widget should load pages adjacent to the current page. Applies only if scrolling.mode is \"virtual\"."
            },
            "rowRenderingMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the rendering mode for loaded rows."
            },
            "scrollByContent": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can scroll the content with a swipe gesture. Applies only if useNative is false."
            },
            "scrollByThumb": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can scroll the content with the scrollbar. Applies only if useNative is false."
            },
            "showScrollbar": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies when to show scrollbars. Applies only if useNative is false."
            },
            "useNative": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the widget should use native or simulated scrolling."
            }
          }
        },
        "searchPanel": {
          "Description": "Configures the search panel.",
          "Options": {
            "highlightCaseSensitive": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Notifies the widget whether search is case-sensitive to ensure proper highlightning of search results. Applies only if highlightSearchText is true."
            },
            "highlightSearchText": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether found substrings should be highlighted."
            },
            "placeholder": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a placeholder for the search panel."
            },
            "searchVisibleColumnsOnly": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the widget should search against all columns or only visible ones."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsChangeable": true,
              "Description": "Sets a search string for the search panel."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the search panel is visible or not."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the search panel in pixels."
            }
          }
        },
        "selectedRowKeys": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "selectedRowKey",
          "Description": "Allows you to select rows or determine which rows are selected."
        },
        "selection": {
          "Description": "Configures runtime selection.",
          "Options": {
            "allowSelectAll": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can select all rows at once."
            },
            "deferred": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Makes selection deferred."
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the selection mode."
            },
            "selectAllMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the mode in which all the records are selected. Applies only if selection.allowSelectAll is true."
            },
            "showCheckBoxesMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies when to display check boxes in rows. Applies only if selection.mode is \"multiple\"."
            }
          }
        },
        "selectionFilter": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsFilterExpr": true,
          "IsChangeable": true,
          "Description": "Specifies filters for the rows that must be selected initially. Applies only if selection.deferred is true."
        },
        "showBorders": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the outer borders of the widget are visible."
        },
        "showColumnHeaders": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether column headers are visible."
        },
        "showColumnLines": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether vertical lines that separate one column from another are visible."
        },
        "showRowLines": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether horizontal lines that separate one row from another are visible."
        },
        "sortByGroupSummaryInfo": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "sortByGroupSummaryInfo",
          "Description": "Allows you to sort groups according to the values of group summary items.",
          "Options": {
            "groupColumn": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the identifier of the column that must be used in grouping so that sorting by group summary item values be applied."
            },
            "sortOrder": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the sort order of group summary item values."
            },
            "summaryItem": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the group summary item whose values must be used to sort groups."
            }
          }
        },
        "sorting": {
          "Description": "Configures runtime sorting.",
          "Options": {
            "ascendingText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the context menu item that sets an ascending sort order in a column."
            },
            "clearText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the context menu item that clears sorting settings for a column."
            },
            "descendingText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the context menu item that sets a descending sort order in a column."
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the sorting mode."
            }
          }
        },
        "stateStoring": {
          "Description": "Configures state storing.",
          "Options": {
            "customLoad": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a function that is executed on state loading. Applies only if the type is 'custom'."
            },
            "customSave": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a function that is executed on state saving. Applies only if the type is \"custom\"."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables state storing."
            },
            "savingTimeout": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the delay in milliseconds between when a user makes a change and when this change is saved."
            },
            "storageKey": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the key for storing the widget state."
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the type of storage where the state is saved."
            }
          }
        },
        "summary": {
          "Description": "Specifies the options of the grid summary.",
          "Options": {
            "calculateCustomSummary": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a custom aggregate function. This function is called for summary items whose summaryType is \"custom\"."
            },
            "groupItems": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "groupItem",
              "Description": "Specifies items of the group summary.",
              "Options": {
                "alignByColumn": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether to display group summary items in parentheses after the group row header or to align them by the corresponding columns within the group row."
                },
                "column": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the column that provides data for a group summary item."
                },
                "customizeText": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Customizes the text to be displayed in the summary item."
                },
                "displayFormat": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the summary item text."
                },
                "name": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the identifier of a summary item."
                },
                "showInColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the column that must hold the summary item when this item is displayed in the group footer or aligned by a column in the group row."
                },
                "showInGroupFooter": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether or not a summary item must be displayed in the group footer."
                },
                "skipEmptyValues": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether or not to skip empty strings, null and undefined values when calculating a summary."
                },
                "summaryType": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies how to aggregate data for the group summary item."
                },
                "valueFormat": {
                  "PrimitiveTypes": [
                    "DevExpress.ui.format",
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "Description": "Specifies a summary item value's display format."
                }
              }
            },
            "skipEmptyValues": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to skip empty strings, null and undefined values when calculating a summary."
            },
            "texts": {
              "Description": "Contains options that specify text patterns for summary items.",
              "Options": {
                "avg": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the \"avg\" summary items when they are displayed in the parent column."
                },
                "avgOtherColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the \"avg\" summary items displayed in a group row or in any other column rather than the parent one."
                },
                "count": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the \"count\" summary items."
                },
                "max": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the \"max\" summary items when they are displayed in the parent column."
                },
                "maxOtherColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the \"max\" summary items displayed in a group row or in any other column rather than the parent one."
                },
                "min": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the \"min\" summary items when they are displayed in the parent column."
                },
                "minOtherColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the \"min\" summary items displayed in a group row or in any other column rather than the parent one."
                },
                "sum": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the \"sum\" summary items when they are displayed in the parent column."
                },
                "sumOtherColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the \"sum\" summary items displayed in a group row or in any other column rather than the parent one."
                }
              }
            },
            "totalItems": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "totalItem",
              "Description": "Specifies items of the total summary.",
              "Options": {
                "alignment": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the alignment of a summary item."
                },
                "column": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the column that provides data for a summary item."
                },
                "cssClass": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a CSS class to be applied to a summary item."
                },
                "customizeText": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Customizes the text to be displayed in the summary item."
                },
                "displayFormat": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a pattern for the summary item text."
                },
                "name": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the identifier of a summary item."
                },
                "showInColumn": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the column that must hold the summary item."
                },
                "skipEmptyValues": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether or not to skip empty strings, null and undefined values when calculating a summary."
                },
                "summaryType": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies how to aggregate data for the total summary item."
                },
                "valueFormat": {
                  "PrimitiveTypes": [
                    "DevExpress.ui.format",
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "Description": "Specifies a summary item value's display format."
                }
              }
            }
          }
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "twoWayBindingEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to enable two-way data binding."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        },
        "wordWrapEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether text that does not fit into a column should be wrapped."
        }
      }
    },
    "dxDateBox": {
      "Description": "The DateBox is a widget that displays date and time in a specified format, and enables a user to pick or type in the required date/time value.",
      "Module": "ui/date_box",
      "IsEditor": true,
      "Options": {
        "acceptCustomValue": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget allows an end-user to enter a custom value."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "adaptivityEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not adaptive widget rendering is enabled on a small screen."
        },
        "applyButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the Apply button."
        },
        "applyValueMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the way an end-user applies the selected value."
        },
        "calendarOptions": {
          "PrimitiveTypes": [
            "DevExpress.ui.dxCalendarOptions"
          ],
          "ComplexTypes": [
            "dxCalendarOptions"
          ],
          "Description": "Configures the calendar's value picker. Applies only if the pickerType is \"calendar\"."
        },
        "cancelButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the Cancel button."
        },
        "dateOutOfRangeMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message displayed if the specified date is later than the max value or earlier than the min value."
        },
        "dateSerializationFormat": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the date-time value serialization format. Use it only if you do not specify the value at design time."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the drop-down field's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "disabledDates": {
          "PrimitiveTypes": [
            "Function"
          ],
          "ItemPrimitiveTypes": [
            "Date"
          ],
          "IsCollection": true,
          "IsFunc": true,
          "SingularName": "disabledDate",
          "Description": "Specifies dates to be disabled. Applies only if pickerType is \"calendar\"."
        },
        "displayFormat": {
          "PrimitiveTypes": [
            "DevExpress.ui.format",
            "string"
          ],
          "ComplexTypes": [
            "Format"
          ],
          "Description": "Specifies the date display format. Ignored if the pickerType option is \"native\""
        },
        "dropDownButtonTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "interval": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the interval between neighboring values in the popup list in minutes."
        },
        "invalidDateMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message displayed if the typed value is not a valid date or time."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "max": {
          "PrimitiveTypes": [
            "Date",
            "number",
            "string"
          ],
          "Description": "The last date that can be selected within the widget."
        },
        "maxLength": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the maximum number of characters you can enter into the textbox."
        },
        "maxZoomLevel": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsDeprecated": true,
          "Description": "Use the calendarOptions option instead."
        },
        "min": {
          "PrimitiveTypes": [
            "Date",
            "number",
            "string"
          ],
          "Description": "The minimum date that can be selected within the widget."
        },
        "minZoomLevel": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsDeprecated": true,
          "Description": "Use the calendarOptions option instead."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onChange": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus after the content has been changed."
        },
        "onClosed": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is closed."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onCopy": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been copied."
        },
        "onCut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been cut."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEnterKey": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the Enter key has been pressed while the widget is focused."
        },
        "onFocusIn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget gets focus."
        },
        "onFocusOut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onInput": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the widget's input is changed while the widget is focused."
        },
        "onKeyDown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user is pressing a key on the keyboard."
        },
        "onKeyPress": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user presses a key on the keyboard."
        },
        "onKeyUp": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user releases a key on the keyboard."
        },
        "onOpened": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is opened."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPaste": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been pasted."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "opened": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "pickerType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the type of the date/time picker."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a placeholder for the input field."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showAnalogClock": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to show the analog clock in the value picker. Applies only if type is \"datetime\" and pickerType is \"calendar\"."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "showDropDownButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the drop-down button is visible."
        },
        "spellcheck": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget checks the inner text for spelling mistakes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A format used to display date/time information."
        },
        "useMaskBehavior": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to use an input mask converted from the displayFormat."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "Date",
            "number",
            "string"
          ],
          "IsChangeable": true,
          "Description": "An object or a value specifying the date and time currently selected using the date box."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxDeferRendering": {
      "Description": "The DeferRendering is a widget that waits for its content to be ready before rendering it. While the content is getting ready, the DeferRendering displays a loading indicator.",
      "Module": "ui/defer_rendering",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "animation": {
          "PrimitiveTypes": [
            "DevExpress.animationConfig"
          ],
          "ComplexTypes": [
            "AnimationConfig"
          ],
          "Description": "Specifies the animation to be used to show the rendered content."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the content is rendered but not yet displayed."
        },
        "onShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the content is displayed and animation is completed."
        },
        "renderWhen": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "ItemPrimitiveTypes": [
            "void"
          ],
          "IsPromise": true,
          "Description": "Specifies when the widget content is rendered."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showLoadIndicator": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Indicates if a load indicator should be shown until the widget's content is rendered."
        },
        "staggerItemSelector": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a jQuery selector of items that should be rendered using a staggered animation."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxDrawer": {
      "Description": "The base class for widgets.",
      "IsTranscludedContent": true,
      "Module": "ui/drawer",
      "Options": {
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "animationDuration": {
          "PrimitiveTypes": [
            "number"
          ]
        },
        "animationEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ]
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "boolean",
            "Function"
          ],
          "IsFunc": true
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "maxSize": {
          "PrimitiveTypes": [
            "number"
          ]
        },
        "minSize": {
          "PrimitiveTypes": [
            "number"
          ]
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "opened": {
          "PrimitiveTypes": [
            "boolean"
          ]
        },
        "openedStateMode": {
          "PrimitiveTypes": [
            "string"
          ]
        },
        "position": {
          "PrimitiveTypes": [
            "string"
          ]
        },
        "revealMode": {
          "PrimitiveTypes": [
            "string"
          ]
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "shading": {
          "PrimitiveTypes": [
            "boolean"
          ]
        },
        "template": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxDropDownBox": {
      "Description": "The DropDownBox widget consists of a text field, which displays the current value, and a drop-down field, which can contain any UI element.",
      "Module": "ui/drop_down_box",
      "IsEditor": true,
      "Options": {
        "acceptCustomValue": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget allows a user to enter a custom value."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "contentTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down content."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data the widget should display."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the drop-down field's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "dropDownButtonTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "dropDownOptions": {
          "PrimitiveTypes": [
            "DevExpress.ui.dxPopupOptions"
          ],
          "ComplexTypes": [
            "dxPopupOptions"
          ],
          "Description": "Configures the drop-down field which holds the content."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "fieldTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the text field. Must contain the TextBox widget."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onChange": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus after the content has been changed."
        },
        "onClosed": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is closed."
        },
        "onCopy": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been copied."
        },
        "onCut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been cut."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEnterKey": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the Enter key has been pressed while the widget is focused."
        },
        "onFocusIn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget gets focus."
        },
        "onFocusOut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onInput": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the widget's input is changed while the widget is focused."
        },
        "onKeyDown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user is pressing a key on the keyboard."
        },
        "onKeyPress": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user presses a key on the keyboard."
        },
        "onKeyUp": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user releases a key on the keyboard."
        },
        "onOpened": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is opened."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPaste": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been pasted."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "opened": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is empty."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "showDropDownButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the drop-down button is visible."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the currently selected value. May be an object if dataSource contains objects and valueExpr is not set."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies after which DOM events the widget updates the value."
        },
        "valueExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides the widget's value. When this option is not set, the value is the entire data object."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxFileUploader": {
      "Description": "The FileUploader widget enables an end user to upload files to the server. An end user can select files in the file explorer or drag and drop files to the FileUploader area on the page.",
      "Module": "ui/file_uploader",
      "Options": {
        "accept": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a file type or several types accepted by the widget."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "allowCanceling": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies if an end user can remove a file from the selection and interrupt uploading."
        },
        "allowedFileExtensions": {
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "allowedFileExtension",
          "Description": "Restricts file extensions that can be uploaded to the server."
        },
        "chunkSize": {
          "PrimitiveTypes": [
            "number"
          ]
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "invalidFileExtensionMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed when the extension of the file being uploaded is not an allowed file extension."
        },
        "invalidMaxFileSizeMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed when the size of the file being uploaded is greater than the maxFileSize."
        },
        "invalidMinFileSizeMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed when the size of the file being uploaded is less than the minFileSize."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "labelText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed on the area to which an end-user can drop a file."
        },
        "maxFileSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the maximum file size allowed for uploading."
        },
        "minFileSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the minimum file size allowed for uploading."
        },
        "multiple": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget enables an end-user to select a single file or multiple files."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the value passed to the name attribute of the underlying input element."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onProgress": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a file segment is uploaded."
        },
        "onUploadAborted": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the file upload is aborted."
        },
        "onUploaded": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a file is successfully uploaded."
        },
        "onUploadError": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error occurs during the file upload."
        },
        "onUploadStarted": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the file upload is started."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when one or several files are added to or removed from the selection."
        },
        "progress": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Gets the current progress in percentages."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "readyToUploadMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The message displayed by the widget when it is ready to upload the specified files."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "selectButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the button that opens the file browser."
        },
        "showFileList": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget displays the list of selected files."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "uploadButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the button that starts uploading."
        },
        "uploadedMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The message displayed by the widget when uploading is finished."
        },
        "uploadFailedMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The message displayed by the widget on uploading failure."
        },
        "uploadHeaders": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies headers for the upload request."
        },
        "uploadMethod": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the method for the upload request."
        },
        "uploadMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the widget uploads files."
        },
        "uploadUrl": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a target Url for the upload request."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "value": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "value",
          "Description": "Specifies a File instance representing the selected file. Read-only when uploadMode is \"useForm\"."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxFilterBuilder": {
      "Description": "The FilterBuilder widget allows a user to build complex filter expressions with an unlimited number of filter conditions, combined by logical operations using the UI.",
      "Module": "ui/filter_builder",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "allowHierarchicalFields": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can display hierarchical data fields."
        },
        "customOperations": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxFilterBuilderCustomOperation"
          ],
          "ItemComplexTypes": [
            "FilterBuilderCustomOperation"
          ],
          "IsCollection": true,
          "SingularName": "customOperation",
          "Description": "Configures custom filter operations."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "fields": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxFilterBuilderField"
          ],
          "ItemComplexTypes": [
            "FilterBuilderField"
          ],
          "IsCollection": true,
          "SingularName": "field",
          "Description": "Configures fields."
        },
        "filterOperationDescriptions": {
          "Description": "Specifies filter operation descriptions.",
          "Options": {
            "between": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"between\" operation's description."
            },
            "contains": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"contains\" operation's description."
            },
            "endsWith": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"endswith\" operation's description."
            },
            "equal": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"=\" operation's description."
            },
            "greaterThan": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \">\" operation's description."
            },
            "greaterThanOrEqual": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \">=\" operation's description."
            },
            "isBlank": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"isblank\" operation's description."
            },
            "isNotBlank": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"isnotblank\" operation's description."
            },
            "lessThan": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"<\" operation's description."
            },
            "lessThanOrEqual": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"<=\" operation's description."
            },
            "notContains": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"notcontains\" operation's description."
            },
            "notEqual": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"<>\" operation's description."
            },
            "startsWith": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"startswith\" operation's description."
            }
          }
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "groupOperationDescriptions": {
          "Description": "Specifies group operation descriptions.",
          "Options": {
            "and": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"and\" operation's description."
            },
            "notAnd": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"notand\" operation's description."
            },
            "notOr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"notor\" operation's description."
            },
            "or": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The \"or\" operation's description."
            }
          }
        },
        "groupOperations": {
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "groupOperation",
          "Description": "Specifies a set of available group operations."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "maxGroupLevel": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies groups' maximum nesting level."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEditorPrepared": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after an editor is created."
        },
        "onEditorPreparing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before an editor is created."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsFilterExpr": true,
          "IsChangeable": true,
          "Description": "Allows you to specify a filter."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxForm": {
      "Description": "The Form widget represents fields of a data object as a collection of label-editor pairs. These pairs can be arranged in several groups, tabs and columns.",
      "Module": "ui/form",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "alignItemLabels": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not all root item labels are aligned."
        },
        "alignItemLabelsInAllGroups": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not item labels in all groups are aligned."
        },
        "colCount": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "The count of columns in the form layout."
        },
        "colCountByScreen": {
          "Description": "Specifies dependency between the screen factor and the count of columns in the form layout.",
          "Options": {
            "lg": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The count of columns for a large screen size."
            },
            "md": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The count of columns for a middle-sized screen."
            },
            "sm": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The count of columns for a small-sized screen."
            },
            "xs": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The count of columns for an extra small-sized screen."
            }
          }
        },
        "customizeItem": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies a function that customizes a form item after it has been created."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "formData": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "Provides the Form's data. Gets updated every time form fields change."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxFormSimpleItem",
            "DevExpress.ui.dxFormGroupItem",
            "DevExpress.ui.dxFormTabbedItem",
            "DevExpress.ui.dxFormEmptyItem",
            "DevExpress.ui.dxFormButtonItem"
          ],
          "ItemComplexTypes": [
            "FormSimpleItem",
            "FormGroupItem",
            "FormTabbedItem",
            "FormEmptyItem",
            "FormButtonItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "Holds an array of form items."
        },
        "labelLocation": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the location of a label against the editor."
        },
        "minColWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The minimum column width used for calculating column count in the form layout."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEditorEnterKey": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the Enter key has been pressed while an editor is focused."
        },
        "onFieldDataChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the value of a formData object field is changed."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "optionalMark": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed for optional fields."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether all editors on the form are read-only. Applies only to non-templated items."
        },
        "requiredMark": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed for required fields."
        },
        "requiredMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if a required field value is not specified."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "screenByWidth": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies the function returning the screen factor depending on the screen width."
        },
        "scrollingEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether to enable or disable form scrolling."
        },
        "showColonAfterLabel": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not a colon is displayed at the end of form labels."
        },
        "showOptionalMark": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the optional mark is displayed for optional fields."
        },
        "showRequiredMark": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the required mark is displayed for required fields."
        },
        "showValidationSummary": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the total validation summary is displayed on the form."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "validationGroup": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Gives a name to the internal validation group."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxFunnel": {
      "Description": "The Funnel is a widget that visualizes a value at different stages. It helps assess value changes throughout these stages and identify potential issues. The Funnel widget conveys information using different interactive elements (tooltips, labels, legend) and enables you to create not only a funnel, but also a pyramid chart.",
      "Module": "viz/funnel",
      "Options": {
        "adaptiveLayout": {
          "Description": "Specifies adaptive layout options.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the widget's height small enough for the layout to begin adapting."
            },
            "keepLabels": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether item labels should be kept when the layout is adapting."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the widget's width small enough for the layout to begin adapting."
            }
          }
        },
        "algorithm": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the algorithm for building the funnel."
        },
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides arguments for funnel items. The argument identifies a funnel item and represents it on the legend."
        },
        "colorField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides colors for funnel items. If this field is absent, the palette provides the colors."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "Specifies the widget's data origin."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "format",
              "Description": "Specifies a set of export formats."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Adds an empty space around the exported widget; measured in pixels."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export.enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            }
          }
        },
        "hoverEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether funnel items change their style when a user pauses on them."
        },
        "inverted": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Turns the funnel upside down."
        },
        "item": {
          "Description": "Configures funnel items' appearance.",
          "Options": {
            "border": {
              "Description": "Configures a funnel item's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a funnel item's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes a funnel item's border visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets the width of a funnel item's border in pixels."
                }
              }
            },
            "hoverStyle": {
              "Description": "Configures a funnel item's appearance when a user presses the item or hovers the mouse pointer over it.",
              "Options": {
                "border": {
                  "Description": "Configures a funnel item's border appearance when a user presses the item or hovers the mouse pointer over it.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Colors a funnel item's border when a user presses the item or hovers the mouse pointer over it."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Shows a funnel item's border when a user presses the item or hovers the mouse pointer over it."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Thickens a funnel item's border when a user presses the item or hovers the mouse pointer over it."
                    }
                  }
                },
                "hatching": {
                  "Description": "Applies hatching to a funnel item when a user presses the item or hovers the mouse pointer over it.",
                  "Options": {
                    "direction": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies hatching line direction."
                    },
                    "opacity": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the transparency of hatching lines."
                    },
                    "step": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the distance between two side-by-side hatching lines in pixels."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies hatching lines' width in pixels."
                    }
                  }
                }
              }
            },
            "selectionStyle": {
              "Description": "Configures a funnel item's appearance when a user selects it.",
              "Options": {
                "border": {
                  "Description": "Configures a funnel item's border appearance when a user selects this item.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Colors the selected funnel item's border."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Shows the selected funnel item's border."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Thickens the selected funnel item's border."
                    }
                  }
                },
                "hatching": {
                  "Description": "Applies hatching to a selected funnel item.",
                  "Options": {
                    "direction": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies hatching line direction."
                    },
                    "opacity": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies hatching line transparency."
                    },
                    "step": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the distance between two side-by-side hatching lines in pixels."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies hatching line width in pixels."
                    }
                  }
                }
              }
            }
          }
        },
        "label": {
          "Description": "Configures funnel item labels.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the labels' background. The default color is inherited from the funnel items."
            },
            "border": {
              "Description": "Configures the label borders.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the label borders."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets the label border dash style."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows the label borders."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the label border width."
                }
              }
            },
            "connector": {
              "Description": "Configures label connectors.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors label connectors."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of label connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows label connectors."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the label connector width in pixels."
                }
              }
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Customizes labels' text."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies labels' font options."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats the item value before displaying it in the label."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies labels' position in relation to the funnel items."
            },
            "horizontalOffset": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Moves labels from their initial positions."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether to display labels inside or outside funnel items or arrange them in columns."
            },
            "showForZeroValues": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show labels for items with zero value."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Controls the labels' visibility."
            }
          }
        },
        "legend": {
          "Description": "Configures the legend.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the legend's background."
            },
            "border": {
              "Description": "Configures the legend's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the legend's border."
                },
                "cornerRadius": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Makes all the legend's corners rounded."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a dash style for the legend's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of the legend's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows the legend's border."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the legend's border in pixels."
                }
              }
            },
            "columnCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Arranges legend items into several columns."
            },
            "columnItemSpacing": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies an empty space between item columns in pixels."
            },
            "customizeHint": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies the hint that appears when a user hovers the mouse pointer over a legend item."
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Customizes the text displayed by legend items."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies the legend items' font options."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Along with verticalAlignment, specifies the legend's position."
            },
            "itemsAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Aligns items in the last column or row (depending on the legend's orientation). Applies when legend items are not divided into columns or rows equally."
            },
            "itemTextPosition": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text's position relative to the marker in a legend item."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, around the legend.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's left margin in pixels."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's right margin in pixels."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's top margin in pixels."
                }
              }
            },
            "markerSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the marker's size in a legend item in pixels."
            },
            "orientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Arranges legend items vertically (in a column) or horizontally (in a row). The default value is \"horizontal\" if the legend.horizontalAlignment is \"center\". Otherwise, it is \"vertical\"."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between the legend's left/right border and its items."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between the legend's top/bottom border and its items."
            },
            "rowCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Arranges legend items in several rows."
            },
            "rowItemSpacing": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies an empty space between item rows in pixels."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Along with horizontalAlignment, specifies the legend's position."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies the legend's visibility."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "neckHeight": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the ratio between the height of the neck and that of the whole funnel. Accepts values from 0 to 1. Applies only if the algorithm is \"dynamicHeight\"."
        },
        "neckWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the ratio between the width of the neck and that of the whole funnel. Accepts values from 0 to 1. Applies only if the algorithm is \"dynamicHeight\"."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onHoverChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the pointer enters or leaves a funnel item."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a funnel item is clicked or tapped."
        },
        "onLegendClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a legend item is clicked or tapped."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a funnel item is selected or the selection is canceled."
        },
        "palette": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "palette",
          "Description": "Sets the palette to be used to colorize funnel items."
        },
        "paletteExtensionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies what to do with colors in the palette when their number is less than the number of funnel items."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether a single or multiple funnel items can be in the selected state at a time. Assigning \"none\" disables the selection feature."
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "sortData": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to sort funnel items."
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Configures the widget's title.",
          "Options": {
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the widget's subtitle.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's text."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips - small pop-up rectangles that display information about a data-visualizing widget element being pressed or hovered over with the mouse pointer.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of a tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Configures a tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of a tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip's border is visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of a tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors all tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "Element",
                "JQuery"
              ],
              "Description": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element."
            },
            "customizeTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Customizes a specific tooltip's appearance."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies tooltips' font options."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed it in a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies tooltips' transparency."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
            },
            "shadow": {
              "Description": "Configures a tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a tooltip's z-index."
            }
          }
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides values for funnel items. The value defines a funnel item's area."
        }
      }
    },
    "dxGallery": {
      "Description": "The Gallery is a widget that displays a collection of images in a carousel. The widget is supplied with various navigation controls that allow a user to switch between images.",
      "Module": "ui/gallery",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "animationDuration": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time, in milliseconds, spent on slide animation."
        },
        "animationEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to animate the displayed item change."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "indicatorEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to allow users to switch between items by clicking an indicator."
        },
        "initialItemWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the width of an area used to display a single image."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "imageAlt": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text passed to the alt attribute of the image markup element."
            },
            "imageSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the image displayed by the item."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "loop": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to scroll back to the first item after the last item is swiped."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is selected or the selection is canceled."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "The index of the currently active gallery item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "The selected item object."
        },
        "showIndicator": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to display an indicator that points to the selected gallery item."
        },
        "showNavButtons": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value that specifies the availability of the \"Forward\" and \"Back\" navigation buttons."
        },
        "slideshowDelay": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time interval in milliseconds, after which the gallery switches to the next item."
        },
        "stretchImages": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies if the widget stretches images to fit the total gallery width."
        },
        "swipeEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to allow users to switch between items by swiping."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        },
        "wrapAround": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to display parts of previous and next images along the sides of the current image."
        }
      }
    },
    "dxLinearGauge": {
      "Description": "The LinearGauge is a widget that indicates values on a linear numeric scale.",
      "Module": "viz/linear_gauge",
      "Options": {
        "animation": {
          "Description": "Specifies animation options.",
          "Options": {
            "duration": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Determines how long animation runs."
            },
            "easing": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the animation easing mode."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not animation is enabled."
            }
          }
        },
        "containerBackgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the parent page element."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "format",
              "Description": "Specifies a set of export formats."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Adds an empty space around the exported widget; measured in pixels."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export.enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            }
          }
        },
        "geometry": {
          "Description": "Specifies the options required to set the geometry of the LinearGauge widget.",
          "Options": {
            "orientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Indicates whether to display the LinearGauge widget vertically or horizontally."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onTooltipHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip becomes hidden."
        },
        "onTooltipShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip appears."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "rangeContainer": {
          "Description": "Specifies gauge range container options.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a range container's background color."
            },
            "horizontalOrientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the orientation of the range container. Applies only if the geometry.orientation option is \"vertical\"."
            },
            "offset": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the offset of the range container from an invisible scale line in pixels."
            },
            "palette": {
              "PrimitiveTypes": [
                "string"
              ],
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "palette",
              "Description": "Specifies the palette to be used for colorizing ranges in the range container."
            },
            "paletteExtensionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies what to do with colors in the palette when their number is less than the number of ranges in the range container."
            },
            "ranges": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "range",
              "Description": "An array of objects representing ranges contained in the range container.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color of a range."
                },
                "endValue": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies an end value of a range."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a start value of a range."
                }
              }
            },
            "verticalOrientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the orientation of the range container. Applies only if the geometry.orientation option is \"horizontal\"."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the range container's start and end boundaries in the LinearGauge widget.",
              "Options": {
                "end": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies an end width of a range container."
                },
                "start": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a start width of a range container."
                }
              }
            }
          }
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scale": {
          "Description": "Specifies the gauge's scale options.",
          "Options": {
            "allowDecimals": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to allow decimal values on the scale. When false, the scale contains integer values only."
            },
            "customMinorTicks": {
              "ItemPrimitiveTypes": [
                "number"
              ],
              "IsCollection": true,
              "SingularName": "customMinorTick",
              "Description": "Specifies an array of custom minor ticks."
            },
            "customTicks": {
              "ItemPrimitiveTypes": [
                "number"
              ],
              "IsCollection": true,
              "SingularName": "customTick",
              "Description": "Specifies an array of custom major ticks."
            },
            "endValue": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the end value for the scale of the gauge."
            },
            "horizontalOrientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the orientation of scale ticks. Applies only if the geometry.orientation option is \"vertical\"."
            },
            "label": {
              "Description": "Specifies common options for scale labels.",
              "Options": {
                "customizeText": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Specifies a callback function that returns the text to be displayed in scale labels."
                },
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the text displayed in the scale labels of the gauge."
                },
                "format": {
                  "PrimitiveTypes": [
                    "DevExpress.ui.format",
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "Description": "Formats a value before it is displayed in a scale label. Accepts only numeric formats."
                },
                "indentFromTick": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the spacing between scale labels and ticks."
                },
                "overlappingBehavior": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Decides how to arrange scale labels when there is not enough space to keep all of them."
                },
                "useRangeColors": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether or not scale labels should be colored similarly to their corresponding ranges in the range container."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether or not scale labels are visible on the gauge."
                }
              }
            },
            "minorTick": {
              "Description": "Specifies options of the gauge's minor ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the scale's minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the length of the scale's minor ticks."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of the scale's minor ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether scale minor ticks are visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the scale's minor ticks."
                }
              }
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies an interval between minor ticks."
            },
            "startValue": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the start value for the scale of the gauge."
            },
            "tick": {
              "Description": "Specifies options of the gauge's major ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the scale's major ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the length of the scale's major ticks."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of the scale's major ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether scale major ticks are visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the scale's major ticks."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies an interval between major ticks."
            },
            "verticalOrientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the orientation of scale ticks. Applies only if the geometry.orientation option is \"horizontal\"."
            }
          }
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "subvalueIndicator": {
          "ComplexTypes": [
            "GaugeIndicator"
          ],
          "Description": "Specifies the appearance options of subvalue indicators."
        },
        "subvalues": {
          "ItemPrimitiveTypes": [
            "number"
          ],
          "IsCollection": true,
          "SingularName": "subvalue",
          "Description": "Specifies a set of subvalues to be designated by the subvalue indicators."
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Configures the widget's title.",
          "Options": {
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the widget's subtitle.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's text."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of a tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Configures a tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of a tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip's border is visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of a tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors all tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "Element",
                "JQuery"
              ],
              "Description": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element."
            },
            "customizeTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Allows you to change the appearance of specified tooltips."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies tooltips' font options."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed it in a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies tooltips' transparency."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
            },
            "shadow": {
              "Description": "Configures a tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a tooltip's z-index."
            }
          }
        },
        "value": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the main value on a gauge."
        },
        "valueIndicator": {
          "ComplexTypes": [
            "GaugeIndicator"
          ],
          "Description": "Specifies the appearance options of the value indicator."
        }
      }
    },
    "dxList": {
      "Description": "The List is a widget that represents a collection of items in a scrollable list.",
      "Module": "ui/list",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "allowItemDeleting": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not an end user can delete list items."
        },
        "allowItemReordering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can reorder list items. Grouped items cannot be moved from one group to another."
        },
        "bounceEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether to enable or disable the bounce-back effect."
        },
        "collapsibleGroups": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not an end-user can collapse groups."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "grouped": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether data items should be grouped."
        },
        "groupTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for group captions."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "indicateLoading": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to show the loading panel when the DataSource bound to the widget is loading data."
        },
        "itemDeleteMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the way a user can delete items from the list."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "badge": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text of a badge displayed for the list item."
            },
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "key": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the list items group in a grouped list."
            },
            "showChevron": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to display a chevron for the list item."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides keys for widget items."
        },
        "menuItems": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "menuItem",
          "Description": "Specifies the array of items for a context menu called for a list item.",
          "Options": {
            "action": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Holds on a function called when the item is clicked."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the menu item text."
            }
          }
        },
        "menuMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether an item context menu is shown when a user holds or swipes an item."
        },
        "nextButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the button used to load the next page from the data source."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onGroupRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a group element is rendered."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a list item is clicked or tapped. Applies only if the selectionMode is \"none\"."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemDeleted": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a list item is deleted from the data source."
        },
        "onItemDeleting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a collection item is deleted from the data source."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onItemReordered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a list item is moved to another position."
        },
        "onItemSwipe": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a list item is swiped."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPageLoading": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the next page is loaded."
        },
        "onPullRefresh": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the \"pull to refresh\" gesture is performed. Supported in mobile themes only."
        },
        "onScroll": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed on each scroll gesture."
        },
        "onSelectAllValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the \"Select All\" check box value is changed. Applies only if the selectionMode is \"all\"."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is selected or the selection is canceled."
        },
        "pageLoadingText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel, which is displayed when the list is scrolled to the bottom."
        },
        "pageLoadMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether the next page is loaded when a user scrolls the widget to the bottom or when the \"next\" button is clicked."
        },
        "pulledDownText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed in the pullDown panel when the list is pulled below the refresh threshold."
        },
        "pullingDownText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold."
        },
        "pullRefreshEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget supports the \"pull down to refresh\" gesture."
        },
        "refreshingText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed in the pullDown panel while the list is being refreshed."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scrollByContent": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying if the list is scrolled by content."
        },
        "scrollByThumb": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying if the list is scrolled using the scrollbar."
        },
        "scrollingEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether to enable or disable list scrolling."
        },
        "searchEditorOptions": {
          "PrimitiveTypes": [
            "DevExpress.ui.dxTextBoxOptions"
          ],
          "ComplexTypes": [
            "dxTextBoxOptions"
          ],
          "Description": "Configures the search panel."
        },
        "searchEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the search panel is visible."
        },
        "searchExpr": {
          "PrimitiveTypes": [
            "Function"
          ],
          "ItemPrimitiveTypes": [
            "Function"
          ],
          "IsCollection": true,
          "SingularName": "searchExpr",
          "Description": "Specifies a data object's field name or an expression whose value is compared to the search string."
        },
        "searchMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a comparison operation used to search widget items."
        },
        "searchTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a delay in milliseconds between when a user finishes typing, and the search is executed."
        },
        "searchValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the current search string."
        },
        "selectAllMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the mode in which all items are selected."
        },
        "selectedItemKeys": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "selectedItemKey",
          "Description": "Specifies an array of currently selected item keys."
        },
        "selectedItems": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "selectedItem",
          "Description": "An array of currently selected item objects."
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies item selection mode."
        },
        "showScrollbar": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies when the widget shows the scrollbar."
        },
        "showSelectionControls": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to display controls used to select list items."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "useNativeScrolling": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget uses native scrolling."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxLoadIndicator": {
      "Description": "The LoadIndicator is a UI element notifying the viewer that a process is in progress.",
      "Module": "ui/load_indicator",
      "Options": {
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "indicatorSrc": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the path to an image used as the indicator."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxLoadPanel": {
      "Description": "The LoadPanel is an overlay widget notifying the viewer that loading is in progress.",
      "Module": "ui/load_panel",
      "Options": {
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "boolean",
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies whether to close the widget if a user clicks outside it."
        },
        "container": {
          "PrimitiveTypes": [
            "Element",
            "JQuery"
          ],
          "Description": "Specifies the widget's container."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the widget's content when it is displayed. If false, the content is rendered immediately."
        },
        "delay": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The delay in milliseconds after which the load panel is displayed."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget can be focused."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height in pixels."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "indicatorSrc": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A URL pointing to an image to be used as a load indicator."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the maximum height the widget can reach while resizing."
        },
        "maxWidth": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the maximum width the widget can reach while resizing."
        },
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed in the load panel."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the minimum height the widget can reach while resizing."
        },
        "minWidth": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the minimum width the widget can reach while resizing."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is hidden."
        },
        "onHiding": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is hidden."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onShowing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is displayed."
        },
        "onShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is displayed."
        },
        "position": {
          "PrimitiveTypes": [
            "DevExpress.positionConfig",
            "Function",
            "string"
          ],
          "ComplexTypes": [
            "PositionConfig"
          ],
          "IsFunc": true,
          "Description": "Positions the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "shading": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the main screen is inactive while the widget is active."
        },
        "shadingColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shading color."
        },
        "showIndicator": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to show a load indicator."
        },
        "showPane": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to show the pane behind the load indicator."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "A Boolean value specifying whether or not the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width in pixels."
        }
      }
    },
    "dxLookup": {
      "Description": "The Lookup is a widget that allows an end user to search for an item in a collection shown in a drop-down menu.",
      "Module": "ui/lookup",
      "IsEditor": true,
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "applyButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the Apply button."
        },
        "applyValueMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the way an end-user applies the selected value."
        },
        "cancelButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the Cancel button."
        },
        "cleanSearchOnOpening": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget cleans the search box when the popup window is displayed."
        },
        "clearButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the Clear button."
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "boolean",
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies whether to close the drop-down menu if a user clicks outside it."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data the widget should display."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the drop-down field's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "displayValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "Returns the value currently displayed by the widget."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "fieldTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the input field."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "fullScreen": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to display the lookup in full-screen mode."
        },
        "grouped": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to group widget items."
        },
        "groupTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for group captions."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "minSearchLength": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The minimum number of characters that must be entered into the text box to begin a search. Applies only if searchEnabled is true."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "nextButtonText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed on the button used to load the next page from the data source."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onClosed": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is closed."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a list item is clicked or tapped."
        },
        "onOpened": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is opened."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPageLoading": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the next page is loaded."
        },
        "onPullRefresh": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the \"pull to refresh\" gesture is performed on the drop-down item list. Supported in mobile themes only."
        },
        "onScroll": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed on each scroll gesture performed on the drop-down item list."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a list item is selected or the selection is canceled."
        },
        "onTitleRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the drop-down list's title is rendered."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "opened": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "pageLoadingText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel, which is displayed when the widget is scrolled to the bottom."
        },
        "pageLoadMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether the next page is loaded when a user scrolls the widget to the bottom or when the \"next\" button is clicked."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when nothing is selected."
        },
        "popupHeight": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the popup element's height. Applies only if fullScreen is false."
        },
        "popupWidth": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the popup element's width. Applies only if fullScreen is false."
        },
        "position": {
          "PrimitiveTypes": [
            "DevExpress.positionConfig"
          ],
          "ComplexTypes": [
            "PositionConfig"
          ],
          "Description": "An object defining widget positioning options."
        },
        "pulledDownText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed in the pullDown panel when the widget is pulled below the refresh threshold."
        },
        "pullingDownText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold."
        },
        "pullRefreshEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget supports the \"pull down to refresh\" gesture."
        },
        "refreshingText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed in the pullDown panel while the widget is being refreshed."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "searchEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the search box is visible."
        },
        "searchExpr": {
          "PrimitiveTypes": [
            "Function"
          ],
          "ItemPrimitiveTypes": [
            "Function"
          ],
          "IsCollection": true,
          "SingularName": "searchExpr",
          "Description": "Specifies the name of a data source item field or an expression whose value is compared to the search criterion."
        },
        "searchMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a comparison operation used to search widget items."
        },
        "searchPlaceholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text that is provided as a hint in the lookup's search bar."
        },
        "searchTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsReadonly": true,
          "Description": "Gets the currently selected item."
        },
        "shading": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the main screen is inactive while the lookup is active."
        },
        "showCancelButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to display the Cancel button in the lookup window."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to display the Clear button in the lookup window."
        },
        "showDataBeforeSearch": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget displays unfiltered values until a user types a number of characters exceeding the minSearchLength option value."
        },
        "showPopupTitle": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to display the title in the popup window."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The title of the lookup window."
        },
        "titleTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the title."
        },
        "useNativeScrolling": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget uses native scrolling."
        },
        "usePopover": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to show lookup contents in a Popover widget."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "Specifies the currently selected value. May be an object if dataSource contains objects and valueExpr is not set."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "valueExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides the widget's value. When this option is not set, the value is the entire data object."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxMap": {
      "Description": "The Map is an interactive widget that displays a geographic map with markers and routes.",
      "Module": "ui/map",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "autoAdjust": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget automatically adjusts center and zoom option values when adding a new marker or route, or if a new widget contains markers or routes by default."
        },
        "center": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "number"
          ],
          "IsCollection": true,
          "SingularName": "center",
          "Description": "An object, a string, or an array specifying which part of the map is displayed at the widget's center using coordinates. The widget can change this value if autoAdjust is enabled.",
          "Options": {
            "lat": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The latitude location of the widget."
            },
            "lng": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The longitude location of the widget."
            }
          }
        },
        "controls": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not map widget controls are available."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "key": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A key used to authenticate the application within the required map provider.",
          "Options": {
            "bing": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A key used to authenticate the application within the \"Bing\" map provider."
            },
            "google": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A key used to authenticate the application within the \"Google\" map provider."
            },
            "googleStatic": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A key used to authenticate the application within the \"Google Static\" map provider."
            }
          }
        },
        "markerIconSrc": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A URL pointing to the custom icon to be used for map markers."
        },
        "markers": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "marker",
          "Description": "An array of markers displayed on a map.",
          "Options": {
            "iconSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A URL pointing to the custom icon to be used for the marker."
            },
            "location": {
              "PrimitiveTypes": [
                "string"
              ],
              "ItemPrimitiveTypes": [
                "number"
              ],
              "IsCollection": true,
              "SingularName": "location",
              "Description": "Specifies the marker location.",
              "Options": {
                "lat": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The latitude location of the widget."
                },
                "lng": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The longitude location of the widget."
                }
              }
            },
            "onClick": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "IsEvent": true,
              "Description": "A callback function performed when the marker is clicked."
            },
            "tooltip": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A tooltip to be used for the marker.",
              "Options": {
                "isShown": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip is visible by default or not."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the tooltip text."
                }
              }
            }
          }
        },
        "onClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when any location on the map is clicked or tapped."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onMarkerAdded": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a marker is created on the map."
        },
        "onMarkerRemoved": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a marker is removed from the map."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the map is ready."
        },
        "onRouteAdded": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a route is created on the map."
        },
        "onRouteRemoved": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a route is removed from the map."
        },
        "provider": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The name of the current map data provider."
        },
        "routes": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "route",
          "Description": "An array of routes shown on the map.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the line displaying the route."
            },
            "locations": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "location",
              "Description": "Contains an array of objects making up the route.",
              "Options": {
                "lat": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The latitude location of the widget."
                },
                "lng": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The longitude location of the widget."
                }
              }
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a transportation mode to be used in the displayed route."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the opacity of the line displaying the route."
            },
            "weight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the thickness of the line displaying the route in pixels."
            }
          }
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The type of a map to display."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        },
        "zoom": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The map's zoom level. The widget can change this value if autoAdjust is enabled."
        }
      }
    },
    "dxMenu": {
      "Description": "The Menu widget is a panel with clickable items. A click on an item opens a drop-down menu, which can contain several submenus.",
      "Module": "ui/menu",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget changes its state when interacting with a user."
        },
        "adaptivityEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether adaptive widget rendering is enabled on small screens. Applies only if the orientation is \"horizontal\"."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the CSS class to be applied to the root menu level and all submenus."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "disabledExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget item is disabled."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hideSubmenuOnMouseLeave": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the submenu is hidden when the mouse pointer leaves it."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxMenuItemTemplate"
          ],
          "ItemComplexTypes": [
            "MenuItem"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "Holds an array of menu items."
        },
        "itemsExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field contains nested items."
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is selected or the selection is canceled."
        },
        "onSubmenuHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a submenu is hidden."
        },
        "onSubmenuHiding": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a submenu is hidden."
        },
        "onSubmenuShowing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a submenu is displayed."
        },
        "onSubmenuShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a submenu is displayed."
        },
        "orientation": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether the menu has horizontal or vertical orientation."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "selectByClick": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not an item becomes selected if a user clicks it."
        },
        "selectedExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget items is selected."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "The selected item object."
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the selection mode supported by the menu."
        },
        "showFirstSubmenuMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options for showing and hiding the first level submenu.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the delay in submenu showing and hiding.",
              "Options": {
                "hide": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The time span after which the submenu is hidden."
                },
                "show": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The time span after which the submenu is shown."
                }
              }
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the mode name."
            }
          }
        },
        "showSubmenuMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options of submenu showing and hiding.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the delay of submenu show and hiding.",
              "Options": {
                "hide": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The time span after which the submenu is hidden."
                },
                "show": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The time span after which the submenu is shown."
                }
              }
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the mode name."
            }
          }
        },
        "submenuDirection": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the direction at which the submenus are displayed."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxMultiView": {
      "Description": "The MultiView is a widget that contains several views. An end user navigates through the views by swiping them in the horizontal direction.",
      "Module": "ui/multi_view",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "animationEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to animate the displayed item change."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the view's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "loop": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to scroll back to the first item after the last item is swiped."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is selected or the selection is canceled."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "The index of the currently displayed item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "The selected item object."
        },
        "swipeEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to allow users to change the selected index by swiping."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxNavBar": {
      "Description": "The NavBar is a widget that navigates the application views.",
      "Module": "ui/nav_bar",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "badge": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a badge text for the navbar item."
            },
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "icon": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the icon displayed by the widget item."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides keys for widget items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is selected or the selection is canceled."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scrollByContent": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not an end-user can scroll tabs by swiping."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "The index of the currently selected widget item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "The selected item object."
        },
        "selectedItemKeys": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "selectedItemKey",
          "Description": "Specifies an array of currently selected item keys."
        },
        "selectedItems": {
          "ItemPrimitiveTypes": [
            "string",
            "number",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "selectedItem",
          "Description": "An array of currently selected item objects."
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether the widget enables an end-user to select only a single item or multiple items."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxNumberBox": {
      "Description": "The NumberBox is a widget that displays a numeric value and allows a user to modify it by typing in a value, and incrementing or decrementing it using the keyboard or mouse.",
      "Module": "ui/number_box",
      "IsEditor": true,
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "format": {
          "PrimitiveTypes": [
            "DevExpress.ui.format",
            "string"
          ],
          "ComplexTypes": [
            "Format"
          ],
          "Description": "Specifies the value's display format and controls the user input according to it."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "invalidValueMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text of the message displayed if the specified value is not a number."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "max": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The maximum value accepted by the number box."
        },
        "min": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The minimum value accepted by the number box."
        },
        "mode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the value to be passed to the type attribute of the underlying `` element."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onChange": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus after the content has been changed."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onCopy": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been copied."
        },
        "onCut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been cut."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEnterKey": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the Enter key has been pressed while the widget is focused."
        },
        "onFocusIn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget gets focus."
        },
        "onFocusOut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onInput": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the widget's input is changed while the widget is focused."
        },
        "onKeyDown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user is pressing a key on the keyboard."
        },
        "onKeyPress": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user presses a key on the keyboard."
        },
        "onKeyUp": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user releases a key on the keyboard."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPaste": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been pasted."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is empty."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "showSpinButtons": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to show the buttons that change the value by a step."
        },
        "step": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies how much the widget's value changes when using the spin buttons, Up/Down arrow keys, or mouse wheel."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "useLargeSpinButtons": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to use touch friendly spin buttons. Applies only if showSpinButtons is true."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "The current number box value."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxPanorama": {
      "Description": "The Panorama widget is deprecated since v18.1. We recommend using the TabPanel or MultiView widget instead.",
      "Module": "ui/panorama",
      "Options": {
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "backgroundImage": {
          "Description": "An object exposing options for setting a background image for the panorama.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the panorama's background image."
            },
            "url": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the image that is used as the panorama's background image."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the panorama's background image."
            }
          }
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget can be focused."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The title of the panorama item."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is selected or the selection is canceled."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "The index of the currently active panorama item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "The selected item object."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget content title."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxPieChart": {
      "Description": "The PieChart is a widget that visualizes data as a circle divided into sectors that each represents a portion of the whole.",
      "Module": "viz/pie_chart",
      "Options": {
        "adaptiveLayout": {
          "Description": "Specifies adaptive layout options.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the widget's height small enough for the layout to begin adapting."
            },
            "keepLabels": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not point labels should be kept when the layout is adapting."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the widget's width small enough for the layout to begin adapting."
            }
          }
        },
        "animation": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies animation options.",
          "Options": {
            "duration": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how long the animation runs in milliseconds."
            },
            "easing": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the easing function of the animation."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the animation in the widget."
            },
            "maxPointCountSupported": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many series points the widget should have before the animation will be disabled."
            }
          }
        },
        "commonSeriesSettings": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "PieChartCommonSeriesSettings"
          ],
          "Description": "An object defining the configuration options that are common for all series of the PieChart widget."
        },
        "customizeLabel": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Customizes the appearance of an individual point label."
        },
        "customizePoint": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Customizes the appearance of an individual series point."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "Specifies the widget's data origin."
        },
        "diameter": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the diameter of the pie."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "format",
              "Description": "Specifies a set of export formats."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Adds an empty space around the exported widget; measured in pixels."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export.enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            }
          }
        },
        "innerRadius": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the fraction of the inner radius relative to the total radius in the series of the 'doughnut' type. The value should be between 0 and 1."
        },
        "legend": {
          "Description": "Specifies PieChart legend options.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the legend's background."
            },
            "border": {
              "Description": "Specifies legend border options.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies border color."
                },
                "cornerRadius": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a radius of a border's corners in degrees."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the border's dash style in the legend."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a border's opacity."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets a legend's border visibility state."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a border's width, in pixels."
                }
              }
            },
            "columnCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many columns it takes to arrange legend items."
            },
            "columnItemSpacing": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a blank space between legend columns in pixels."
            },
            "customizeHint": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item."
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by a legend item."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in the legend."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a legend's position on the chart."
            },
            "hoverMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies what chart elements to highlight when a corresponding item in the legend is hovered over."
            },
            "itemsAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the alignment of legend items."
            },
            "itemTextPosition": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the position of text relative to the item marker."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the distance between the legend and surrounding widget elements or container borders in pixels.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's left margin in pixels."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's right margin in pixels."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's top margin in pixels."
                }
              }
            },
            "markerSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the size of item markers in the legend in pixels."
            },
            "orientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether to place legend items horizontally or vertically."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a blank space between a legend's left/right boundaries and the inner item boundaries in pixels."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a blank space between a legend's top/bottom boundaries and the inner item boundaries in pixels."
            },
            "rowCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many rows it takes to arrange legend items."
            },
            "rowItemSpacing": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a blank space between legend rows in pixels."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a legend's position on the chart."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies the visibility state of the chart's legend."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "minDiameter": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the minimum diameter of the pie."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDone": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when all series are ready."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onLegendClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a legend item is clicked or tapped."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPointClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a series point is clicked or tapped."
        },
        "onPointHoverChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the pointer enters or leaves a series point."
        },
        "onPointSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a series point is selected or the selection is canceled."
        },
        "onTooltipHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip becomes hidden."
        },
        "onTooltipShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip appears."
        },
        "palette": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "palette",
          "Description": "Sets the palette to be used to colorize series and their elements."
        },
        "paletteExtensionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies what to do with colors in the palette when their number is less than the number of series (in the Chart widget) or points in a series (in the PieChart widget)."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "pointSelectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether a single point or multiple points can be selected in the chart."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "resolveLabelOverlapping": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how a chart must behave when point labels overlap."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "segmentsDirection": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the direction that the pie chart segments will occupy."
        },
        "series": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "PieChartSeries"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "ItemComplexTypes": [
            "PieChartSeries"
          ],
          "IsCollection": true,
          "SingularName": "series",
          "Description": "Specifies options for the series of the PieChart widget."
        },
        "seriesTemplate": {
          "Description": "Defines options for the series template.",
          "Options": {
            "customizeSeries": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns a series object with individual series settings."
            },
            "nameField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a data source field that represents the series name."
            }
          }
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "sizeGroup": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Allows you to display several adjoining pies in the same size."
        },
        "startAngle": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the angle in arc degrees from which the first segment of a pie chart should start."
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Configures the widget's title.",
          "Options": {
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the widget's subtitle.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's text."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "argumentFormat": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats the point argument before it is displayed in the tooltip. To format the point value, use the format option."
            },
            "arrowLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of a tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Configures a tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of a tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip's border is visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of a tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors all tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "Element",
                "JQuery"
              ],
              "Description": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element."
            },
            "customizeTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Allows you to change tooltip appearance."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies tooltips' font options."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed it in a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies tooltips' transparency."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
            },
            "shadow": {
              "Description": "Configures a tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a tooltip's z-index."
            }
          }
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the type of the pie chart series."
        }
      }
    },
    "dxPivot": {
      "Description": "The Pivot widget is deprecated since v18.1. We recommend using the TabPanel widget instead.",
      "Module": "ui/pivot",
      "Options": {
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "contentTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the widget content. Rendered only once - when the widget is created."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a name for a pivot item."
            },
            "titleTemplate": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "A template used for rendering the item title."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "itemTitleTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for item titles."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is selected or the selection is canceled."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "The index of the currently active pivot item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "The selected item object."
        },
        "swipeEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to allow users to switch between items by swiping."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxPivotGrid": {
      "Description": "The PivotGrid is a widget that allows you to display and analyze multi-dimensional data from a local storage or an OLAP cube.",
      "Module": "ui/pivot_grid",
      "Options": {
        "allowExpandAll": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Allows an end-user to expand/collapse all header items within a header level."
        },
        "allowFiltering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Allows a user to filter fields by selecting or deselecting values in the popup menu."
        },
        "allowSorting": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Allows an end-user to change sorting options."
        },
        "allowSortingBySummary": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Allows an end-user to sort columns by summary values."
        },
        "dataFieldArea": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the area to which data field headers must belong."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.PivotGridDataSource",
            "DevExpress.data.PivotGridDataSourceOptions"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "Specifies a data source for the pivot grid."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "export": {
          "Description": "Configures client-side exporting.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables client-side exporting."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which grid data is exported."
            },
            "ignoreExcelErrors": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether Excel should hide warnings if there are errors in the exported document."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            }
          }
        },
        "fieldChooser": {
          "Description": "The Field Chooser configuration options.",
          "Options": {
            "allowSearch": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the field chooser allows searching in the \"All Fields\" section."
            },
            "applyChangesMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies when to apply changes made in the field chooser to the PivotGrid."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables or disables the field chooser."
            },
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the field chooser height."
            },
            "layout": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the field chooser layout."
            },
            "searchTimeout": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a delay in milliseconds between when a user finishes typing in the field chooser's search panel, and when the search is executed."
            },
            "texts": {
              "Description": "Strings that can be changed or localized in the pivot grid's integrated Field Chooser.",
              "Options": {
                "allFields": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The string to display instead of All Fields."
                },
                "columnFields": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The string to display instead of Column Fields."
                },
                "dataFields": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The string to display instead of Data Fields."
                },
                "filterFields": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The string to display instead of Filter Fields."
                },
                "rowFields": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The string to display instead of Row Fields."
                }
              }
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to display as a title of the field chooser popup window."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the field chooser width."
            }
          }
        },
        "fieldPanel": {
          "Description": "Configures the field panel.",
          "Options": {
            "allowFieldDragging": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Makes fields on the field panel draggable."
            },
            "showColumnFields": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Shows/hides column fields on the field panel."
            },
            "showDataFields": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Shows/hides data fields on the field panel."
            },
            "showFilterFields": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Shows/hides filter fields on the field panel."
            },
            "showRowFields": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Shows/hides row fields on the field panel."
            },
            "texts": {
              "Description": "Specifies the placeholders of the field areas.",
              "Options": {
                "columnFieldArea": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the placeholder of the column field area."
                },
                "dataFieldArea": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the placeholder of the data field area."
                },
                "filterFieldArea": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the placeholder of the filter field area."
                },
                "rowFieldArea": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the placeholder of the row field area."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Shows/hides the field panel."
            }
          }
        },
        "headerFilter": {
          "Description": "Configures the header filter feature.",
          "Options": {
            "allowSearch": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether searching is enabled in the header filter."
            },
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the popup menu containing filtering values."
            },
            "searchTimeout": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a delay in milliseconds between when a user finishes typing in the header filter's search panel, and when the search is executed."
            },
            "texts": {
              "Description": "Configures the texts of the popup menu's elements.",
              "Options": {
                "cancel": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the button that closes the popup menu without applying a filter."
                },
                "emptyValue": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the name of the item that represents empty values in the popup menu."
                },
                "ok": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the button that applies a filter."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the popup menu containing filtering values."
            }
          }
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hideEmptySummaryCells": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to hide rows and columns with no data."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "loadPanel": {
          "Description": "Specifies options configuring the load panel.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables or disables the load panel."
            },
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the load panel."
            },
            "indicatorSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL pointing to an image that will be used as a load indicator."
            },
            "showIndicator": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to show a load indicator."
            },
            "showPane": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to show load panel background."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to display inside a load panel."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the load panel."
            }
          }
        },
        "onCellClick": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a pivot grid cell is clicked or tapped."
        },
        "onCellPrepared": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a pivot grid cell is created."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onContextMenuPreparing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the context menu is rendered."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after data is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before data is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported data is saved to the user's local storage."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "rowHeaderLayout": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the layout of items in the row header."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scrolling": {
          "Description": "A configuration object specifying scrolling options.",
          "Options": {
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the scrolling mode."
            },
            "useNative": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not the widget uses native scrolling."
            }
          }
        },
        "showBorders": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the outer borders of the grid are visible or not."
        },
        "showColumnGrandTotals": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to display the Grand Total column."
        },
        "showColumnTotals": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to display the Total columns."
        },
        "showRowGrandTotals": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to display the Grand Total row."
        },
        "showRowTotals": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to display the Total rows. Applies only if rowHeaderLayout is \"standard\"."
        },
        "showTotalsPrior": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies where to show the total rows or columns. Applies only if rowHeaderLayout is \"standard\"."
        },
        "stateStoring": {
          "Description": "A configuration object specifying options related to state storing.",
          "Options": {
            "customLoad": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a function that is executed on state loading. Applies only if the type is \"custom\"."
            },
            "customSave": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a function that is executed on state saving. Applies only if the type is \"custom\"."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a grid saves its state."
            },
            "savingTimeout": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the delay between the last change of a grid state and the operation of saving this state in milliseconds."
            },
            "storageKey": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a unique key to be used for storing the grid state."
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the type of storage to be used for state storing."
            }
          }
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "texts": {
          "Description": "Strings that can be changed or localized in the PivotGrid widget.",
          "Options": {
            "collapseAll": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a Collapse All context menu item."
            },
            "dataNotAvailable": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed in a cell when its data is unavailable for some reason."
            },
            "expandAll": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as an Expand All context menu item."
            },
            "exportToExcel": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as an Export to Excel file context menu item."
            },
            "grandTotal": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a header of the Grand Total row and column."
            },
            "noData": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text displayed when a pivot grid does not contain any fields."
            },
            "removeAllSorting": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a Remove All Sorting context menu item."
            },
            "showFieldChooser": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a Show Field Chooser context menu item."
            },
            "sortColumnBySummary": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a Sort Column by Summary Value context menu item."
            },
            "sortRowBySummary": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a Sort Row by Summary Value context menu item."
            },
            "total": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display as a header of the Total row and column."
            }
          }
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        },
        "wordWrapEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether long text in header items should be wrapped."
        }
      }
    },
    "dxPivotGridFieldChooser": {
      "Description": "A complementary widget for the PivotGrid that allows you to manage data displayed in the PivotGrid. The field chooser is already integrated in the PivotGrid and can be invoked using the context menu. If you need to continuously display the field chooser near the PivotGrid widget, use the PivotGridFieldChooser widget.",
      "Module": "ui/pivot_grid_field_chooser",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "allowSearch": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the field chooser allows searching in the \"All Fields\" section."
        },
        "applyChangesMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies when to apply changes made in the widget to the PivotGrid."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.PivotGridDataSource"
          ],
          "IsDataSource": true,
          "Description": "The data source of a PivotGrid widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "headerFilter": {
          "Description": "Configures the header filter feature.",
          "Options": {
            "allowSearch": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether searching is enabled in the header filter."
            },
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the popup menu containing filtering values."
            },
            "searchTimeout": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a delay in milliseconds between when a user finishes typing in the header filter's search panel, and when the search is executed."
            },
            "texts": {
              "Description": "Configures the texts of the popup menu's elements.",
              "Options": {
                "cancel": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the button that closes the popup menu without applying a filter."
                },
                "emptyValue": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the name of the item that represents empty values in the popup menu."
                },
                "ok": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the text of the button that applies a filter."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the popup menu containing filtering values."
            }
          }
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "layout": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the field chooser layout."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onContextMenuPreparing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the context menu is rendered."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "searchTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a delay in milliseconds between when a user finishes typing in the field chooser's search panel, and when the search is executed."
        },
        "state": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "The widget's state."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "texts": {
          "Description": "Strings that can be changed or localized in the PivotGridFieldChooser widget.",
          "Options": {
            "allFields": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display instead of All Fields."
            },
            "columnFields": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display instead of Column Fields."
            },
            "dataFields": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display instead of Data Fields."
            },
            "filterFields": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display instead of Filter Fields."
            },
            "rowFields": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The string to display instead of Row Fields."
            }
          }
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxPolarChart": {
      "Description": "The PolarChart is a widget that visualizes data in a polar coordinate system.",
      "Module": "viz/polar_chart",
      "Options": {
        "adaptiveLayout": {
          "Description": "Specifies adaptive layout options.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the widget's height small enough for the layout to begin adapting."
            },
            "keepLabels": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not point labels should be kept when the layout is adapting."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the widget's width small enough for the layout to begin adapting."
            }
          }
        },
        "animation": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies animation options.",
          "Options": {
            "duration": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how long the animation runs in milliseconds."
            },
            "easing": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the easing function of the animation."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the animation in the widget."
            },
            "maxPointCountSupported": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many series points the widget should have before the animation will be disabled."
            }
          }
        },
        "argumentAxis": {
          "Description": "Specifies argument axis options for the PolarChart widget.",
          "Options": {
            "allowDecimals": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to allow decimal values on the axis. When false, the axis contains integer values only."
            },
            "argumentType": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the desired type of axis values."
            },
            "axisDivisionFactor": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum distance between two neighboring major ticks in pixels. Applies only to the axes of the \"continuous\" and \"logarithmic\" types."
            },
            "categories": {
              "ItemPrimitiveTypes": [
                "number",
                "string",
                "Date"
              ],
              "IsCollection": true,
              "SingularName": "category",
              "Description": "Specifies the order in which arguments (categories) are arranged on the discrete argument axis."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the line that represents an axis."
            },
            "constantLines": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "constantLine",
              "Description": "Defines an array of the argument axis constant lines.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a constant line."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for a constant line."
                },
                "label": {
                  "Description": "An object defining constant line label options.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a constant line label."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text to be displayed in a constant line label."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Indicates whether or not to display labels for the axis constant lines."
                    }
                  }
                },
                "value": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Specifies a value to be displayed by a constant line."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a constant line width in pixels."
                }
              }
            },
            "constantLineStyle": {
              "Description": "Specifies the appearance of all the widget's constant lines.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a constant line."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for a constant line."
                },
                "label": {
                  "Description": "An object defining constant line label options.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a constant line label."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Indicates whether or not to display labels for the axis constant lines."
                    }
                  }
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a constant line width in pixels."
                }
              }
            },
            "discreteAxisDivisionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether ticks/grid lines of a discrete axis are located between labels or cross the labels."
            },
            "endOnTick": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to force the axis to start and end on ticks."
            },
            "firstPointOnStartAngle": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to display the first point at the angle specified by the startAngle option."
            },
            "grid": {
              "Description": "An object defining the configuration options for the grid lines of an axis in the PolarChart widget.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for grid lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies an opacity for grid lines."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not the grid lines of an axis are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of grid lines."
                }
              }
            },
            "hoverMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the elements that will be highlighted when the argument axis is hovered over."
            },
            "inverted": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not an axis is inverted."
            },
            "label": {
              "Description": "Specifies options for argument axis labels.",
              "Options": {
                "customizeHint": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a label on the argument axis."
                },
                "customizeText": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Specifies a callback function that returns the text to be displayed by argument axis labels."
                },
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for axis labels."
                },
                "format": {
                  "PrimitiveTypes": [
                    "DevExpress.ui.format",
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "Description": "Formats a value before it is displayed in an axis label."
                },
                "indentFromAxis": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the spacing between an axis and its labels in pixels."
                },
                "overlappingBehavior": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Decides how to arrange axis labels when there is not enough space to keep all of them."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not axis labels are visible."
                }
              }
            },
            "logarithmBase": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the value to be raised to a power when generating ticks for a logarithmic axis."
            },
            "minorGrid": {
              "Description": "Specifies the options of the minor grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the lines of the minor grid."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies an opacity for the lines of the minor grid."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether the minor grid is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a width for the lines of the minor grid."
                }
              }
            },
            "minorTick": {
              "Description": "Specifies the options of the minor ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies minor tick length."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies an opacity for the minor ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not the minor ticks are displayed on an axis."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies minor tick width."
                }
              }
            },
            "minorTickCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the number of minor ticks between two neighboring major ticks."
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the interval between minor ticks.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the opacity of the line that represents an axis."
            },
            "originValue": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the value to be used as the origin for the argument axis."
            },
            "period": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the period of the argument values in the data source."
            },
            "startAngle": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the angle in arc degrees to which the argument axis should be rotated. The positive values rotate the axis clockwise."
            },
            "strips": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "strip",
              "Description": "Specifies options for argument axis strips.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a strip."
                },
                "endValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Specifies an end value for a strip."
                },
                "label": {
                  "Description": "An object that defines the label configuration options of a strip.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a strip label."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text displayed in a strip."
                    }
                  }
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Specifies a start value for a strip."
                }
              }
            },
            "stripStyle": {
              "Description": "An object defining configuration options for strip style.",
              "Options": {
                "label": {
                  "Description": "An object defining the configuration options for a strip label style.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a strip label."
                    }
                  }
                }
              }
            },
            "tick": {
              "Description": "An object defining the configuration options for axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies ticks color."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies tick length."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies tick opacity."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not ticks are visible on an axis."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies tick width."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies an interval between axis ticks/grid lines.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the required type of the argument axis."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not the line that represents an axis in a chart is visible."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the line that represents an axis in the chart."
            }
          }
        },
        "barGroupPadding": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Controls the padding and consequently the angular width of a group of bars with the same argument using relative units. Ignored if the barGroupWidth option is set."
        },
        "barGroupWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a fixed angular width for groups of bars with the same argument, measured in degrees. Takes precedence over the barGroupPadding option."
        },
        "barWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsDeprecated": true,
          "Description": "Use CommonPolarChartSeries.barPadding instead."
        },
        "commonAxisSettings": {
          "Description": "An object defining the configuration options that are common for all axes of the PolarChart widget.",
          "Options": {
            "allowDecimals": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to allow decimal values on the axis. When false, the axis contains integer values only."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the line that represents an axis."
            },
            "constantLineStyle": {
              "Description": "Specifies the appearance of all the widget's constant lines.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a constant line."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for a constant line."
                },
                "label": {
                  "Description": "An object defining constant line label options.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a constant line label."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Indicates whether or not to display labels for the axis constant lines."
                    }
                  }
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a constant line width in pixels."
                }
              }
            },
            "discreteAxisDivisionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether ticks/grid lines of a discrete axis are located between labels or cross the labels."
            },
            "endOnTick": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to force the axis to start and end on ticks."
            },
            "grid": {
              "Description": "An object defining the configuration options for the grid lines of an axis in the PolarChart widget.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for grid lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies an opacity for grid lines."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not the grid lines of an axis are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of grid lines."
                }
              }
            },
            "inverted": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not an axis is inverted."
            },
            "label": {
              "Description": "An object defining the label configuration options that are common for all axes in the PolarChart widget.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for axis labels."
                },
                "indentFromAxis": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the spacing between an axis and its labels in pixels."
                },
                "overlappingBehavior": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Decides how to arrange axis labels when there is not enough space to keep all of them."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not axis labels are visible."
                }
              }
            },
            "minorGrid": {
              "Description": "Specifies the options of the minor grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the lines of the minor grid."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies an opacity for the lines of the minor grid."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether the minor grid is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a width for the lines of the minor grid."
                }
              }
            },
            "minorTick": {
              "Description": "Specifies the options of the minor ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies minor tick length."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies an opacity for the minor ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not the minor ticks are displayed on an axis."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies minor tick width."
                }
              }
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the opacity of the line that represents an axis."
            },
            "stripStyle": {
              "Description": "An object defining configuration options for strip style.",
              "Options": {
                "label": {
                  "Description": "An object defining the configuration options for a strip label style.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a strip label."
                    }
                  }
                }
              }
            },
            "tick": {
              "Description": "An object defining the configuration options for axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies ticks color."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies tick length."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies tick opacity."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not ticks are visible on an axis."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies tick width."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not the line that represents an axis in a chart is visible."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the line that represents an axis in the chart."
            }
          }
        },
        "commonSeriesSettings": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "PolarChartCommonSeriesSettings"
          ],
          "Description": "An object defining the configuration options that are common for all series of the PolarChart widget."
        },
        "containerBackgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the parent page element."
        },
        "customizeLabel": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Customizes the appearance of an individual point label."
        },
        "customizePoint": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Customizes the appearance of an individual series point."
        },
        "dataPrepareSettings": {
          "Description": "An object providing options for managing data from a data source.",
          "Options": {
            "checkTypeForAllData": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to validate the values from a data source."
            },
            "convertToAxisDataType": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to convert the values from a data source into the data type of an axis."
            },
            "sortingMethod": {
              "PrimitiveTypes": [
                "boolean",
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies how to sort the series points."
            }
          }
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "Specifies the widget's data origin."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "equalBarWidth": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsDeprecated": true,
          "Description": "Use CommonPolarChartSeries.ignoreEmptyPoints instead."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "format",
              "Description": "Specifies a set of export formats."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Adds an empty space around the exported widget; measured in pixels."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export.enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            }
          }
        },
        "legend": {
          "Description": "Specifies the options of a chart's legend.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the legend's background."
            },
            "border": {
              "Description": "Specifies legend border options.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies border color."
                },
                "cornerRadius": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a radius of a border's corners in degrees."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the border's dash style in the legend."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a border's opacity."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets a legend's border visibility state."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a border's width, in pixels."
                }
              }
            },
            "columnCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many columns it takes to arrange legend items."
            },
            "columnItemSpacing": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a blank space between legend columns in pixels."
            },
            "customizeHint": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item."
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by legend items."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in the legend."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a legend's position on the chart."
            },
            "hoverMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies what series elements to highlight when a corresponding item in the legend is hovered over."
            },
            "itemsAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the alignment of legend items."
            },
            "itemTextPosition": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the position of text relative to the item marker."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the distance between the legend and surrounding widget elements or container borders in pixels.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's left margin in pixels."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's right margin in pixels."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's top margin in pixels."
                }
              }
            },
            "markerSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the size of item markers in the legend in pixels."
            },
            "orientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether to place legend items horizontally or vertically."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a blank space between a legend's left/right boundaries and the inner item boundaries in pixels."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a blank space between a legend's top/bottom boundaries and the inner item boundaries in pixels."
            },
            "rowCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many rows it takes to arrange legend items."
            },
            "rowItemSpacing": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a blank space between legend rows in pixels."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a legend's position on the chart."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies the visibility state of the chart's legend."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "negativesAsZeroes": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Forces the widget to treat negative values as zeroes. Applies to stacked-like series only."
        },
        "onArgumentAxisClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a label on the argument axis is clicked or tapped."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDone": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when all series are ready."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onLegendClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a legend item is clicked or tapped."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPointClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a series point is clicked or tapped."
        },
        "onPointHoverChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the pointer enters or leaves a series point."
        },
        "onPointSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a series point is selected or the selection is canceled."
        },
        "onSeriesClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a series is clicked or tapped."
        },
        "onSeriesHoverChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the pointer enters or leaves a series."
        },
        "onSeriesSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a series is selected or the selection is canceled."
        },
        "onTooltipHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip becomes hidden."
        },
        "onTooltipShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip appears."
        },
        "palette": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "palette",
          "Description": "Sets the palette to be used for colorizing series and their elements."
        },
        "paletteExtensionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies what to do with colors in the palette when their number is less than the number of series (in the Chart widget) or points in a series (in the PieChart widget)."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "pointSelectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether a single point or multiple points can be selected in the chart."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "resolveLabelOverlapping": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the chart must behave when series point labels overlap."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "series": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "PolarChartSeries"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "ItemComplexTypes": [
            "PolarChartSeries"
          ],
          "IsCollection": true,
          "SingularName": "series",
          "Description": "Specifies options for PolarChart widget series."
        },
        "seriesSelectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether a single series or multiple series can be selected in the chart."
        },
        "seriesTemplate": {
          "Description": "Defines options for the series template.",
          "Options": {
            "customizeSeries": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns a series object with individual series settings."
            },
            "nameField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a data source field that represents the series name."
            }
          }
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Configures the widget's title.",
          "Options": {
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the widget's subtitle.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's text."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "argumentFormat": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats the point argument before it is displayed in the tooltip. To format the point value, use the format option."
            },
            "arrowLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of a tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Configures a tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of a tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip's border is visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of a tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors all tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "Element",
                "JQuery"
              ],
              "Description": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element."
            },
            "customizeTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Allows you to change tooltip appearance."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies tooltips' font options."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed it in a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies tooltips' transparency."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
            },
            "shadow": {
              "Description": "Configures a tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's shadow."
                }
              }
            },
            "shared": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies the kind of information to display in a tooltip."
            },
            "zIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a tooltip's z-index."
            }
          }
        },
        "useSpiderWeb": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Indicates whether or not to display a \"spider web\"."
        },
        "valueAxis": {
          "Description": "Specifies value axis options for the PolarChart widget.",
          "Options": {
            "allowDecimals": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to allow decimal values on the axis. When false, the axis contains integer values only."
            },
            "axisDivisionFactor": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a coefficient for dividing the value axis."
            },
            "categories": {
              "ItemPrimitiveTypes": [
                "number",
                "string",
                "Date"
              ],
              "IsCollection": true,
              "SingularName": "category",
              "Description": "Specifies the order in which discrete values are arranged on the value axis."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the line that represents an axis."
            },
            "constantLines": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "constantLine",
              "Description": "Defines an array of the value axis constant lines.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a constant line."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for a constant line."
                },
                "label": {
                  "Description": "An object defining constant line label options.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a constant line label."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text to be displayed in a constant line label."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Indicates whether or not to display labels for the axis constant lines."
                    }
                  }
                },
                "value": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Specifies a value to be displayed by a constant line."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a constant line width in pixels."
                }
              }
            },
            "constantLineStyle": {
              "Description": "Specifies the appearance of all the widget's constant lines.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a constant line."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for a constant line."
                },
                "label": {
                  "Description": "An object defining constant line label options.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a constant line label."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Indicates whether or not to display labels for the axis constant lines."
                    }
                  }
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a constant line width in pixels."
                }
              }
            },
            "discreteAxisDivisionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether ticks/grid lines of a discrete axis are located between labels or cross the labels."
            },
            "endOnTick": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to force the axis to start and end on ticks."
            },
            "grid": {
              "Description": "An object defining the configuration options for the grid lines of an axis in the PolarChart widget.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for grid lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies an opacity for grid lines."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not the grid lines of an axis are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of grid lines."
                }
              }
            },
            "inverted": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not an axis is inverted."
            },
            "label": {
              "Description": "Specifies options for value axis labels.",
              "Options": {
                "customizeHint": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Specifies the text for a hint that appears when a user hovers the mouse pointer over a label on the value axis."
                },
                "customizeText": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Specifies a callback function that returns the text to be displayed in value axis labels."
                },
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for axis labels."
                },
                "format": {
                  "PrimitiveTypes": [
                    "DevExpress.ui.format",
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "Description": "Formats a value before it is displayed in an axis label."
                },
                "indentFromAxis": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the spacing between an axis and its labels in pixels."
                },
                "overlappingBehavior": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Decides how to arrange axis labels when there is not enough space to keep all of them."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not axis labels are visible."
                }
              }
            },
            "logarithmBase": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the value to be raised to a power when generating ticks for a logarithmic axis."
            },
            "maxValueMargin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a coefficient that determines the spacing between the maximum series point and the axis."
            },
            "minorGrid": {
              "Description": "Specifies the options of the minor grid.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the lines of the minor grid."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies an opacity for the lines of the minor grid."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether the minor grid is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a width for the lines of the minor grid."
                }
              }
            },
            "minorTick": {
              "Description": "Specifies the options of the minor ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for the minor ticks."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies minor tick length."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies an opacity for the minor ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not the minor ticks are displayed on an axis."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies minor tick width."
                }
              }
            },
            "minorTickCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the number of minor ticks between two neighboring major ticks."
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the interval between minor ticks.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "minValueMargin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a coefficient that determines the spacing between the minimum series point and the axis."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the opacity of the line that represents an axis."
            },
            "showZero": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to indicate a zero value on the value axis."
            },
            "strips": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "strip",
              "Description": "Specifies options for value axis strips.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a color for a strip."
                },
                "endValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Specifies an end value for a strip."
                },
                "label": {
                  "Description": "An object that defines the label configuration options of a strip.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a strip label."
                    },
                    "text": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the text displayed in a strip."
                    }
                  }
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Specifies a start value for a strip."
                }
              }
            },
            "stripStyle": {
              "Description": "An object defining configuration options for strip style.",
              "Options": {
                "label": {
                  "Description": "An object defining the configuration options for a strip label style.",
                  "Options": {
                    "font": {
                      "PrimitiveTypes": [
                        "DevExpress.viz.Font"
                      ],
                      "ComplexTypes": [
                        "VizFont"
                      ],
                      "Description": "Specifies font options for a strip label."
                    }
                  }
                }
              }
            },
            "tick": {
              "Description": "An object defining the configuration options for axis ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies ticks color."
                },
                "length": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies tick length."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies tick opacity."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not ticks are visible on an axis."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies tick width."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies an interval between axis ticks/grid lines.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the required type of the value axis."
            },
            "valueMarginsEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether to display series with indents from axis boundaries."
            },
            "valueType": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the desired type of axis values."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not the line that represents an axis in a chart is visible."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the line that represents an axis in the chart."
            }
          }
        }
      }
    },
    "dxPopover": {
      "Description": "The Popover is a widget that shows notifications within a box with an arrow pointing to a specified UI element.",
      "IsTranscludedContent": true,
      "Module": "ui/popover",
      "Options": {
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "closeOnBackButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user presses the Back hardware button."
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "boolean",
            "Function"
          ],
          "IsFunc": true,
          "Description": "A Boolean value specifying whether or not the widget is closed if a user clicks outside of the popover window and outside the target element."
        },
        "container": {
          "PrimitiveTypes": [
            "Element",
            "JQuery"
          ],
          "Description": "Specifies the container in which to place the widget."
        },
        "contentTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the widget content."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the widget's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsChangeable": true,
          "Description": "Specifies the widget's height."
        },
        "hideEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options of popover hiding.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The delay in milliseconds after which the widget is hidden."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the event names on which the widget is hidden."
            }
          }
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the maximum height the widget can reach while resizing."
        },
        "maxWidth": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the maximum width the widget can reach while resizing."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the minimum height the widget can reach while resizing."
        },
        "minWidth": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the minimum width the widget can reach while resizing."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is hidden."
        },
        "onHiding": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is hidden."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onShowing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is displayed."
        },
        "onShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is displayed."
        },
        "onTitleRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's title is rendered."
        },
        "position": {
          "PrimitiveTypes": [
            "DevExpress.positionConfig",
            "string"
          ],
          "ComplexTypes": [
            "PositionConfig"
          ],
          "Description": "An object defining widget positioning options."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "shading": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the main screen is inactive while the widget is active."
        },
        "shadingColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shading color."
        },
        "showCloseButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget displays the Close button."
        },
        "showEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options for displaying the widget.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The delay in milliseconds after which the widget is displayed."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the event names on which the widget is shown."
            }
          }
        },
        "showTitle": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to display the title in the overlay window."
        },
        "target": {
          "PrimitiveTypes": [
            "Element",
            "JQuery"
          ],
          "Description": "The target element associated with a popover."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The title in the overlay window."
        },
        "titleTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the widget title. Does not apply if the title is defined."
        },
        "toolbarItems": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "toolbarItem",
          "Description": "Specifies items displayed on the top or bottom toolbar of the popup window.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a toolbar item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the toolbar item element."
            },
            "location": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a location for the item on the toolbar."
            },
            "options": {
              "PrimitiveTypes": [
                "any"
              ],
              "Description": "Specifies a configuration object for the widget that presents a toolbar item."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the toolbar item."
            },
            "toolbar": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether the item is displayed on a top or bottom toolbar."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "widget": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A widget that presents a toolbar item."
            }
          }
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "A Boolean value specifying whether or not the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsChangeable": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxPopup": {
      "Description": "The Popup widget is a pop-up window overlaying the current view.",
      "IsTranscludedContent": true,
      "Module": "ui/popup",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "closeOnBackButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user presses the Back hardware button."
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "boolean",
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies whether to close the widget if a user clicks outside it."
        },
        "container": {
          "PrimitiveTypes": [
            "Element",
            "JQuery"
          ],
          "Description": "Specifies the container in which to place the widget."
        },
        "contentTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the widget content."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the widget's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "dragEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to allow a user to drag the popup window."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "fullScreen": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to display the widget in full-screen mode."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsChangeable": true,
          "Description": "Specifies the widget's height in pixels."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the maximum height the widget can reach while resizing."
        },
        "maxWidth": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the maximum width the widget can reach while resizing."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the minimum height the widget can reach while resizing."
        },
        "minWidth": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the minimum width the widget can reach while resizing."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is hidden."
        },
        "onHiding": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is hidden."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onResize": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the widget is resized by one pixel."
        },
        "onResizeEnd": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when resizing ends."
        },
        "onResizeStart": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when resizing starts."
        },
        "onShowing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is displayed."
        },
        "onShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is displayed."
        },
        "onTitleRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's title is rendered."
        },
        "position": {
          "PrimitiveTypes": [
            "DevExpress.positionConfig",
            "Function",
            "string"
          ],
          "ComplexTypes": [
            "PositionConfig"
          ],
          "IsFunc": true,
          "Description": "Positions the widget."
        },
        "resizeEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not an end user can resize the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "shading": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the main screen is inactive while the widget is active."
        },
        "shadingColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shading color."
        },
        "showCloseButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget displays the Close button."
        },
        "showTitle": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to display the title in the popup window."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The title in the overlay window."
        },
        "titleTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the widget title. Does not apply if the title is defined."
        },
        "toolbarItems": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "toolbarItem",
          "Description": "Specifies items displayed on the top or bottom toolbar of the popup window.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a toolbar item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the toolbar item element."
            },
            "location": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a location for the item on the toolbar."
            },
            "options": {
              "PrimitiveTypes": [
                "any"
              ],
              "Description": "Specifies a configuration object for the widget that presents a toolbar item."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the toolbar item."
            },
            "toolbar": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether the item is displayed on a top or bottom toolbar."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "widget": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A widget that presents a toolbar item."
            }
          }
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "A Boolean value specifying whether or not the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsChangeable": true,
          "Description": "Specifies the widget's width in pixels."
        }
      }
    },
    "dxProgressBar": {
      "Description": "The ProgressBar is a widget that shows current progress.",
      "Module": "ui/progress_bar",
      "Options": {
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "max": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The maximum value the widget can accept."
        },
        "min": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The minimum value the widget can accept."
        },
        "onComplete": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the value reaches the maximum."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showStatus": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget displays a progress status."
        },
        "statusFormat": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies a format for the progress status."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "The current widget value."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxRadioGroup": {
      "Description": "The RadioGroup is a widget that contains a set of radio buttons and allows an end user to make a single selection from the set.",
      "Module": "ui/radio_group",
      "IsEditor": true,
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data the widget should display."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "layout": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the radio group layout."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "Specifies the currently selected value."
        },
        "valueExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides the widget's value. When this option is not set, the value is the entire data object."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxRangeSelector": {
      "Description": "The RangeSelector is a widget that allows a user to select a range of values on a scale.",
      "Module": "viz/range_selector",
      "Options": {
        "background": {
          "Description": "Specifies the options for the range selector's background.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the background color for the RangeSelector."
            },
            "image": {
              "Description": "Specifies image options.",
              "Options": {
                "location": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a location for the image in the background of a range selector."
                },
                "url": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the image's URL."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not the background (background color and/or image) is visible."
            }
          }
        },
        "behavior": {
          "Description": "Specifies the RangeSelector's behavior options.",
          "Options": {
            "allowSlidersSwap": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not you can swap sliders."
            },
            "animationEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not animation is enabled."
            },
            "callValueChanged": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies when to call the onValueChanged function."
            },
            "manualRangeSelectionEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not an end user can specify the range using a mouse, without the use of sliders."
            },
            "moveSelectedRangeByClick": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not an end user can shift the selected range to the required location on a scale by clicking."
            },
            "snapToTicks": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether to snap a slider to ticks."
            }
          }
        },
        "chart": {
          "Description": "Specifies the options required to display a chart as the range selector's background.",
          "Options": {
            "barGroupPadding": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Controls the padding and consequently the width of a group of bars with the same argument using relative units. Ignored if the barGroupWidth option is set."
            },
            "barGroupWidth": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a fixed width for groups of bars with the same argument, measured in pixels. Takes precedence over the barGroupPadding option."
            },
            "barWidth": {
              "PrimitiveTypes": [
                "number"
              ],
              "IsDeprecated": true,
              "Description": "Use CommonSeries.barPadding instead."
            },
            "bottomIndent": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a coefficient for determining an indent from the bottom background boundary to the lowest chart point."
            },
            "commonSeriesSettings": {
              "PrimitiveTypes": [
                "any"
              ],
              "ComplexTypes": [
                "ChartCommonSeriesSettings"
              ],
              "Description": "An object defining the common configuration options for the chart’s series."
            },
            "dataPrepareSettings": {
              "Description": "An object providing options for managing data from a data source.",
              "Options": {
                "checkTypeForAllData": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether or not to validate values from a data source."
                },
                "convertToAxisDataType": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether or not to convert the values from a data source into the data type of an axis."
                },
                "sortingMethod": {
                  "PrimitiveTypes": [
                    "boolean",
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Specifies how to sort series points."
                }
              }
            },
            "equalBarWidth": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "IsDeprecated": true,
              "Description": "Use CommonSeries.ignoreEmptyPoints instead."
            },
            "negativesAsZeroes": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Forces the widget to treat negative values as zeroes. Applies to stacked-like series only."
            },
            "palette": {
              "PrimitiveTypes": [
                "string"
              ],
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "palette",
              "Description": "Sets the palette to be used to colorize series in the chart."
            },
            "paletteExtensionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies what to do with colors in the palette when their number is less than the number of series in the chart."
            },
            "series": {
              "PrimitiveTypes": [
                "any"
              ],
              "ComplexTypes": [
                "ChartSeries"
              ],
              "ItemPrimitiveTypes": [
                "any"
              ],
              "ItemComplexTypes": [
                "ChartSeries"
              ],
              "IsCollection": true,
              "SingularName": "series",
              "Description": "An object defining the chart’s series."
            },
            "seriesTemplate": {
              "Description": "Defines options for the series template.",
              "Options": {
                "customizeSeries": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Specifies a callback function that returns a series object with individual series settings."
                },
                "nameField": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a data source field that represents the series name."
                }
              }
            },
            "topIndent": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a coefficient for determining an indent from the background's top boundary to the topmost chart point."
            },
            "useAggregation": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "IsDeprecated": true,
              "Description": "Use CommonSeries.aggregation.enabled instead."
            },
            "valueAxis": {
              "Description": "Configures the chart value axis.",
              "Options": {
                "inverted": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not the chart's value axis must be inverted."
                },
                "logarithmBase": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the value to be raised to a power when generating ticks for a logarithmic value axis."
                },
                "max": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the maximum value of the chart's value axis."
                },
                "min": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the minimum value of the chart's value axis."
                },
                "type": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the type of the value axis."
                },
                "valueType": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the desired type of axis values."
                }
              }
            }
          }
        },
        "containerBackgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the parent page element."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "Specifies a data source for the scale values and for the chart at the background."
        },
        "dataSourceField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides data for the scale."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "format",
              "Description": "Specifies a set of export formats."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Adds an empty space around the exported widget; measured in pixels."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export.enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            }
          }
        },
        "indent": {
          "Description": "Range selector's indent options.",
          "Options": {
            "left": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies range selector's left indent."
            },
            "right": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies range selector's right indent."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scale": {
          "Description": "Specifies options of the range selector's scale.",
          "Options": {
            "aggregationGroupWidth": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of aggregation intervals in pixels. May be ignored in favor of the aggregationInterval option."
            },
            "aggregationInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the length of aggregation intervals in scale units. Applies only to the scale of the continuous or logarithmic type.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "allowDecimals": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to allow decimal values on the scale. When false, the scale contains integer values only."
            },
            "breaks": {
              "ItemPrimitiveTypes": [
                "DevExpress.viz.ScaleBreak"
              ],
              "IsCollection": true,
              "SingularName": "break",
              "Description": "Declares a scale break collection. Applies only if the scale's type is \"continuous\" or \"logarithmic\".",
              "Options": {
                "endValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Along with the startValue option, limits the scale break."
                },
                "startValue": {
                  "PrimitiveTypes": [
                    "Date",
                    "number",
                    "string"
                  ],
                  "Description": "Along with the endValue option, limits the scale break."
                }
              }
            },
            "breakStyle": {
              "Description": "Configures the scale breaks' appearance.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the scale breaks' color."
                },
                "line": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the scale breaks' line style."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the scale breaks' width in pixels."
                }
              }
            },
            "categories": {
              "ItemPrimitiveTypes": [
                "number",
                "string",
                "Date"
              ],
              "IsCollection": true,
              "SingularName": "category",
              "Description": "Specifies the order of arguments on a discrete scale."
            },
            "endOnTick": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to force the scale to start and end on ticks."
            },
            "endValue": {
              "PrimitiveTypes": [
                "Date",
                "number",
                "string"
              ],
              "Description": "Specifies the scale's end value."
            },
            "holidays": {
              "ItemPrimitiveTypes": [
                "Date",
                "string",
                "number"
              ],
              "IsCollection": true,
              "SingularName": "holiday",
              "Description": "Days to be excluded from the scale when workdaysOnly is true."
            },
            "label": {
              "Description": "Specifies common options for scale labels.",
              "Options": {
                "customizeText": {
                  "PrimitiveTypes": [
                    "Function"
                  ],
                  "IsFunc": true,
                  "Description": "Specifies a callback function that returns the text to be displayed in scale labels."
                },
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the text displayed in the range selector's scale labels."
                },
                "format": {
                  "PrimitiveTypes": [
                    "DevExpress.ui.format",
                    "string"
                  ],
                  "ComplexTypes": [
                    "Format"
                  ],
                  "Description": "Formats a value before it is displayed in a scale label."
                },
                "overlappingBehavior": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Decides how to arrange scale labels when there is not enough space to keep all of them."
                },
                "topIndent": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a spacing between scale labels and the background bottom edge."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether or not the scale's labels are visible."
                }
              }
            },
            "logarithmBase": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the value to be raised to a power when generating ticks for a logarithmic scale."
            },
            "marker": {
              "Description": "Specifies options for the date-time scale's markers.",
              "Options": {
                "label": {
                  "Description": "Defines the options that can be set for the text that is displayed by the scale markers.",
                  "Options": {
                    "customizeText": {
                      "PrimitiveTypes": [
                        "Function"
                      ],
                      "IsFunc": true,
                      "Description": "Specifies a callback function that returns the text to be displayed in scale markers."
                    },
                    "format": {
                      "PrimitiveTypes": [
                        "DevExpress.ui.format",
                        "string"
                      ],
                      "ComplexTypes": [
                        "Format"
                      ],
                      "Description": "Formats a value before it is displayed in a scale marker."
                    }
                  }
                },
                "separatorHeight": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the height of the marker's separator."
                },
                "textLeftIndent": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the space between the marker label and the marker separator."
                },
                "textTopIndent": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the space between the marker's label and the top edge of the marker's separator."
                },
                "topIndent": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specified the indent between the marker and the scale labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether scale markers are visible."
                }
              }
            },
            "maxRange": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the maximum range that can be selected.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "minorTick": {
              "Description": "Specifies options of the range selector's minor ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the scale's minor ticks."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of the scale's minor ticks."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether scale minor ticks are visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the scale's minor ticks."
                }
              }
            },
            "minorTickCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the number of minor ticks between neighboring major ticks."
            },
            "minorTickInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies an interval between minor ticks.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "minRange": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the minimum range that can be selected.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "placeholderHeight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the space reserved for the scale in pixels."
            },
            "showCustomBoundaryTicks": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to show ticks for the boundary scale values, when neither major ticks nor minor ticks are created for these values."
            },
            "singleWorkdays": {
              "ItemPrimitiveTypes": [
                "Date",
                "string",
                "number"
              ],
              "IsCollection": true,
              "SingularName": "singleWorkday",
              "Description": "Days to be included in the scale when workdaysOnly is true."
            },
            "startValue": {
              "PrimitiveTypes": [
                "Date",
                "number",
                "string"
              ],
              "Description": "Specifies the scale's start value."
            },
            "tick": {
              "Description": "Specifies options defining the appearance of scale ticks.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of scale ticks (both major and minor ticks)."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of scale ticks (both major and minor ticks)."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the scale's ticks (both major and minor ticks)."
                }
              }
            },
            "tickInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies an interval between axis ticks.",
              "Options": {
                "days": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in days. Available only for an axis/scale displaying date-time values."
                },
                "hours": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in hours. Available only for an axis/scale displaying date-time values."
                },
                "milliseconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in milliseconds. Available only for an axis/scale displaying date-time values."
                },
                "minutes": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in minutes. Available only for an axis/scale displaying date-time values."
                },
                "months": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in months. Available only for an axis/scale displaying date-time values."
                },
                "quarters": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in quarters. Available only for an axis/scale displaying date-time values."
                },
                "seconds": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in seconds. Available only for an axis/scale displaying date-time values."
                },
                "weeks": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in weeks. Available only for an axis/scale displaying date-time values."
                },
                "years": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the time interval measured in years. Available only for an axis/scale displaying date-time values."
                }
              }
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the type of the scale."
            },
            "valueType": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the type of values on the scale."
            },
            "workdaysOnly": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Leaves only workdays on the scale: the work week days plus single workdays minus holidays. Applies only if the scale's valueType is \"datetime\"."
            },
            "workWeek": {
              "ItemPrimitiveTypes": [
                "number"
              ],
              "IsCollection": true,
              "SingularName": "workWeek",
              "Description": "Specifies which days are workdays. The array can contain values from 0 (Sunday) to 6 (Saturday). Applies only if workdaysOnly is true."
            }
          }
        },
        "selectedRangeColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the selected range."
        },
        "shutter": {
          "Description": "Specifies range selector shutter options.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies shutter color."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the opacity of the color of shutters."
            }
          }
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "sliderHandle": {
          "Description": "Specifies the appearance of the range selector's slider handles.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the slider handles."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the opacity of the slider handles."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the slider handles."
            }
          }
        },
        "sliderMarker": {
          "Description": "Defines the options of the range selector slider markers.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the slider markers."
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by slider markers."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed by the range selector slider markers."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed in a slider marker."
            },
            "invalidRangeColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color used for the slider marker text when the currently selected range does not match the minRange and maxRange values."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the empty space between the marker's left and right borders and the marker's text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the empty space between the marker's top and bottom borders and the marker's text."
            },
            "placeholderHeight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the placeholder height of the slider marker."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not the slider markers are visible."
            }
          }
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Configures the widget's title.",
          "Options": {
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the widget's subtitle.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's text."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "value": {
          "PrimitiveTypes": [
            "DevExpress.viz.VizRange"
          ],
          "ItemPrimitiveTypes": [
            "number",
            "string",
            "Date"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "value"
        }
      }
    },
    "dxRangeSlider": {
      "Description": "The RangeSlider is a widget that allows an end user to choose a range of numeric values.",
      "Module": "ui/range_slider",
      "IsEditor": true,
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "end": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The right edge of the interval currently selected using the range slider."
        },
        "endName": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the name attribute of the underlying `` element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "keyStep": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the step by which a handle moves when a user presses Page Up or Page Down."
        },
        "label": {
          "Description": "Configures the labels displayed at the min and max values.",
          "Options": {
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed in a label."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether labels are over or under the scale."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether slider labels are visible."
            }
          }
        },
        "max": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The maximum value the widget can accept."
        },
        "min": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The minimum value the widget can accept."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showRange": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to highlight the selected range."
        },
        "start": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The left edge of the interval currently selected using the range slider."
        },
        "startName": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the name attribute of the underlying `` element."
        },
        "step": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the step by which the widget's value changes when a user drags a handler."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "tooltip": {
          "Description": "Configures a tooltip.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a tooltip is enabled."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Specifies a tooltip's display format."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether a tooltip is over or under the slider."
            },
            "showMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies when the widget shows a tooltip."
            }
          }
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "ItemPrimitiveTypes": [
            "number"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "value",
          "Description": "Specifies the currently selected value."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxRecurrenceEditor": {
      "Description": "A base class for editors.",
      "Module": "ui/recurrence_editor",
      "IsEditor": true,
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "firstDayOfWeek": {
          "PrimitiveTypes": [
            "number",
            "string"
          ]
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "startDate": {
          "PrimitiveTypes": [
            "Date"
          ]
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsChangeable": true,
          "Description": "Specifies the currently selected value."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxResizable": {
      "Description": "The Resizable widget enables its content to be resizable in the UI.",
      "IsTranscludedContent": true,
      "Module": "ui/resizable",
      "Options": {
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "handles": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which borders of the widget element are used as a handle."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsChangeable": true,
          "Description": "Specifies the widget's height."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the upper height boundary for resizing."
        },
        "maxWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the upper width boundary for resizing."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the lower height boundary for resizing."
        },
        "minWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the lower width boundary for resizing."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onResize": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the widget is resized by one pixel."
        },
        "onResizeEnd": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when resizing ends."
        },
        "onResizeStart": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when resizing starts."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsChangeable": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxResponsiveBox": {
      "Description": "The ResponsiveBox widget allows you to create an application or a website with a layout adapted to different screen sizes.",
      "Module": "ui/responsive_box",
      "Options": {
        "cols": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "col",
          "Description": "Specifies the collection of columns for the grid used to position layout elements.",
          "Options": {
            "baseSize": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "The column's base width. Calculated automatically when the singleColumnScreen option arranges all elements in a single column."
            },
            "ratio": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The column width ratio."
            },
            "screen": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Decides on which screens the current column is rendered."
            },
            "shrink": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "A factor that defines how much a column width shrinks relative to the rest of the columns in the container."
            }
          }
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "location": {
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsCollection": true,
              "SingularName": "location",
              "Description": "Specifies the item location and size against the widget grid.",
              "Options": {
                "col": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies which column the element should occupy. Accepts an index from the cols array."
                },
                "colspan": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how many columns the element should span."
                },
                "row": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies which row the element should occupy. Accepts an index from the rows array."
                },
                "rowspan": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how many rows the element should span."
                },
                "screen": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Decides on which screens the current location settings should be applied to the element."
                }
              }
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "rows": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "row",
          "Description": "Specifies the collection of rows for the grid used to position layout elements.",
          "Options": {
            "baseSize": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "The row's base height. Calculated automatically when the singleColumnScreen option arranges all elements in a single column."
            },
            "ratio": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The row height ratio."
            },
            "screen": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Decides on which screens the current row is rendered."
            },
            "shrink": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "A factor that defines how much a row height shrinks relative to the rest of the rows in the container."
            }
          }
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "screenByWidth": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies the function returning the size qualifier depending on the screen's width."
        },
        "singleColumnScreen": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies on which screens all layout elements should be arranged in a single column. Accepts a single or several size qualifiers separated by a space."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxSankey": {
      "Description": "The Sankey is a widget that visualizes the flow magnitude between value sets. The values being connected are called nodes; the connections - links. The higher the flow magnitude, the wider the link is.",
      "Module": "viz/sankey",
      "Options": {
        "adaptiveLayout": {
          "Description": "Specifies adaptive layout options.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum container height at which the widget begins to adapt."
            },
            "keepLabels": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether node labels should be kept when the widget adapts the layout."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum container width at which the widget begins to adapt."
            }
          }
        },
        "alignment": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "alignment",
          "Description": "Aligns node columns vertically."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "Specifies the widget's data source."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "format",
              "Description": "Specifies a set of export formats."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Adds an empty space around the exported widget; measured in pixels."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export.enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            }
          }
        },
        "hoverEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether nodes and links change their style when they are hovered over or pressed."
        },
        "label": {
          "Description": "Configures sankey nodes' labels.",
          "Options": {
            "border": {
              "Description": "Configures the labels' borders.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the labels' borders."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether the borders are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets the borders' width in pixels."
                }
              }
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Customizes the labels' texts."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies the labels' font options."
            },
            "horizontalOffset": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Moves the labels horizontally from their initial positions."
            },
            "overlappingBehavior": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies how to arrange labels when there is insufficient space to display them all."
            },
            "shadow": {
              "Description": "Configures the labels' shadows.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the shadows' blur distance. A larger value increases the blur distance."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the labels' shadows."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Moves the shadows horizontally from their initial positions."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Moves the shadows vertically from their initial positions."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the shadows' transparency."
                }
              }
            },
            "useNodeColors": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to color labels in the nodes' colors."
            },
            "verticalOffset": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Moves the labels vertically from their initial positions."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the labels are visible."
            }
          }
        },
        "link": {
          "Description": "Configures sankey links' appearance.",
          "Options": {
            "border": {
              "Description": "Configures the links' borders.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the links' borders."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether the borders are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets the borders' width in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the sankey links. Applies only if colorMode is \"none\"."
            },
            "colorMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies how to color links."
            },
            "hoverStyle": {
              "Description": "Configures the appearance a link changes to when it is hovered over or pressed.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance a link's border changes to when the link is hovered over or pressed.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the color a link's border changes to when the link is hovered over or pressed."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Specifies whether a link's border is visible when the link is hovered over or pressed."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width a link's border changes to when the link is hovered over or pressed."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color a link changes to when it is hovered over or pressed."
                },
                "hatching": {
                  "Description": "Applies hatching to a link when it is hovered over or pressed.",
                  "Options": {
                    "direction": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies hatching lines' direction."
                    },
                    "opacity": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies hatching lines' transparency."
                    },
                    "step": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the distance in pixels between two hatching lines."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies hatching lines' width."
                    }
                  }
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency a link changes to when it is hovered over or pressed."
                }
              }
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the links' transparency."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "node": {
          "Description": "Configures sankey nodes' appearance.",
          "Options": {
            "border": {
              "Description": "Configures the nodes' borders.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the nodes' borders."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether the borders are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets the borders' width in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the sankey nodes."
            },
            "hoverStyle": {
              "Description": "Configures the appearance a node changes to when it is hovered over or pressed.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance a node's border changes to when the node is hovered over or pressed.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the color a node's border changes to when the node is hovered over or pressed."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Specifies whether a node's border is visible when the node is hovered over or pressed."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width a node's border changes to when the node is hovered over or pressed."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color a node changes to when it is hovered over or pressed."
                },
                "hatching": {
                  "Description": "Applies hatching to a node when it is hovered over or pressed.",
                  "Options": {
                    "direction": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies hatching lines' direction."
                    },
                    "opacity": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies hatching lines' transparency."
                    },
                    "step": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the distance in pixels between two hatching lines."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies hatching lines' width."
                    }
                  }
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency a node changes to when it is hovered over or pressed."
                }
              }
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the nodes' transparency."
            },
            "padding": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the vertical distance, in pixels, between two nodes."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the nodes' width in pixels."
            }
          }
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onLinkClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a sankey link is clicked or tapped."
        },
        "onLinkHoverChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the pointer enters or leaves a sankey link."
        },
        "onNodeClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a sankey node is clicked or tapped."
        },
        "onNodeHoverChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the pointer enters or leaves a sankey node."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "palette": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "palette",
          "Description": "Sets the palette to be used to colorize sankey nodes."
        },
        "paletteExtensionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how to extend the palette when it contains less colors than the number of sankey nodes."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "sortData": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies nodes' sorting order in their columns."
        },
        "sourceField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides links' source nodes."
        },
        "targetField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides links' target nodes."
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Configures the widget's title.",
          "Options": {
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the widget's subtitle.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's text."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips - small pop-up rectangles that display information about a data-visualizing widget element being pressed or hovered over with the mouse pointer.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of a tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Configures a tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of a tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip's border is visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of a tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors all tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "Element",
                "JQuery"
              ],
              "Description": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element."
            },
            "customizeLinkTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Customizes link tooltips' appearance."
            },
            "customizeNodeTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Customizes node tooltips' appearance."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies tooltips' font options."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed it in a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies tooltips' transparency."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
            },
            "shadow": {
              "Description": "Configures a tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a tooltip's z-index."
            }
          }
        },
        "weightField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides links' weights."
        }
      }
    },
    "dxScheduler": {
      "Description": "The Scheduler is a widget that represents scheduled data and allows a user to manage and edit it.",
      "Module": "ui/scheduler",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "allDayExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding appointment is an all-day appointment."
        },
        "appointmentTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for appointments."
        },
        "appointmentTooltipTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for appointment tooltips."
        },
        "cellDuration": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies cell duration in minutes."
        },
        "crossScrollingEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not an end-user can scroll the view in both directions at the same time."
        },
        "currentDate": {
          "PrimitiveTypes": [
            "Date",
            "number",
            "string"
          ],
          "IsChangeable": true,
          "Description": "Specifies a date displayed on the current scheduler view by default."
        },
        "currentView": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsChangeable": true,
          "Description": "Specifies the currently displayed view. Accepts the view's name or type."
        },
        "dataCellTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for table cells."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxSchedulerAppointmentTemplate"
          ],
          "IsDataSource": true,
          "Description": "Specifies the origin of data for the widget."
        },
        "dateCellTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for day scale items."
        },
        "dateSerializationFormat": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the date-time values' serialization format. Use it only if you do not specify the dataSource at design time."
        },
        "descriptionExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field whose value holds the description of the corresponding appointment."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "dropDownAppointmentTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for appointments in the appointment collector's drop-down list."
        },
        "editing": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies which editing operations an end-user can perform on appointments.",
          "Options": {
            "allowAdding": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not an end-user can add appointments."
            },
            "allowDeleting": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not an end-user can delete appointments."
            },
            "allowDragging": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not an end-user can drag appointments."
            },
            "allowResizing": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not an end-user can change an appointment duration."
            },
            "allowUpdating": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not an end-user can change appointment options."
            }
          }
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "endDateExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that defines the ending of an appointment."
        },
        "endDateTimeZoneExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that defines the timezone of the appointment end date."
        },
        "endDayHour": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies an end hour in the scheduler view's time interval."
        },
        "firstDayOfWeek": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the first day of a week. Does not apply to the agenda view."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "groupByDate": {
          "PrimitiveTypes": [
            "boolean"
          ]
        },
        "groups": {
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "group",
          "Description": "Specifies the resource kinds by which the scheduler's appointments are grouped in a timetable."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "indicatorUpdateInterval": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the time interval between when the date-time indicator changes its position, in milliseconds."
        },
        "max": {
          "PrimitiveTypes": [
            "Date",
            "number",
            "string"
          ],
          "Description": "The latest date the widget allows you to select."
        },
        "maxAppointmentsPerCell": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the limit of full-sized appointments displayed per cell. In the \"day\", \"week\" and \"workweek\" views, this option applies only to all-day appointments."
        },
        "min": {
          "PrimitiveTypes": [
            "Date",
            "number",
            "string"
          ],
          "Description": "The earliest date the widget allows you to select."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty. Available for the Agenda view only."
        },
        "onAppointmentAdded": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after an appointment is added to the data source."
        },
        "onAppointmentAdding": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before an appointment is added to the data source."
        },
        "onAppointmentClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an appointment is clicked or tapped."
        },
        "onAppointmentContextMenu": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user attempts to open the browser's context menu for an appointment. Allows you to replace this context menu with a custom context menu."
        },
        "onAppointmentDblClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an appointment is double-clicked or double-tapped."
        },
        "onAppointmentDeleted": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after an appointment is deleted from the data source."
        },
        "onAppointmentDeleting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before an appointment is deleted from the data source."
        },
        "onAppointmentFormCreated": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an appointment's edit form is created."
        },
        "onAppointmentRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an appointment is rendered."
        },
        "onAppointmentUpdated": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after an appointment is updated in the data source."
        },
        "onAppointmentUpdating": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before an appointment is updated in the data source."
        },
        "onCellClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a view cell is clicked."
        },
        "onCellContextMenu": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user attempts to open the browser's context menu for a cell. Allows you to replace this context menu with a custom context menu."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "recurrenceEditMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the edit mode for recurring appointments."
        },
        "recurrenceExceptionExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that defines exceptions for the current recurring appointment."
        },
        "recurrenceRuleExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that defines a recurrence rule for generating recurring appointments."
        },
        "remoteFiltering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether filtering is performed on the server or client side."
        },
        "resourceCellTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for resource headers."
        },
        "resources": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "resource",
          "Description": "Specifies an array of resources available in the scheduler.",
          "Options": {
            "allowMultiple": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether or not several resources of this kind can be assigned to an appointment."
            },
            "colorExpr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the resource object field that is used as a resource color."
            },
            "dataSource": {
              "PrimitiveTypes": [
                "DevExpress.data.DataSource",
                "DevExpress.data.DataSourceOptions",
                "string"
              ],
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsDataSource": true,
              "Description": "A data source used to fetch resources to be available in the scheduler."
            },
            "displayExpr": {
              "PrimitiveTypes": [
                "Function",
                "string"
              ],
              "IsFunc": true,
              "Description": "Specifies the resource object field whose value is displayed by the Resource editor in the Appointment popup window."
            },
            "fieldExpr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The name of the appointment object field that specifies a resource of this kind."
            },
            "label": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the label of the Appointment popup window field that allows end users to assign a resource of this kind."
            },
            "useColorAsDefault": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether appointments are colored like this resource kind."
            },
            "valueExpr": {
              "PrimitiveTypes": [
                "Function",
                "string"
              ],
              "IsFunc": true,
              "Description": "Specifies the resource object field that is used as a value of the Resource editor in the Appointment popup window."
            }
          }
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "selectedCellData": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsReadonly": true,
          "SingularName": "selectedCellData",
          "Description": "Currently selected cells' data."
        },
        "shadeUntilCurrentTime": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to apply shading to cover the timetable up to the current time."
        },
        "showAllDayPanel": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies the \"All-day\" panel's visibility. Setting this option to false hides the panel along with the all-day appointments."
        },
        "showCurrentTimeIndicator": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies the current date-time indicator's visibility."
        },
        "startDateExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that defines the start of an appointment."
        },
        "startDateTimeZoneExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that defines the timezone of the appointment start date."
        },
        "startDayHour": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a start hour in the scheduler view's time interval."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "textExpr": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source item field that holds the subject of an appointment."
        },
        "timeCellTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for time scale items."
        },
        "timeZone": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the timezone of the widget."
        },
        "useDropDownViewSwitcher": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can switch views using tabs or a drop-down menu."
        },
        "views": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "SingularName": "view",
          "Description": "Configures individual views.",
          "Options": {
            "agendaDuration": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the number of dates that can be shown at a time in the agenda view."
            },
            "appointmentTemplate": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies a custom template for appointments."
            },
            "appointmentTooltipTemplate": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies a custom template for appointment tooltips."
            },
            "cellDuration": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The cell duration in minutes."
            },
            "dataCellTemplate": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies a custom template for table cells."
            },
            "dateCellTemplate": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies a custom template for date scale items."
            },
            "dropDownAppointmentTemplate": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies a custom template for appointments in the appointment collector's drop-down list."
            },
            "endDayHour": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The end hour of the view time scale."
            },
            "firstDayOfWeek": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "The first day of a week. Does not apply to the agenda view."
            },
            "groupByDate": {
              "PrimitiveTypes": [
                "boolean"
              ]
            },
            "groupOrientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Arranges resource headers vertically (in a column) or horizontally (in a row)."
            },
            "groups": {
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "group",
              "Description": "The resource kinds by which appointments are grouped."
            },
            "intervalCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Multiplies the default view interval. Applies to all view types except \"agenda\"."
            },
            "maxAppointmentsPerCell": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies the limit of full-sized appointments displayed per cell. In the \"day\", \"week\" and \"workweek\" views, this option applies only to all-day appointments."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A custom name for the view. This name goes to the view switcher."
            },
            "resourceCellTemplate": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies a custom template for resource headers."
            },
            "startDate": {
              "PrimitiveTypes": [
                "Date",
                "number",
                "string"
              ],
              "Description": "Specifies the date from which to start counting the view interval. Applies to all view types except \"agenda\"."
            },
            "startDayHour": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The start hour of the view time scale."
            },
            "timeCellTemplate": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies a custom template for time scale items."
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "The name of the view."
            }
          }
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxScrollView": {
      "Description": "The ScrollView is a widget that enables a user to scroll its content.",
      "IsTranscludedContent": true,
      "Module": "ui/scroll_view",
      "Options": {
        "bounceEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether to enable or disable the bounce-back effect."
        },
        "direction": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A string value specifying the available scrolling directions."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget can respond to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPullDown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the \"pull to refresh\" gesture is performed. Supported in mobile themes only."
        },
        "onReachBottom": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the content is scrolled down to the bottom."
        },
        "onScroll": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed on each scroll gesture."
        },
        "onUpdated": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the widget is updated."
        },
        "pulledDownText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel when pulling the content down lowers the refresh threshold."
        },
        "pullingDownText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel while pulling the content down to the refresh threshold."
        },
        "reachBottomText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel displayed when content is scrolled to the bottom."
        },
        "refreshingText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text shown in the pullDown panel displayed when the content is being refreshed."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scrollByContent": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not an end-user can scroll the widget content swiping it up or down. Applies only if useNative is false"
        },
        "scrollByThumb": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not an end-user can scroll the widget content using the scrollbar."
        },
        "showScrollbar": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies when the widget shows the scrollbar."
        },
        "useNative": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Indicates whether to use native or simulated scrolling."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxSelectBox": {
      "Description": "The SelectBox widget is an editor that allows an end user to select an item from a drop-down list.",
      "Module": "ui/select_box",
      "IsEditor": true,
      "Options": {
        "acceptCustomValue": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget allows a user to enter a custom value. Requires the onCustomItemCreating handler implementation."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data the widget should display."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the drop-down field's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "displayValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "Returns the value currently displayed by the widget."
        },
        "dropDownButtonTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "fieldTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the text field. Must contain the TextBox widget."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "grouped": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether data items should be grouped."
        },
        "groupTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for group captions."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "maxLength": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the maximum number of characters you can enter into the textbox."
        },
        "minSearchLength": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The minimum number of characters that must be entered into the text box to begin a search. Applies only if searchEnabled is true."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onChange": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus after the content has been changed."
        },
        "onClosed": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is closed."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onCopy": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been copied."
        },
        "onCustomItemCreating": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user adds a custom item. Requires acceptCustomValue to be set to true."
        },
        "onCut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been cut."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEnterKey": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the Enter key has been pressed while the widget is focused."
        },
        "onFocusIn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget gets focus."
        },
        "onFocusOut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onInput": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the widget's input is changed while the widget is focused."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a list item is clicked or tapped."
        },
        "onKeyDown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user is pressing a key on the keyboard."
        },
        "onKeyPress": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user presses a key on the keyboard."
        },
        "onKeyUp": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user releases a key on the keyboard."
        },
        "onOpened": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is opened."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPaste": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been pasted."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a list item is selected or the selection is canceled."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "opened": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text that is provided as a hint in the select box editor."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "searchEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to allow searching."
        },
        "searchExpr": {
          "PrimitiveTypes": [
            "Function"
          ],
          "ItemPrimitiveTypes": [
            "Function"
          ],
          "IsCollection": true,
          "SingularName": "searchExpr",
          "Description": "Specifies the name of a data source item field or an expression whose value is compared to the search criterion."
        },
        "searchMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a comparison operation used to search widget items."
        },
        "searchTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsReadonly": true,
          "Description": "Gets the currently selected item."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "showDataBeforeSearch": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget displays unfiltered values until a user types a number of characters exceeding the minSearchLength option value."
        },
        "showDropDownButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the drop-down button is visible."
        },
        "showSelectionControls": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to display selection controls."
        },
        "spellcheck": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget checks the inner text for spelling mistakes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "Specifies the currently selected value. May be an object if dataSource contains objects and valueExpr is not set."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "valueExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides the widget's value. When this option is not set, the value is the entire data object."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxSlideOut": {
      "Description": "The SlideOut widget is a classic slide-out menu paired with a view. An end user opens the menu by swiping away the view.",
      "Module": "ui/slide_out",
      "Options": {
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget changes its state when interacting with a user."
        },
        "contentTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the widget content. Rendered only once - when the widget is created."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "menuTemplate": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies a template that should be used to render a menu item."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "menuGrouped": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to display a grouped menu."
        },
        "menuGroupTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for group captions."
        },
        "menuItemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for menu items."
        },
        "menuPosition": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the current menu position."
        },
        "menuVisible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the slide-out menu is displayed."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onMenuGroupRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a group menu item is rendered."
        },
        "onMenuItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a regular menu item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is selected or the selection is canceled."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "The index number of the currently selected item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "The selected item object."
        },
        "swipeEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Indicates whether the menu can be shown/hidden by swiping the widget's main panel."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxSlideOutView": {
      "Description": "The SlideOutView widget is a classic slide-out menu paired with a view. This widget is very similar to the SlideOut with only one difference - the SlideOut always contains the List in the slide-out menu, while the SlideOutView can hold any collection there.",
      "IsTranscludedContent": true,
      "Module": "ui/slide_out_view",
      "Options": {
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "contentTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the widget content."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "menuPosition": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the current menu position."
        },
        "menuTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the menu content."
        },
        "menuVisible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the menu panel is visible."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "swipeEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the menu is shown when a user swipes the widget content."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxSlider": {
      "Description": "The Slider is a widget that allows an end user to set a numeric value on a continuous range of possible values.",
      "Module": "ui/slider",
      "IsEditor": true,
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "keyStep": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the step by which a handle moves when a user presses Page Up or Page Down."
        },
        "label": {
          "Description": "Configures the labels displayed at the min and max values.",
          "Options": {
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed in a label."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether labels are over or under the scale."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether slider labels are visible."
            }
          }
        },
        "max": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The maximum value the widget can accept."
        },
        "min": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The minimum value the widget can accept."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showRange": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to highlight the selected range."
        },
        "step": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the step by which the widget's value changes when a user drags a handler."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "tooltip": {
          "Description": "Configures a tooltip.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a tooltip is enabled."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Specifies a tooltip's display format."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether a tooltip is over or under the slider."
            },
            "showMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies when the widget shows a tooltip."
            }
          }
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "The current slider value."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxSparkline": {
      "Description": "The Sparkline widget is a compact chart that contains only one series. Owing to their size, sparklines occupy very little space and can be easily collected in a table or embedded straight in text.",
      "Module": "viz/sparkline",
      "Options": {
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides arguments for a sparkline."
        },
        "barNegativeColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the bars indicating negative values. Available for a sparkline of the bar type only."
        },
        "barPositiveColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the bars indicating positive values. Available for a sparkline of the bar type only."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "Specifies a data source for the sparkline."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "firstLastColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the boundary of both the first and last points on a sparkline."
        },
        "ignoreEmptyPoints": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a sparkline ignores null data points or not."
        },
        "lineColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for a line on a sparkline. Available for the sparklines of the line- and area-like types."
        },
        "lineWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a width for a line on a sparkline. Available for the sparklines of the line- and area-like types."
        },
        "lossColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the bars indicating the values that are less than the winloss threshold. Available for a sparkline of the winloss type only."
        },
        "margin": {
          "Description": "Generates space around the widget.",
          "Options": {
            "bottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the bottom margin of the widget in pixels."
            },
            "left": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the left margin of the widget in pixels."
            },
            "right": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the right margin of the widget in pixels."
            },
            "top": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the top margin of the widget in pixels."
            }
          }
        },
        "maxColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the boundary of the maximum point on a sparkline."
        },
        "maxValue": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the maximum value of the sparkline's value axis."
        },
        "minColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the boundary of the minimum point on a sparkline."
        },
        "minValue": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the minimum value of the sparkline value axis."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onTooltipHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip becomes hidden."
        },
        "onTooltipShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip appears."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "pointColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for points on a sparkline. Available for the sparklines of the line- and area-like types."
        },
        "pointSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the diameter of sparkline points in pixels. Available for the sparklines of line- and area-like types."
        },
        "pointSymbol": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a symbol to use as a point marker on a sparkline. Available for the sparklines of the line- and area-like types."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showFirstLast": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to indicate both the first and last values on a sparkline."
        },
        "showMinMax": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to indicate both the minimum and maximum values on a sparkline."
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "tooltip": {
          "Description": "Configures the tooltip.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of a tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Configures a tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of a tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip's border is visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of a tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors all tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "Element",
                "JQuery"
              ],
              "Description": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element."
            },
            "customizeTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Allows you to change tooltip appearance."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies tooltips' font options."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed it in a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies tooltips' transparency."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
            },
            "shadow": {
              "Description": "Configures a tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a tooltip's z-index."
            }
          }
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Determines the type of a sparkline."
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides values for a sparkline."
        },
        "winColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a color for the bars indicating the values greater than a winloss threshold. Available for a sparkline of the winloss type only."
        },
        "winlossThreshold": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a value that serves as a threshold for the sparkline of the winloss type."
        }
      }
    },
    "dxSwitch": {
      "Description": "The Switch is a widget that can be in two states: \"On\" and \"Off\".",
      "Module": "ui/switch",
      "IsEditor": true,
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "offText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Text displayed when the widget is in a disabled state."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Text displayed when the widget is in an enabled state."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "A Boolean value specifying whether the current switch state is \"On\" or \"Off\"."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxTabPanel": {
      "Description": "The TabPanel is a widget consisting of the Tabs and MultiView widgets. It automatically synchronizes the selected tab with the currently displayed view and vice versa.",
      "Module": "ui/tab_panel",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "animationEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to animate the displayed item change."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the view's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "badge": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a badge text for the tab."
            },
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "icon": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the icon displayed by the widget item title."
            },
            "tabTemplate": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies a template that should be used to render the tab for this item only."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the item title text displayed on a corresponding tab."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "itemTitleTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for item titles."
        },
        "loop": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to scroll back to the first item after the last item is swiped."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is selected or the selection is canceled."
        },
        "onTitleClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tab is clicked or tapped."
        },
        "onTitleHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tab has been held for a specified period."
        },
        "onTitleRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a tab is rendered."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scrollByContent": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying if tabs in the title are scrolled by content."
        },
        "scrollingEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean indicating whether or not to add scrolling support for tabs in the title."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "The index of the currently displayed item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "The selected item object."
        },
        "showNavButtons": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value that specifies the availability of navigation buttons."
        },
        "swipeEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to allow users to change the selected index by swiping."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxTabs": {
      "Description": "The Tabs is a tab strip used to switch between pages or views. This widget is included in the TabPanel widget, but you can use the Tabs separately as well.",
      "Module": "ui/tabs",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "badge": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a badge text for the tab."
            },
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "icon": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the icon displayed by the widget item."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides keys for widget items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is selected or the selection is canceled."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scrollByContent": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not an end-user can scroll tabs by swiping."
        },
        "scrollingEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not an end-user can scroll tabs."
        },
        "selectedIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "The index of the currently selected widget item."
        },
        "selectedItem": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "The selected item object."
        },
        "selectedItemKeys": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "selectedItemKey",
          "Description": "Specifies an array of currently selected item keys."
        },
        "selectedItems": {
          "ItemPrimitiveTypes": [
            "string",
            "number",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "selectedItem",
          "Description": "An array of currently selected item objects."
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether the widget enables an end-user to select only a single item or multiple items."
        },
        "showNavButtons": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value that specifies the availability of navigation buttons."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxTagBox": {
      "Description": "The TagBox widget is an editor that allows an end user to select multiple items from a drop-down list.",
      "Module": "ui/tag_box",
      "IsEditor": true,
      "Options": {
        "acceptCustomValue": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget allows a user to enter a custom value. Requires the onCustomItemCreating handler implementation."
        },
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "applyValueMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the widget applies values."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data the widget should display."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the drop-down field's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "dropDownButtonTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the drop-down button."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "fieldTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the text field. Must contain the TextBox widget."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "grouped": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether data items should be grouped."
        },
        "groupTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for group captions."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hideSelectedItems": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to hide selected items."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "maxDisplayedTags": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the limit on displayed tags. On exceeding it, the widget replaces all tags with a single multi-tag that displays the number of selected items."
        },
        "minSearchLength": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The minimum number of characters that must be entered into the text box to begin a search. Applies only if searchEnabled is true."
        },
        "multiline": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is multiline."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onChange": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus after the content has been changed."
        },
        "onClosed": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is closed."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onCustomItemCreating": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user adds a custom item. Requires acceptCustomValue to be set to true."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEnterKey": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the Enter key has been pressed while the widget is focused."
        },
        "onFocusIn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget gets focus."
        },
        "onFocusOut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onInput": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the widget's input is changed while the widget is focused."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a list item is clicked or tapped."
        },
        "onKeyDown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user is pressing a key on the keyboard."
        },
        "onKeyPress": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user presses a key on the keyboard."
        },
        "onKeyUp": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user releases a key on the keyboard."
        },
        "onMultiTagPreparing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the multi-tag is rendered."
        },
        "onOpened": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed once the drop-down editor is opened."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectAllValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the \"Select All\" check box value is changed. Applies only if showSelectionControls is true."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a list item is selected or the selection is canceled."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "opened": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "Specifies whether or not the drop-down editor is displayed."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text that is provided as a hint in the select box editor."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "searchEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to allow searching."
        },
        "searchExpr": {
          "PrimitiveTypes": [
            "Function"
          ],
          "ItemPrimitiveTypes": [
            "Function"
          ],
          "IsCollection": true,
          "SingularName": "searchExpr",
          "Description": "Specifies the name of a data source item field or an expression whose value is compared to the search criterion."
        },
        "searchMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a comparison operation used to search widget items."
        },
        "searchTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed."
        },
        "selectAllMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the mode in which all items are selected."
        },
        "selectedItems": {
          "ItemPrimitiveTypes": [
            "string",
            "number",
            "any"
          ],
          "IsCollection": true,
          "IsReadonly": true,
          "SingularName": "selectedItem",
          "Description": "Gets the currently selected items."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "showDataBeforeSearch": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget displays unfiltered values until a user types a number of characters exceeding the minSearchLength option value."
        },
        "showDropDownButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the drop-down button is visible."
        },
        "showMultiTagOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the multi-tag is shown without ordinary tags."
        },
        "showSelectionControls": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to display selection controls."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "tagTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for tags."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "ItemPrimitiveTypes": [
            "string",
            "number",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "value",
          "Description": "Specifies the selected items."
        },
        "valueExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides the widget's value. When this option is not set, the value is the entire data object."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxTextArea": {
      "Description": "The TextArea is a widget that enables a user to enter and edit a multi-line text.",
      "Module": "ui/text_area",
      "IsEditor": true,
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "autoResizeEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the auto resizing mode is enabled."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the maximum height of the widget."
        },
        "maxLength": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the maximum number of characters you can enter into the textbox."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the minimum height of the widget."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onChange": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus after the content has been changed."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onCopy": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been copied."
        },
        "onCut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been cut."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEnterKey": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the Enter key has been pressed while the widget is focused."
        },
        "onFocusIn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget gets focus."
        },
        "onFocusOut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onInput": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the widget's input is changed while the widget is focused."
        },
        "onKeyDown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user is pressing a key on the keyboard."
        },
        "onKeyPress": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user presses a key on the keyboard."
        },
        "onKeyUp": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user releases a key on the keyboard."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPaste": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been pasted."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is empty."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "spellcheck": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget checks the inner text for spelling mistakes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsChangeable": true,
          "Description": "Specifies a value the widget displays."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxTextBox": {
      "Description": "The TextBox is a widget that enables a user to enter and edit a single line of text.",
      "Module": "ui/text_box",
      "IsEditor": true,
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "inputAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be passed on to the underlying HTML element."
        },
        "isValid": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the editor's value is valid."
        },
        "mask": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The editor mask that specifies the format of the entered string."
        },
        "maskChar": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a mask placeholder character."
        },
        "maskInvalidMessage": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A message displayed when the entered text does not match the specified pattern."
        },
        "maskRules": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies custom mask rules."
        },
        "maxLength": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the maximum number of characters you can enter into the textbox."
        },
        "mode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The \"mode\" attribute value of the actual HTML input element representing the text box."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The value to be assigned to the `name` attribute of the underlying HTML element."
        },
        "onChange": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus after the content has been changed."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onCopy": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been copied."
        },
        "onCut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been cut."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEnterKey": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the Enter key has been pressed while the widget is focused."
        },
        "onFocusIn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget gets focus."
        },
        "onFocusOut": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget loses focus."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onInput": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the widget's input is changed while the widget is focused."
        },
        "onKeyDown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user is pressing a key on the keyboard."
        },
        "onKeyPress": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user presses a key on the keyboard."
        },
        "onKeyUp": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user releases a key on the keyboard."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onPaste": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's input has been pasted."
        },
        "onValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget's value is changed."
        },
        "placeholder": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text displayed by the widget when the widget value is empty."
        },
        "readOnly": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is read-only."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showClearButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to display the Clear button in the widget."
        },
        "showMaskMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies when the widget shows the mask. Applies only if useMaskedValue is true."
        },
        "spellcheck": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget checks the inner text for spelling mistakes."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsReadonly": true,
          "Description": "The read-only option that holds the text displayed by the widget input element."
        },
        "useMaskedValue": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the value should contain mask characters or not."
        },
        "validationError": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option."
        },
        "validationMessageMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed."
        },
        "value": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsChangeable": true,
          "Description": "Specifies a value the widget displays."
        },
        "valueChangeEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies DOM event names that update a widget's value."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxTileView": {
      "Description": "The TileView widget contains a collection of tiles. Tiles can store much more information than ordinary buttons, that is why they are very popular in apps designed for touch devices.",
      "Module": "ui/tile_view",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget changes its state when interacting with a user."
        },
        "baseItemHeight": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the height of the base tile view item."
        },
        "baseItemWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the width of the base tile view item."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "direction": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether tiles are placed horizontally or vertically."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "itemMargin": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the distance in pixels between adjacent tiles."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "heightRatio": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a multiplier for the baseItemHeight option value (for the purpose of obtaining the actual item height)."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "widthRatio": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a multiplier for the baseItemWidth option value (for the purpose of obtaining the actual item width)."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "showScrollbar": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not to display a scrollbar."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxToast": {
      "Description": "The Toast is a widget that provides pop-up notifications.",
      "Module": "ui/toast",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "closeOnBackButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user presses the Back hardware button."
        },
        "closeOnClick": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the toast is closed if a user clicks it."
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "boolean",
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies whether to close the widget if a user clicks outside it."
        },
        "closeOnSwipe": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the toast is closed if a user swipes it out of the screen boundaries."
        },
        "contentTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the widget content."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the widget's content when it is displayed. If false, the content is rendered immediately."
        },
        "displayTime": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time span in milliseconds during which the Toast widget is visible."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height in pixels."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the maximum height the widget can reach while resizing."
        },
        "maxWidth": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the maximum width the widget can reach while resizing."
        },
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The Toast message text."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the minimum height the widget can reach while resizing."
        },
        "minWidth": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the minimum width the widget can reach while resizing."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is hidden."
        },
        "onHiding": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is hidden."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onShowing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is displayed."
        },
        "onShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is displayed."
        },
        "position": {
          "PrimitiveTypes": [
            "DevExpress.positionConfig",
            "string"
          ],
          "ComplexTypes": [
            "PositionConfig"
          ],
          "Description": "Positions the widget."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "shading": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the main screen is inactive while the widget is active."
        },
        "shadingColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shading color."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the Toast widget type."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "A Boolean value specifying whether or not the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width in pixels."
        }
      }
    },
    "dxToolbar": {
      "Description": "The Toolbar is a widget containing items that usually manage screen content. Those items can be plain text or widgets.",
      "Module": "ui/toolbar",
      "Options": {
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "locateInMenu": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies when to display an item in the toolbar's overflow menu."
            },
            "location": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a location for the item on the toolbar."
            },
            "menuItemTemplate": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies a template that should be used to render a menu item."
            },
            "options": {
              "PrimitiveTypes": [
                "any"
              ],
              "Description": "Specifies a configuration object for the widget that presents a toolbar item."
            },
            "showText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies when to display the text for the widget item."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            },
            "widget": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "A widget that presents a toolbar item."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "menuItemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for menu items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "renderAs": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Informs the widget about its location in a view HTML markup."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxTooltip": {
      "Description": "The Tooltip widget displays a tooltip for a specified element on the page.",
      "IsTranscludedContent": true,
      "Module": "ui/tooltip",
      "Options": {
        "animation": {
          "Description": "Configures widget visibility animations. This object contains two fields: show and hide.",
          "Options": {
            "hide": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being hidden."
            },
            "show": {
              "PrimitiveTypes": [
                "DevExpress.animationConfig"
              ],
              "ComplexTypes": [
                "AnimationConfig"
              ],
              "Description": "An object that defines the animation options used when the widget is being shown."
            }
          }
        },
        "closeOnBackButton": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the widget is closed if a user presses the Back hardware button."
        },
        "closeOnOutsideClick": {
          "PrimitiveTypes": [
            "boolean",
            "Function"
          ],
          "IsFunc": true,
          "Description": "A Boolean value specifying whether or not the widget is closed if a user clicks outside of the popover window and outside the target element."
        },
        "container": {
          "PrimitiveTypes": [
            "Element",
            "JQuery"
          ],
          "Description": "Specifies the container in which to place the widget."
        },
        "contentTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the widget content."
        },
        "deferRendering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to render the widget's content when it is displayed. If false, the content is rendered immediately."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsChangeable": true,
          "Description": "Specifies the widget's height."
        },
        "hideEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options of popover hiding.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The delay in milliseconds after which the widget is hidden."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the event names on which the widget is hidden."
            }
          }
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "maxHeight": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the maximum height the widget can reach while resizing."
        },
        "maxWidth": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the maximum width the widget can reach while resizing."
        },
        "minHeight": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the minimum height the widget can reach while resizing."
        },
        "minWidth": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the minimum width the widget can reach while resizing."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is hidden."
        },
        "onHiding": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is hidden."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onShowing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is displayed."
        },
        "onShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is displayed."
        },
        "position": {
          "PrimitiveTypes": [
            "DevExpress.positionConfig",
            "string"
          ],
          "ComplexTypes": [
            "PositionConfig"
          ],
          "Description": "An object defining widget positioning options."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "shading": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "A Boolean value specifying whether or not the main screen is inactive while the widget is active."
        },
        "shadingColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shading color."
        },
        "showEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies options for displaying the widget.",
          "Options": {
            "delay": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The delay in milliseconds after which the widget is displayed."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the event names on which the widget is shown."
            }
          }
        },
        "target": {
          "PrimitiveTypes": [
            "Element",
            "JQuery"
          ],
          "Description": "The target element associated with a popover."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "A Boolean value specifying whether or not the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsChangeable": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxTreeList": {
      "Description": "The TreeList is a widget that represents data from a local or remote source in the form of a multi-column tree view. This widget offers such features as sorting, filtering, editing, selection, etc.",
      "Module": "ui/tree_list",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "allowColumnReordering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can reorder columns."
        },
        "allowColumnResizing": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can resize columns."
        },
        "autoExpandAll": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether all rows are expanded initially."
        },
        "cacheEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether data should be cached."
        },
        "cellHintEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content."
        },
        "columnAutoWidth": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether columns should adjust their widths to the content."
        },
        "columnChooser": {
          "Description": "Configures the column chooser.",
          "Options": {
            "allowSearch": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether searching is enabled in the column chooser."
            },
            "emptyPanelText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed by the column chooser when it is empty."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can open the column chooser."
            },
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the column chooser."
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies how a user manages columns using the column chooser."
            },
            "searchTimeout": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a delay in milliseconds between when a user finishes typing in the column chooser's search panel, and when the search is executed."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title of the column chooser."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the column chooser."
            }
          }
        },
        "columnFixing": {
          "Description": "Configures column fixing.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables column fixing."
            },
            "texts": {
              "Description": "Contains options that specify texts for column fixing commands in the context menu of a column header.",
              "Options": {
                "fix": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu item that fixes a column."
                },
                "leftPosition": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu subitem that fixes a column to the left edge of the widget."
                },
                "rightPosition": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu subitem that fixes a column to the right edge of the widget."
                },
                "unfix": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the context menu item that unfixes a column."
                }
              }
            }
          }
        },
        "columnHidingEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is \"widget\"."
        },
        "columnMinWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the minimum width of columns."
        },
        "columnResizingMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how the widget resizes columns. Applies only if allowColumnResizing is true."
        },
        "columns": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxTreeListColumn"
          ],
          "ItemComplexTypes": [
            "TreeListColumn"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "column",
          "Description": "Configures columns."
        },
        "columnWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the width for all data columns. Has a lower priority than the column.width option."
        },
        "customizeColumns": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Customizes columns after they are created."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "Specifies the origin of data for the widget."
        },
        "dataStructure": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Notifies the widget of your data structure."
        },
        "dateSerializationFormat": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies date-time values' serialization format. Use it only if you do not specify the dataSource at design time."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "editing": {
          "Description": "Configures editing.",
          "Options": {
            "allowAdding": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can add new rows."
            },
            "allowDeleting": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can delete rows."
            },
            "allowUpdating": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can update rows."
            },
            "form": {
              "PrimitiveTypes": [
                "DevExpress.ui.dxFormOptions"
              ],
              "ComplexTypes": [
                "dxFormOptions"
              ],
              "Description": "Configures the form. Used only if editing.mode is \"form\" or \"popup\"."
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies how a user edits data."
            },
            "popup": {
              "PrimitiveTypes": [
                "DevExpress.ui.dxPopupOptions"
              ],
              "ComplexTypes": [
                "dxPopupOptions"
              ],
              "Description": "Configures the popup. Used only if editing.mode is \"popup\"."
            },
            "texts": {
              "Description": "Contains options that specify texts for editing-related UI elements.",
              "Options": {
                "addRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint that appears when a user pauses on the global \"Add\" button. Applies only if editing.allowAdding is true."
                },
                "addRowToNode": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the button that adds a new nested row. Applies if the editing.mode is \"batch\" or \"cell\"."
                },
                "cancelAllChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint that appears when a user pauses on the \"Discard\" button. Applies only if editing.mode is \"batch\"."
                },
                "cancelRowChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a button that cancels changes in a row. Applies only if editing.allowUpdating is true and editing.mode is \"row\"."
                },
                "confirmDeleteMessage": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a message that prompts a user to confirm deletion."
                },
                "confirmDeleteTitle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a title for the window that asks a user to confirm deletion."
                },
                "deleteRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for buttons that delete rows. Applies only if allowDeleting is true."
                },
                "editRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for buttons that switch rows into the editing state. Applies only if allowUpdating is true."
                },
                "saveAllChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint that appears when a user pauses on the global \"Save\" button. Applies only if editing.mode is \"batch\"."
                },
                "saveRowChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a button that saves changes made in a row. Applies only if allowUpdating is true."
                },
                "undeleteRow": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for buttons that recover deleted rows. Applies only if allowDeleting is true and editing.mode is \"batch\"."
                },
                "validationCancelChanges": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for a hint appearing when a user pauses on the button that cancels changes in a cell. Applies only if editing.mode is \"cell\" and data validation is enabled."
                }
              }
            },
            "useIcons": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the editing column uses icons instead of links."
            }
          }
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "errorRowEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Indicates whether to show the error row."
        },
        "expandedRowKeys": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "expandedRowKey",
          "Description": "Specifies keys of the initially expanded rows."
        },
        "expandNodesOnFiltering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether nodes appear expanded or collapsed after filtering is applied."
        },
        "filterBuilder": {
          "PrimitiveTypes": [
            "DevExpress.ui.dxFilterBuilderOptions"
          ],
          "ComplexTypes": [
            "dxFilterBuilderOptions"
          ],
          "Description": "Configures the integrated filter builder."
        },
        "filterBuilderPopup": {
          "PrimitiveTypes": [
            "DevExpress.ui.dxPopupOptions"
          ],
          "ComplexTypes": [
            "dxPopupOptions"
          ],
          "Description": "Configures the popup in which the integrated filter builder is shown."
        },
        "filterPanel": {
          "Description": "Configures the filter panel.",
          "Options": {
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Customizes the filter expression's text representation."
            },
            "filterEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the filter expression is applied."
            },
            "texts": {
              "Description": "Specifies texts for the filter panel's elements.",
              "Options": {
                "clearFilter": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The text of the \"Clear\" link."
                },
                "createFilter": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The text of the \"Create Filter\" link."
                },
                "filterEnabledHint": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The hint of the checkbox that applies the filter."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the filter panel is visible."
            }
          }
        },
        "filterRow": {
          "Description": "Configures the filter row.",
          "Options": {
            "applyFilter": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies when to apply a filter."
            },
            "applyFilterText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for a hint that appears when a user pauses on a button that applies the filter."
            },
            "betweenEndText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a placeholder for the editor that specifies the end of a range when a user selects the \"between\" filter operation."
            },
            "betweenStartText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a placeholder for the editor that specifies the start of a range when a user selects the \"between\" filter operation."
            },
            "operationDescriptions": {
              "Description": "Specifies descriptions for filter operations on the filter list.",
              "Options": {
                "between": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"between\" operation."
                },
                "contains": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"contains\" operation."
                },
                "endsWith": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"endswith\" operation."
                },
                "equal": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"=\" operation."
                },
                "greaterThan": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \">\" operation."
                },
                "greaterThanOrEqual": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \">=\" operation."
                },
                "lessThan": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"<\" operation."
                },
                "lessThanOrEqual": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"<=\" operation."
                },
                "notContains": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"notcontains\" operation."
                },
                "notEqual": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"<>\" operation."
                },
                "startsWith": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "A description for the \"startswith\" operation."
                }
              }
            },
            "resetOperationText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the reset operation on the filter list."
            },
            "showAllText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the item that clears the applied filter. Used only when a cell of the filter row contains a select box."
            },
            "showOperationChooser": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether icons that open the filter lists are visible."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the filter row is visible."
            }
          }
        },
        "filterSyncEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to synchronize the filter row, header filter, and filter builder. The synchronized filter expression is stored in the filterValue option."
        },
        "filterValue": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsFilterExpr": true,
          "Description": "Specifies a filter expression."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hasItemsExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field defines whether the node has children."
        },
        "headerFilter": {
          "Description": "Configures the header filter feature.",
          "Options": {
            "allowSearch": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether searching is enabled in the header filter."
            },
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the popup menu that contains values for filtering."
            },
            "searchTimeout": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a delay in milliseconds between when a user finishes typing in the header filter's search panel, and when the search is executed."
            },
            "texts": {
              "Description": "Contains options that specify text for various elements of the popup menu.",
              "Options": {
                "cancel": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the button that closes the popup menu without applying a filter."
                },
                "emptyValue": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a name for the item that represents empty values in the popup menu."
                },
                "ok": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the button that applies the specified filter."
                }
              }
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Indicates whether header filter icons are visible."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the popup menu that contains values for filtering."
            }
          }
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemsExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field contains nested items. Set this option when your data has a hierarchical structure."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides keys for nodes."
        },
        "loadPanel": {
          "Description": "Configures the load panel.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables displaying the load panel automatically."
            },
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the load panel in pixels."
            },
            "indicatorSrc": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a URL pointing to an image to be used as a loading indicator."
            },
            "showIndicator": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator."
            },
            "showPane": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the pane of the load panel."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed on the load panel."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the load panel in pixels."
            }
          }
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text shown when the widget does not display any data."
        },
        "onAdaptiveDetailRowPreparing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before an adaptive detail row is rendered."
        },
        "onCellClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a cell is clicked or tapped. Executed before onRowClick."
        },
        "onCellHoverChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the pointer enters or leaves a cell."
        },
        "onCellPrepared": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a grid cell is created."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onContextMenuPreparing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the context menu is rendered."
        },
        "onDataErrorOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error occurs in the data source."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onEditingStart": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a cell or row switches to the editing state."
        },
        "onEditorPrepared": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after an editor is created."
        },
        "onEditorPreparing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before an editor is created."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onInitNewRow": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a new row is added to the widget."
        },
        "onKeyDown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget is in focus and a key has been pressed down."
        },
        "onNodesInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the loaded nodes are initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onRowClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a grid row is clicked or tapped."
        },
        "onRowCollapsed": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a row is collapsed."
        },
        "onRowCollapsing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a row is collapsed."
        },
        "onRowExpanded": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a row is expanded."
        },
        "onRowExpanding": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a row is expanded."
        },
        "onRowInserted": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a new row has been inserted into the data source."
        },
        "onRowInserting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a new row is inserted into the data source."
        },
        "onRowPrepared": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a row is created."
        },
        "onRowRemoved": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a row has been removed from the data source."
        },
        "onRowRemoving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a row is removed from the data source."
        },
        "onRowUpdated": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a row has been updated in the data source."
        },
        "onRowUpdating": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a row is updated in the data source."
        },
        "onRowValidating": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after cells in a row are validated against validation rules."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after selecting a row or clearing its selection."
        },
        "onToolbarPreparing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the toolbar is created."
        },
        "pager": {
          "Description": "Configures the pager.",
          "Options": {
            "allowedPageSizes": {
              "ItemPrimitiveTypes": [
                "number"
              ],
              "IsCollection": true,
              "SingularName": "allowedPageSize",
              "Description": "Specifies the available page sizes in the page size selector."
            },
            "infoText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the page information text."
            },
            "showInfo": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the page information."
            },
            "showNavigationButtons": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show navigation buttons."
            },
            "showPageSizeSelector": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the page size selector."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the pager is visible."
            }
          }
        },
        "paging": {
          "Description": "Configures paging.",
          "Options": {
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables paging."
            },
            "pageIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "IsChangeable": true,
              "Description": "Specifies the page to be displayed using a zero-based index."
            },
            "pageSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "IsChangeable": true,
              "Description": "Specifies the page size."
            }
          }
        },
        "parentIdExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides parent keys."
        },
        "remoteOperations": {
          "Description": "Notifies the TreeList of the server's data processing operations. Applies only if data has a plain structure.",
          "Options": {
            "filtering": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether filtering should be performed on the server."
            },
            "grouping": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether grouping should be performed on the server."
            },
            "sorting": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether sorting should be performed on the server."
            }
          }
        },
        "renderAsync": {
          "PrimitiveTypes": [
            "boolean"
          ]
        },
        "rootValue": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the root node's identifier. Applies if dataStructure is \"plain\"."
        },
        "rowAlternationEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether rows should be shaded differently."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scrolling": {
          "Description": "Configures scrolling.",
          "Options": {
            "columnRenderingMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the rendering mode for columns. Applies when columns are left outside the viewport."
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the scrolling mode."
            },
            "preloadEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the widget should load pages adjacent to the current page. Applies only if scrolling.mode is \"virtual\"."
            },
            "rowRenderingMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the rendering mode for loaded rows."
            },
            "scrollByContent": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can scroll the content with a swipe gesture. Applies only if useNative is false."
            },
            "scrollByThumb": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can scroll the content with the scrollbar. Applies only if useNative is false."
            },
            "showScrollbar": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies when to show scrollbars. Applies only if useNative is false."
            },
            "useNative": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the widget should use native or simulated scrolling."
            }
          }
        },
        "searchPanel": {
          "Description": "Configures the search panel.",
          "Options": {
            "highlightCaseSensitive": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Notifies the widget whether search is case-sensitive to ensure proper highlightning of search results. Applies only if highlightSearchText is true."
            },
            "highlightSearchText": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether found substrings should be highlighted."
            },
            "placeholder": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a placeholder for the search panel."
            },
            "searchVisibleColumnsOnly": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the widget should search against all columns or only visible ones."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "IsChangeable": true,
              "Description": "Sets a search string for the search panel."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether the search panel is visible or not."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the search panel in pixels."
            }
          }
        },
        "selectedRowKeys": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "selectedRowKey",
          "Description": "Allows you to select rows or determine which rows are selected."
        },
        "selection": {
          "Description": "Configures runtime selection.",
          "Options": {
            "allowSelectAll": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can select all rows at once."
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the selection mode."
            },
            "recursive": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether selection is recursive."
            }
          }
        },
        "showBorders": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the outer borders of the widget are visible."
        },
        "showColumnHeaders": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether column headers are visible."
        },
        "showColumnLines": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether vertical lines that separate one column from another are visible."
        },
        "showRowLines": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether horizontal lines that separate one row from another are visible."
        },
        "sorting": {
          "Description": "Configures runtime sorting.",
          "Options": {
            "ascendingText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the context menu item that sets an ascending sort order in a column."
            },
            "clearText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the context menu item that clears sorting settings for a column."
            },
            "descendingText": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text for the context menu item that sets a descending sort order in a column."
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the sorting mode."
            }
          }
        },
        "stateStoring": {
          "Description": "Configures state storing.",
          "Options": {
            "customLoad": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a function that is executed on state loading. Applies only if the type is 'custom'."
            },
            "customSave": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a function that is executed on state saving. Applies only if the type is \"custom\"."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables state storing."
            },
            "savingTimeout": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the delay in milliseconds between when a user makes a change and when this change is saved."
            },
            "storageKey": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the key for storing the widget state."
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the type of storage where the state is saved."
            }
          }
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "twoWayBindingEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to enable two-way data binding."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        },
        "wordWrapEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether text that does not fit into a column should be wrapped."
        }
      }
    },
    "dxTreeMap": {
      "Description": "The TreeMap is a widget that displays hierarchical data by using nested rectangles.",
      "Module": "viz/tree_map",
      "Options": {
        "childrenField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides nested items for a group. Applies to hierarchical data sources only."
        },
        "colorField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides colors for tiles."
        },
        "colorizer": {
          "Description": "Manages the color settings.",
          "Options": {
            "colorCodeField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the data source field whose values define the color of a tile. Applies only if the type option is \"gradient\" or \"range\"."
            },
            "colorizeGroups": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not all tiles in a group must be colored uniformly. Applies only if the type option is \"discrete\"."
            },
            "palette": {
              "PrimitiveTypes": [
                "string"
              ],
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "palette",
              "Description": "Sets the palette to be used to colorize tiles."
            },
            "paletteExtensionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies what to do with colors in the palette when their number is less than the number of treemap tiles."
            },
            "range": {
              "ItemPrimitiveTypes": [
                "number"
              ],
              "IsCollection": true,
              "SingularName": "range",
              "Description": "Allows you to paint tiles with similar values uniformly. Applies only if the type option is \"gradient\" or \"range\"."
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the colorizing algorithm."
            }
          }
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsDataSource": true,
          "Description": "Specifies the origin of data for the widget."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "format",
              "Description": "Specifies a set of export formats."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Adds an empty space around the exported widget; measured in pixels."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export.enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            }
          }
        },
        "group": {
          "Description": "Configures groups.",
          "Options": {
            "border": {
              "Description": "Configures the group borders.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the group borders."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the group borders in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the group headers."
            },
            "headerHeight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the group headers in pixels."
            },
            "hoverEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether groups change their style when a user pauses on them."
            },
            "hoverStyle": {
              "Description": "Specifies the appearance of groups in the hover state.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance of the group borders in the hover state.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Colors the group borders in the hover state."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width of the group borders in pixels. Applies to a group in the hover state."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the group headers in the hover state."
                }
              }
            },
            "label": {
              "Description": "Configures the group labels.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies the font settings of the group labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Changes the visibility of the group labels."
                }
              }
            },
            "selectionStyle": {
              "Description": "Specifies the appearance of groups in the selected state.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance of the group borders in the selected state.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Colors the group borders in the selected state."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width of the group borders in pixels. Applies to a group in the selected state."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the group headers in the selected state."
                }
              }
            }
          }
        },
        "hoverEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether tiles and groups change their style when a user pauses on them."
        },
        "idField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides IDs for items. Applies to plain data sources only."
        },
        "interactWithGroup": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the user will interact with a single tile or its group."
        },
        "labelField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides texts for tile and group labels."
        },
        "layoutAlgorithm": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the layout algorithm."
        },
        "layoutDirection": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the direction in which the items will be laid out."
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "maxDepth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies how many hierarchical levels must be visualized."
        },
        "onClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a node is clicked or tapped."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onDrill": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a user drills up or down."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onHoverChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the pointer enters or leaves a node."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onNodesInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the nodes are initialized."
        },
        "onNodesRendering": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the nodes are displayed and each time the collection of active nodes is changed."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a node is selected or the selection is canceled."
        },
        "parentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides parent IDs for items. Applies to plain data sources only."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "resolveLabelOverflow": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Decides whether those labels that overflow their tile/group should be hidden or truncated with ellipsis."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether a single or multiple nodes can be in the selected state simultaneously."
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "tile": {
          "Description": "Configures tiles.",
          "Options": {
            "border": {
              "Description": "Configures the tile borders.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the tile borders."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the tile borders in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a single color for all tiles."
            },
            "hoverStyle": {
              "Description": "Specifies the appearance of tiles in the hover state.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance of the tile borders in the hover state.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Colors the tile borders in the hover state."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width of the tile borders in pixels. Applies to a tile in the hover state."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors tiles in the hover state."
                }
              }
            },
            "label": {
              "Description": "Configures the tile labels.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies the font settings of the tile labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Changes the visibility of the tile labels."
                }
              }
            },
            "selectionStyle": {
              "Description": "Specifies the appearance of tiles in the selected state.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance of the tile borders in the selected state.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Colors the tile borders in the selected state."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width of the tile borders in pixels. Applies to a tile in the selected state."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors tiles in the selected state."
                }
              }
            }
          }
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Configures the widget's title.",
          "Options": {
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the widget's subtitle.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's text."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips - small pop-up rectangles that display information about a data-visualizing widget element being pressed or hovered over with the mouse pointer.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of a tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Configures a tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of a tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip's border is visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of a tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors all tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "Element",
                "JQuery"
              ],
              "Description": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element."
            },
            "customizeTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Allows you to change tooltip appearance."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies tooltips' font options."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed it in a tooltip."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies tooltips' transparency."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
            },
            "shadow": {
              "Description": "Configures a tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a tooltip's z-index."
            }
          }
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides values for tiles."
        }
      }
    },
    "dxTreeView": {
      "Description": "The TreeView widget is a tree-like representation of textual data.",
      "Module": "ui/tree_view",
      "Options": {
        "accessKey": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the shortcut key that sets focus on the widget."
        },
        "activeStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the widget changes its state when interacting with a user."
        },
        "animationEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to animate item collapsing and expanding."
        },
        "createChildren": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Allows you to load nodes manually."
        },
        "dataSource": {
          "PrimitiveTypes": [
            "DevExpress.data.DataSource",
            "DevExpress.data.DataSourceOptions",
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string",
            "DevExpress.ui.CollectionWidgetItemTemplate"
          ],
          "IsDataSource": true,
          "Description": "A data source used to fetch data to be displayed by the widget."
        },
        "dataStructure": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether a nested or plain array is used as a data source."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget responds to user interaction."
        },
        "disabledExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget item is disabled."
        },
        "displayExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value is displayed by the widget."
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "expandAllEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not a user can expand all tree view items by the \"*\" hot key."
        },
        "expandedExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data source field specifies whether an item is expanded."
        },
        "expandEvent": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the event on which to expand/collapse a node."
        },
        "expandNodesRecursive": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not all parent nodes of an initially expanded node are displayed expanded."
        },
        "focusStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget can be focused using keyboard navigation."
        },
        "hasItemsExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding node includes child nodes."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "hint": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text for a hint that appears when a user pauses on the widget."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "itemHoldTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The time period in milliseconds before the onItemHold event is raised."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxTreeViewItemTemplate"
          ],
          "ItemComplexTypes": [
            "TreeViewItem"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget."
        },
        "itemsExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field contains nested items."
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "keyExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies which data field provides keys for TreeView items."
        },
        "noDataText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The text or HTML markup displayed by the widget if the item collection is empty."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onItemCollapsed": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tree view item is collapsed."
        },
        "onItemContextMenu": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is right-clicked or pressed."
        },
        "onItemExpanded": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tree view item is expanded."
        },
        "onItemHold": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item has been held for a specified period."
        },
        "onItemRendered": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a collection item is rendered."
        },
        "onItemSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tree view item is selected or the selection is canceled."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectAllValueChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the \"Select All\" check box value is changed. Applies only if showCheckBoxesMode is \"selectAll\" and selectionMode is \"multiple\"."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tree view item is selected or the selection is canceled."
        },
        "parentIdExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field for holding the parent key of the corresponding node."
        },
        "rootValue": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the parent ID value of the root item."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "scrollDirection": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A string value specifying available scrolling directions."
        },
        "searchEditorOptions": {
          "PrimitiveTypes": [
            "DevExpress.ui.dxTextBoxOptions"
          ],
          "ComplexTypes": [
            "dxTextBoxOptions"
          ],
          "Description": "Configures the search panel."
        },
        "searchEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the search panel is visible."
        },
        "searchExpr": {
          "PrimitiveTypes": [
            "Function"
          ],
          "ItemPrimitiveTypes": [
            "Function"
          ],
          "IsCollection": true,
          "SingularName": "searchExpr",
          "Description": "Specifies a data object's field name or an expression whose value is compared to the search string."
        },
        "searchMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a comparison operation used to search widget items."
        },
        "searchTimeout": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a delay in milliseconds between when a user finishes typing, and the search is executed."
        },
        "searchValue": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the current search string."
        },
        "selectAllText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text displayed at the \"Select All\" check box."
        },
        "selectByClick": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not an item becomes selected if a user clicks it."
        },
        "selectedExpr": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the name of the data source item field whose value defines whether or not the corresponding widget items is selected."
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies item selection mode."
        },
        "selectNodesRecursive": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to select nodes recursively."
        },
        "showCheckBoxesMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the current check boxes display mode."
        },
        "tabIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of the element when the Tab key is used for navigating."
        },
        "virtualModeEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies if the virtual mode is enabled."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget is visible."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxValidationGroup": {
      "Description": "The ValidationGroup is a widget that allows you to validate several editors simultaneously.",
      "IsTranscludedContent": true,
      "Module": "ui/validation_group",
      "Options": {
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxValidationSummary": {
      "Description": "A widget for displaying the result of checking validation rules for editors.",
      "Module": "ui/validation_summary",
      "Options": {
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "hoverStateEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the widget changes its state when a user pauses on it."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "string",
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "item",
          "Description": "An array of items displayed by the widget.",
          "Options": {
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed disabled."
            },
            "html": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies html code inserted into the widget item element."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "Specifies an item template that should be used to render this item only."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies text displayed for the widget item."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a widget item must be displayed."
            }
          }
        },
        "itemTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for items."
        },
        "onContentReady": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's content is ready and each time the content is changed."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onItemClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a collection item is clicked or tapped."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "validationGroup": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the validation group for which summary should be generated."
        }
      }
    },
    "dxValidator": {
      "Description": "A widget that is used to validate the associated DevExtreme editors against the defined validation rules.",
      "IsExtensionComponent": true,
      "Module": "ui/validator",
      "Options": {
        "adapter": {
          "Description": "An object that specifies what and when to validate, and how to apply the validation result.",
          "Options": {
            "applyValidationResults": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "A function that the Validator widget calls after validating a specified value."
            },
            "bypass": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "A function that returns a Boolean value specifying whether or not to bypass validation."
            },
            "focus": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "A function that sets focus to a validated editor when the corresponding ValidationSummary item is focused."
            },
            "getValue": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "A function that returns the value to be validated."
            },
            "reset": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "A function that resets the validated values."
            },
            "validationRequestsCallbacks": {
              "PrimitiveTypes": [
                "any"
              ],
              "ItemPrimitiveTypes": [
                "Function"
              ],
              "IsCollection": true,
              "SingularName": "validationRequestsCallback",
              "Description": "Callbacks to be executed on the value validation."
            }
          }
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "height": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's height."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the editor name to be used in the validation default messages."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onValidated": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a value is validated."
        },
        "validationGroup": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the validation group the editor will be related to."
        },
        "validationRules": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.RequiredRule",
            "DevExpress.ui.NumericRule",
            "DevExpress.ui.RangeRule",
            "DevExpress.ui.StringLengthRule",
            "DevExpress.ui.CustomRule",
            "DevExpress.ui.CompareRule",
            "DevExpress.ui.PatternRule",
            "DevExpress.ui.EmailRule"
          ],
          "ItemComplexTypes": [
            "RequiredRule",
            "NumericRule",
            "RangeRule",
            "StringLengthRule",
            "CustomRule",
            "CompareRule",
            "PatternRule",
            "EmailRule"
          ],
          "IsCollection": true,
          "SingularName": "validationRule",
          "Description": "An array of validation rules to be checked for the editor with which the dxValidator object is associated."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies the widget's width."
        }
      }
    },
    "dxVectorMap": {
      "Description": "The VectorMap is a widget that visualizes geographical locations. This widget represents a geographical map that contains areas and markers. Areas embody continents and countries. Markers flag specific points on the map, for example, towns, cities or capitals.",
      "Module": "viz/vector_map",
      "Options": {
        "background": {
          "Description": "Specifies the options for the map background.",
          "Options": {
            "borderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the background border."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the background."
            }
          }
        },
        "bounds": {
          "ItemPrimitiveTypes": [
            "number"
          ],
          "IsCollection": true,
          "SingularName": "bound",
          "Description": "Specifies the positioning of a map in geographical coordinates."
        },
        "center": {
          "ItemPrimitiveTypes": [
            "number"
          ],
          "IsCollection": true,
          "SingularName": "center",
          "Description": "Specifies the geographical coordinates of the center for a map."
        },
        "controlBar": {
          "Description": "Specifies the options of the control bar.",
          "Options": {
            "borderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the outline of the control bar elements."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the inner area of the control bar elements."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to display the control bar."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the position of the control bar."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the margin of the control bar in pixels."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the opacity of the control bar."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the position of the control bar."
            }
          }
        },
        "elementAttr": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the attributes to be attached to the widget's root element."
        },
        "export": {
          "Description": "Configures the exporting and printing features.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color that will fill transparent regions in the resulting file or document."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the client-side exporting in the widget."
            },
            "fileName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a default name for the file to which the widget will be exported."
            },
            "formats": {
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "format",
              "Description": "Specifies a set of export formats."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Adds an empty space around the exported widget; measured in pixels."
            },
            "printingEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables the printing feature in the widget. Applies only if the export.enabled option is true."
            },
            "proxyUrl": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the URL of the server-side proxy that streams the resulting file to the end user to enable exporting in the Safari browser."
            }
          }
        },
        "layers": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "layer",
          "Description": "Specifies options for VectorMap widget layers.",
          "Options": {
            "borderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the border of the layer elements."
            },
            "borderWidth": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the line width (for layers of a line type) or width of the layer elements border in pixels."
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for layer elements."
            },
            "colorGroupingField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the field that provides data to be used for coloring of layer elements."
            },
            "colorGroups": {
              "ItemPrimitiveTypes": [
                "number"
              ],
              "IsCollection": true,
              "SingularName": "colorGroup",
              "Description": "Allows you to paint layer elements with similar attributes in the same color."
            },
            "customize": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies the function that customizes each layer element individually."
            },
            "dataField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the attribute containing marker data. Setting this option makes sense only if the layer type is \"marker\" and the elementType is \"bubble\", \"pie\" or \"image\"."
            },
            "dataSource": {
              "PrimitiveTypes": [
                "any",
                "DevExpress.data.DataSource",
                "DevExpress.data.DataSourceOptions",
                "string"
              ],
              "IsDataSource": true,
              "Description": "Specifies a data source for the layer."
            },
            "elementType": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the type of a marker element. Setting this option makes sense only if the layer type is \"marker\"."
            },
            "hoveredBorderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the border of the layer element when it is hovered over."
            },
            "hoveredBorderWidth": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the pixel-measured line width (for layers of a line type) or width for the border of the layer element when it is hovered over."
            },
            "hoveredColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for a layer element when it is hovered over."
            },
            "hoverEnabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to change the appearance of a layer element when it is hovered over."
            },
            "label": {
              "Description": "Specifies marker label options.",
              "Options": {
                "dataField": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "The name of the data source attribute containing marker texts."
                },
                "enabled": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Enables marker labels."
                },
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for marker labels."
                }
              }
            },
            "maxSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the pixel-measured diameter of the marker that represents the biggest value. Setting this option makes sense only if the layer type is \"marker\"."
            },
            "minSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the pixel-measured diameter of the marker that represents the smallest value. Setting this option makes sense only if the layer type is \"marker\"."
            },
            "name": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the layer name."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the layer opacity (from 0 to 1)."
            },
            "palette": {
              "PrimitiveTypes": [
                "string"
              ],
              "ItemPrimitiveTypes": [
                "string"
              ],
              "IsCollection": true,
              "SingularName": "palette",
              "Description": "Specifies the name of the palette or a custom range of colors to be used for coloring a layer."
            },
            "paletteSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the number of colors in a palette."
            },
            "selectedBorderColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the border of the layer element when it is selected."
            },
            "selectedBorderWidth": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a pixel-measured line width (for layers of a line type) or width for the border of the layer element when it is selected."
            },
            "selectedColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the layer element when it is selected."
            },
            "selectionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether single or multiple map elements can be selected on a vector map."
            },
            "size": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the size of markers. Setting this option makes sense only if the layer type is \"marker\" and the elementType is \"dot\", \"pie\" or \"image\"."
            },
            "sizeGroupingField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the field that provides data to be used for sizing bubble markers. Setting this option makes sense only if the layer type is \"marker\" and the elementType is \"bubble\"."
            },
            "sizeGroups": {
              "ItemPrimitiveTypes": [
                "number"
              ],
              "IsCollection": true,
              "SingularName": "sizeGroup",
              "Description": "Allows you to display bubbles with similar attributes in the same size. Setting this option makes sense only if the layer type is \"marker\" and the elementType is \"bubble\"."
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies layer type."
            }
          }
        },
        "legends": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "legend",
          "Description": "Configures map legends.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the legend's background."
            },
            "border": {
              "Description": "Specifies legend border settings.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of the legend border."
                },
                "cornerRadius": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies a radius for the corners of the legend border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of the legend border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of the legend border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether the legend border is visible or not."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the legend border in pixels."
                }
              }
            },
            "columnCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many columns must be taken to arrange legend items."
            },
            "columnItemSpacing": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the spacing between a pair of neighboring legend columns in pixels."
            },
            "customizeHint": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies text for a hint that appears when a user hovers the mouse pointer over the text of a legend item."
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies text for legend items."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for legend items."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the legend's position on the map."
            },
            "itemsAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the alignment of legend items."
            },
            "itemTextPosition": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the position of text relative to the item marker."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the distance between the legend and the container borders in pixels.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's bottom margin in pixels."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's left margin in pixels."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's right margin in pixels."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the legend's top margin in pixels."
                }
              }
            },
            "markerColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of item markers in the legend. The specified color applied only when the legend uses 'size' source."
            },
            "markerShape": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the shape of item markers."
            },
            "markerSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the size of item markers in the legend in pixels."
            },
            "orientation": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether to arrange legend items horizontally or vertically."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the spacing between the legend left/right border and legend items in pixels."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the spacing between the legend top/bottom border and legend items in pixels."
            },
            "rowCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many rows must be taken to arrange legend items."
            },
            "rowItemSpacing": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the spacing between a pair of neighboring legend rows in pixels."
            },
            "source": {
              "Description": "Specifies the source of data for the legend.",
              "Options": {
                "grouping": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the type of the legend grouping."
                },
                "layer": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a layer to which the legend belongs."
                }
              }
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the legend's position on the map."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not the legend is visible on the map."
            }
          }
        },
        "loadingIndicator": {
          "Description": "Configures the loading indicator.",
          "Options": {
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the background of the loading indicator."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the loading indicator."
            },
            "show": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether to show the loading indicator or not."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the text to be displayed by the loading indicator."
            }
          }
        },
        "maxZoomFactor": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a map's maximum zoom factor."
        },
        "onCenterChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the center coordinates are changed."
        },
        "onClick": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when any location on the map is clicked or tapped."
        },
        "onDisposing": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is disposed of."
        },
        "onDrawn": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when the widget's rendering has finished."
        },
        "onExported": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after the widget is exported."
        },
        "onExporting": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before the widget is exported."
        },
        "onFileSaving": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed before a file with exported widget is saved to the user's local storage."
        },
        "onIncidentOccurred": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when an error or warning occurs."
        },
        "onInitialized": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed only once, after the widget is initialized."
        },
        "onOptionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed after a widget option is changed."
        },
        "onSelectionChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a layer element is selected or the selection is canceled."
        },
        "onTooltipHidden": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip becomes hidden."
        },
        "onTooltipShown": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed when a tooltip appears."
        },
        "onZoomFactorChanged": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "IsEvent": true,
          "Description": "A function that is executed each time the zoom factor is changed."
        },
        "panningEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Disables the panning capability."
        },
        "pathModified": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path."
        },
        "projection": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies the map projection."
        },
        "redrawOnResize": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates."
        },
        "rtlEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Switches the widget to a right-to-left representation."
        },
        "size": {
          "Description": "Specifies the widget's size in pixels.",
          "Options": {
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the widget in pixels."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the widget in pixels."
            }
          }
        },
        "theme": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the name of the theme the widget uses."
        },
        "title": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Configures the widget's title.",
          "Options": {
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the title."
            },
            "horizontalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a horizontal direction."
            },
            "margin": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates space around the title.",
              "Options": {
                "bottom": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the bottom margin of the title."
                },
                "left": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the left margin of the title."
                },
                "right": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the right margin of the title."
                },
                "top": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the top margin of the title."
                }
              }
            },
            "placeholderSize": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the minimum height that the title occupies."
            },
            "subtitle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Configures the widget's subtitle.",
              "Options": {
                "font": {
                  "PrimitiveTypes": [
                    "DevExpress.viz.Font"
                  ],
                  "ComplexTypes": [
                    "VizFont"
                  ],
                  "Description": "Specifies font options for the subtitle."
                },
                "text": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies text for the subtitle."
                }
              }
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's text."
            },
            "verticalAlignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the title's alignment in a vertical direction."
            }
          }
        },
        "tooltip": {
          "Description": "Configures tooltips.",
          "Options": {
            "arrowLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of a tooltip's arrow in pixels."
            },
            "border": {
              "Description": "Configures a tooltip's border.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of a tooltip's border."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Specifies whether a tooltip's border is visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of a tooltip's border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors all tooltips."
            },
            "container": {
              "PrimitiveTypes": [
                "Element",
                "JQuery"
              ],
              "Description": "Specifies the container in which to draw tooltips. The default container is the HTML DOM `` element."
            },
            "customizeTooltip": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies text and appearance of a set of tooltips."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables tooltips."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies tooltips' font options."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies tooltips' transparency."
            },
            "paddingLeftRight": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's left/right border and its text."
            },
            "paddingTopBottom": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Generates an empty space, measured in pixels, between a tooltip's top/bottom border and its text."
            },
            "shadow": {
              "Description": "Configures a tooltip's shadow.",
              "Options": {
                "blur": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the blur distance of a tooltip's shadow. The larger the value, the blurrier the shadow's edge."
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors a tooltip's shadow."
                },
                "offsetX": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the horizontal offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "offsetY": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the vertical offset of a tooltip's shadow relative to the tooltip itself. Measured in pixels."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the transparency of a tooltip's shadow."
                }
              }
            },
            "zIndex": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a tooltip's z-index."
            }
          }
        },
        "touchEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the map should respond to touch gestures."
        },
        "wheelEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the map should respond when a user rolls the mouse wheel."
        },
        "zoomFactor": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a number that is used to zoom a map initially."
        },
        "zoomingEnabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Disables the zooming capability."
        }
      }
    }
  },
  "ExtraObjects": {
    "AnimationConfig": {
      "Description": "Defines animation options.",
      "Options": {
        "complete": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "A function called after animation is completed."
        },
        "delay": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "A number specifying wait time before animation execution."
        },
        "direction": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the animation direction for the \"slideIn\" and \"slideOut\" animation types."
        },
        "duration": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "A number specifying the time in milliseconds spent on animation."
        },
        "easing": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A string specifying the easing function for animation."
        },
        "from": {
          "PrimitiveTypes": [
            "any",
            "number",
            "string"
          ],
          "Description": "Specifies the initial animation state."
        },
        "staggerDelay": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "A number specifying the time period to wait before the animation of the next stagger item starts."
        },
        "start": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "A function called before animation is started."
        },
        "to": {
          "PrimitiveTypes": [
            "any",
            "number",
            "string"
          ],
          "Description": "Specifies a final animation state."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "A string value specifying the animation type."
        }
      }
    },
    "ChartCommonSeriesSettings": {
      "Description": "Specifies settings common for all series in the chart.",
      "Options": {
        "aggregation": {
          "Description": "Configures data aggregation for the series.",
          "Options": {
            "calculate": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a custom aggregate function. Applies only if the aggregation method is \"custom\"."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables data aggregation for the series."
            },
            "method": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies how to aggregate series points."
            }
          }
        },
        "area": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all area series."
        },
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides arguments for series points."
        },
        "axis": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Binds the series to a value axis."
        },
        "bar": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all bar series."
        },
        "barPadding": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Controls the padding and consequently the width of all bars in a series using relative units. Ignored if the barWidth option is set."
        },
        "barWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a fixed width for all bars in a series, measured in pixels. Takes precedence over the barPadding option."
        },
        "border": {
          "Description": "Configures the series border (in area-like series) or the series point border (in bar-like and bubble series).",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series)."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series)."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series)."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series)."
            }
          }
        },
        "bubble": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all bubble series."
        },
        "candlestick": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all candlestick series."
        },
        "closeValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides close values for points of a financial series."
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the series."
        },
        "cornerRadius": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Makes bars look rounded. Applies only to bar-like series."
        },
        "dashStyle": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the dash style of the series line. Applies only to line-like series."
        },
        "fullstackedarea": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all full-stacked area series."
        },
        "fullstackedbar": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all full-stacked bar series."
        },
        "fullstackedline": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all full-stacked line series."
        },
        "fullstackedspline": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all full-stacked spline series."
        },
        "fullstackedsplinearea": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all full-stacked spline area series."
        },
        "highValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides high values for points of a financial series."
        },
        "hoverMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies series elements to be highlighted when a user points to a series."
        },
        "hoverStyle": {
          "Description": "Configures the appearance adopted by the series when a user points to it.",
          "Options": {
            "border": {
              "Description": "Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user points to the series."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user points to the series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the series in the hovered state."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the dash style of the series line when the series is in the hovered state. Applies only to line-like series."
            },
            "hatching": {
              "Description": "Configures hatching that applies when a user points to the series.",
              "Options": {
                "direction": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the direction of hatching lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent hatching lines should be."
                },
                "step": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the distance between two side-by-side hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the pixel-measured width of the series line when the series is in the hovered state."
            }
          }
        },
        "ignoreEmptyPoints": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the series should ignore null data points."
        },
        "innerColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a filling color for the body of a series point that visualizes a non-reduced value. Applies only to candlestick series."
        },
        "label": {
          "Description": "Configures point labels.",
          "Options": {
            "alignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Aligns point labels in relation to their points."
            },
            "argumentFormat": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats the point argument before it is displayed in the point label. To format the point value, use the format option."
            },
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the point labels' background. The default color is inherited from the points."
            },
            "border": {
              "Description": "Configures the borders of point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of the border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes the border visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the border in pixels."
                }
              }
            },
            "connector": {
              "Description": "Configures the label connectors.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes the connectors visible. Applies only if label.visible is set to true."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the connectors in pixels."
                }
              }
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Customizes the text displayed by point labels."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for point labels."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats the point value before it will be displayed in the point label."
            },
            "horizontalOffset": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Along with verticalOffset, shifts point labels from their initial positions."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether to display point labels inside or outside of series points. Applies only to bubble, range-like and bar-like series."
            },
            "rotationAngle": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Rotates point labels."
            },
            "showForZeroValues": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to show labels for points with zero value. Applies only to bar-like series."
            },
            "verticalOffset": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Along with horizontalOffset, shifts point labels from their initial positions."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Makes the point labels visible."
            }
          }
        },
        "line": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all line series."
        },
        "lowValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides low values for points of a financial series."
        },
        "maxLabelCount": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a limit for the number of point labels."
        },
        "minBarSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the minimal possible height (or length if the chart is rotated) of a bar in pixels. Applies only to bar-like series."
        },
        "opacity": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies how transparent the series should be."
        },
        "openValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides open values for points of a financial series."
        },
        "pane": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which pane the series should belong to. Accepts the name of the pane."
        },
        "point": {
          "Description": "Configures series points in scatter, line- and area-like series.",
          "Options": {
            "border": {
              "Description": "Configures the appearance of the series point border in scatter, line- and area-like series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes the border visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets the width of the border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the series points."
            },
            "hoverMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies series elements to be highlighted when a user pauses on a series point."
            },
            "hoverStyle": {
              "Description": "Configures the appearance adopted by a series point when a user pauses on it.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance of the point border when a user pauses on the point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the color of the point border when the point is in the hovered state."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Makes the border visible when a user pauses on the series point."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width of the point border when the point is in the hovered state."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of series points in the hovered state."
                },
                "size": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specfies the diameter of series points in the hovered state."
                }
              }
            },
            "image": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Substitutes the standard point symbols with an image.",
              "Options": {
                "height": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the height of the image used instead of a point marker.",
                  "Options": {
                    "rangeMaxPoint": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the height of the image that represents the maximum point in a range area series."
                    },
                    "rangeMinPoint": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the height of the image that represents the minimum point in a range area series."
                    }
                  }
                },
                "url": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the URL of the image to be used as a point marker.",
                  "Options": {
                    "rangeMaxPoint": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the URL of the image to be used as a maximum point marker."
                    },
                    "rangeMinPoint": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the URL of the image to be used as a maximum point marker."
                    }
                  }
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of an image that is used as a point marker.",
                  "Options": {
                    "rangeMaxPoint": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width of the image that represents the maximum point in a range area series."
                    },
                    "rangeMinPoint": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width of the image that represents the minimum point in a range area series."
                    }
                  }
                }
              }
            },
            "selectionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies series elements to be highlighted when a user selects a series point."
            },
            "selectionStyle": {
              "Description": "Configures the appearance of a selected series point.",
              "Options": {
                "border": {
                  "Description": "Configures the border of a selected point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the color of the point border when the point is selected."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Makes the border of a selected point visible."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width of the point border when the point is selected."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of series points in the selected state."
                },
                "size": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specfies the diameter of series points in the selected state."
                }
              }
            },
            "size": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the diameter of series points in pixels."
            },
            "symbol": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies which symbol should represent series points in scatter, line- and area-like series."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Makes the series points visible."
            }
          }
        },
        "rangearea": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all range area series."
        },
        "rangebar": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all range bar series."
        },
        "rangeValue1Field": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Coupled with the rangeValue2Field option, specifies which data source field provides values for a range-like series."
        },
        "rangeValue2Field": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Coupled with the rangeValue1Field option, specifies which data source field provides values for a range-like series."
        },
        "reduction": {
          "Description": "Specifies reduction options for financial series.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the points whose price has decreased in comparison to the price of the previous point."
            },
            "level": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether high, low, open or close prices of points should be compared."
            }
          }
        },
        "scatter": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all scatter series."
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies series elements to be highlighted when a user selects a series."
        },
        "selectionStyle": {
          "Description": "Configures the appearance adopted by the series when a user selects it.",
          "Options": {
            "border": {
              "Description": "Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user selects the series."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user selects the series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the series in the selected state."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the dash style of the series line when the series is in the selected state. Applies only to line-like series."
            },
            "hatching": {
              "Description": "Configures hatching that applies when a user selects the series.",
              "Options": {
                "direction": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the direction of hatching lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent hatching lines should be."
                },
                "step": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the distance between two side-by-side hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the pixel-measured width of the series line when the series is in the selected state."
            }
          }
        },
        "showInLegend": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to show the series in the legend or not."
        },
        "sizeField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides size values for bubbles. Required by and applies only to bubble series."
        },
        "spline": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all spline series."
        },
        "splinearea": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all spline area series."
        },
        "stack": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which stack the series should belongs to. Applies only to stacked bar and full-stacked bar series."
        },
        "stackedarea": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all stacked area series."
        },
        "stackedbar": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all stacked bar series."
        },
        "stackedline": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all stacked line series."
        },
        "stackedspline": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all stacked spline series."
        },
        "stackedsplinearea": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all stacked spline area series."
        },
        "steparea": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all step area series."
        },
        "stepline": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all step line series."
        },
        "stock": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "ChartCommonSeriesSettings"
          ],
          "Description": "Defines common settings for all stock series."
        },
        "tagField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides auxiliary data for series points."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the type of the series."
        },
        "valueErrorBar": {
          "Description": "Configures error bars.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of error bars."
            },
            "displayMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether error bars must be displayed in full or partially."
            },
            "edgeLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of the lines that indicate the error bar edges."
            },
            "highValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies which data field provides high error values."
            },
            "lineWidth": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the error bar line."
            },
            "lowValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies which data field provides low error values."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how trasparent error bars should be."
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies how error bar values must be calculated."
            },
            "value": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the value to be used for generating error bars."
            }
          }
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides values for series points."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the series is visible or not."
        },
        "width": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the width of the series line in pixels. Applies only to line-like series."
        }
      }
    },
    "ChartSeries": {
      "Description": "Specifies options for Chart widget series.",
      "IsCollection": true,
      "Options": {
        "aggregation": {
          "Description": "Configures data aggregation for the series.",
          "Options": {
            "calculate": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a custom aggregate function. Applies only if the aggregation method is \"custom\"."
            },
            "enabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Enables data aggregation for the series."
            },
            "method": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies how to aggregate series points."
            }
          }
        },
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides arguments for series points."
        },
        "axis": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Binds the series to a value axis."
        },
        "barPadding": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Controls the padding and consequently the width of all bars in a series using relative units. Ignored if the barWidth option is set."
        },
        "barWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a fixed width for all bars in a series, measured in pixels. Takes precedence over the barPadding option."
        },
        "border": {
          "Description": "Configures the series border (in area-like series) or the series point border (in bar-like and bubble series).",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series)."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series)."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series)."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series)."
            }
          }
        },
        "closeValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides close values for points of a financial series."
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the color of the series."
        },
        "cornerRadius": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Makes bars look rounded. Applies only to bar-like series."
        },
        "dashStyle": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the dash style of the series line. Applies only to line-like series."
        },
        "highValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides high values for points of a financial series."
        },
        "hoverMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies series elements to be highlighted when a user points to a series."
        },
        "hoverStyle": {
          "Description": "Configures the appearance adopted by the series when a user points to it.",
          "Options": {
            "border": {
              "Description": "Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user points to the series."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user points to the series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user points to the series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the series in the hovered state."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the dash style of the series line when the series is in the hovered state. Applies only to line-like series."
            },
            "hatching": {
              "Description": "Configures hatching that applies when a user points to the series.",
              "Options": {
                "direction": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the direction of hatching lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent hatching lines should be."
                },
                "step": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the distance between two side-by-side hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the pixel-measured width of the series line when the series is in the hovered state."
            }
          }
        },
        "ignoreEmptyPoints": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the series should ignore null data points."
        },
        "innerColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a filling color for the body of a series point that visualizes a non-reduced value. Applies only to candlestick series."
        },
        "label": {
          "Description": "Configures point labels.",
          "Options": {
            "alignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Aligns point labels in relation to their points."
            },
            "argumentFormat": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats the point argument before it is displayed in the point label. To format the point value, use the format option."
            },
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the point labels' background. The default color is inherited from the points."
            },
            "border": {
              "Description": "Configures the borders of point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the border."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the dash style of the border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes the border visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the border in pixels."
                }
              }
            },
            "connector": {
              "Description": "Configures the label connectors.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes the connectors visible. Applies only if label.visible is set to true."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of the connectors in pixels."
                }
              }
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Customizes the text displayed by point labels."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for point labels."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats the point value before it will be displayed in the point label."
            },
            "horizontalOffset": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Along with verticalOffset, shifts point labels from their initial positions."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether to display point labels inside or outside of series points. Applies only to bubble, range-like and bar-like series."
            },
            "rotationAngle": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Rotates point labels."
            },
            "showForZeroValues": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to show labels for points with zero value. Applies only to bar-like series."
            },
            "verticalOffset": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Along with horizontalOffset, shifts point labels from their initial positions."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Makes the point labels visible."
            }
          }
        },
        "lowValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides low values for points of a financial series."
        },
        "maxLabelCount": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a limit for the number of point labels."
        },
        "minBarSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the minimal possible height (or length if the chart is rotated) of a bar in pixels. Applies only to bar-like series."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name that identifies the series."
        },
        "opacity": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies how transparent the series should be."
        },
        "openValueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides open values for points of a financial series."
        },
        "pane": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which pane the series should belong to. Accepts the name of the pane."
        },
        "point": {
          "Description": "Configures series points in scatter, line- and area-like series.",
          "Options": {
            "border": {
              "Description": "Configures the appearance of the series point border in scatter, line- and area-like series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the border."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Makes the border visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets the width of the border in pixels."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the series points."
            },
            "hoverMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies series elements to be highlighted when a user pauses on a series point."
            },
            "hoverStyle": {
              "Description": "Configures the appearance adopted by a series point when a user pauses on it.",
              "Options": {
                "border": {
                  "Description": "Configures the appearance of the point border when a user pauses on the point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the color of the point border when the point is in the hovered state."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Makes the border visible when a user pauses on the series point."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width of the point border when the point is in the hovered state."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of series points in the hovered state."
                },
                "size": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specfies the diameter of series points in the hovered state."
                }
              }
            },
            "image": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Substitutes the standard point symbols with an image.",
              "Options": {
                "height": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the height of the image used instead of a point marker.",
                  "Options": {
                    "rangeMaxPoint": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the height of the image that represents the maximum point in a range area series."
                    },
                    "rangeMinPoint": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the height of the image that represents the minimum point in a range area series."
                    }
                  }
                },
                "url": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the URL of the image to be used as a point marker.",
                  "Options": {
                    "rangeMaxPoint": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the URL of the image to be used as a maximum point marker."
                    },
                    "rangeMinPoint": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the URL of the image to be used as a maximum point marker."
                    }
                  }
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of an image that is used as a point marker.",
                  "Options": {
                    "rangeMaxPoint": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width of the image that represents the maximum point in a range area series."
                    },
                    "rangeMinPoint": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width of the image that represents the minimum point in a range area series."
                    }
                  }
                }
              }
            },
            "selectionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies series elements to be highlighted when a user selects a series point."
            },
            "selectionStyle": {
              "Description": "Configures the appearance of a selected series point.",
              "Options": {
                "border": {
                  "Description": "Configures the border of a selected point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Specifies the color of the point border when the point is selected."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Makes the border of a selected point visible."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Specifies the width of the point border when the point is selected."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of series points in the selected state."
                },
                "size": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specfies the diameter of series points in the selected state."
                }
              }
            },
            "size": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the diameter of series points in pixels."
            },
            "symbol": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies which symbol should represent series points in scatter, line- and area-like series."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Makes the series points visible."
            }
          }
        },
        "rangeValue1Field": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Coupled with the rangeValue2Field option, specifies which data source field provides values for a range-like series."
        },
        "rangeValue2Field": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Coupled with the rangeValue1Field option, specifies which data source field provides values for a range-like series."
        },
        "reduction": {
          "Description": "Specifies reduction options for financial series.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a color for the points whose price has decreased in comparison to the price of the previous point."
            },
            "level": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether high, low, open or close prices of points should be compared."
            }
          }
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies series elements to be highlighted when a user selects a series."
        },
        "selectionStyle": {
          "Description": "Configures the appearance adopted by the series when a user selects it.",
          "Options": {
            "border": {
              "Description": "Configures the appearance adopted by the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Colors the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a dash style for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user selects the series."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Shows the series border (in area-like series) or the series point border (in bar-like and bubble series) when a user selects the series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a pixel-measured width for the series border (in area-like series) or for the series point border (in bar-like and bubble series) when a user selects the series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of the series in the selected state."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the dash style of the series line when the series is in the selected state. Applies only to line-like series."
            },
            "hatching": {
              "Description": "Configures hatching that applies when a user selects the series.",
              "Options": {
                "direction": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the direction of hatching lines."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies how transparent hatching lines should be."
                },
                "step": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the distance between two side-by-side hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the pixel-measured width of the series line when the series is in the selected state."
            }
          }
        },
        "showInLegend": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether to show the series in the legend or not."
        },
        "sizeField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides size values for bubbles. Required by and applies only to bubble series."
        },
        "stack": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which stack the series should belongs to. Applies only to stacked bar and full-stacked bar series."
        },
        "tag": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies data about a series."
        },
        "tagField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides auxiliary data for series points."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the series type."
        },
        "valueErrorBar": {
          "Description": "Configures error bars.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of error bars."
            },
            "displayMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether error bars must be displayed in full or partially."
            },
            "edgeLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of the lines that indicate the error bar edges."
            },
            "highValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies which data field provides high error values."
            },
            "lineWidth": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the error bar line."
            },
            "lowValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies which data field provides low error values."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how trasparent error bars should be."
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies how error bar values must be calculated."
            },
            "value": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the value to be used for generating error bars."
            }
          }
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which data source field provides values for series points."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the series is visible or not."
        },
        "width": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the width of the series line in pixels. Applies only to line-like series."
        }
      }
    },
    "CompareRule": {
      "Description": "A validation rule that demands that a validated editor has a value that is equal to a specified expression.",
      "IsCollection": true,
      "Options": {
        "comparisonTarget": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies the function whose return value is used for comparison with the validated value."
        },
        "comparisonType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the operator to be used for comparing the validated value with the target."
        },
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "reevaluate": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Indicates whether or not the rule should be always checked for the target value or only when the target value changes."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "CustomRule": {
      "Description": "A validation rule with custom validation logic.",
      "IsCollection": true,
      "Options": {
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "reevaluate": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Indicates whether the rule should be always checked for the target value or only when the target value changes."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the type of the current rule."
        },
        "validationCallback": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "A function that validates the target value."
        }
      }
    },
    "ContextMenuItem": {
      "Description": "This section lists the data source fields that are used in a default item template.",
      "Options": {
        "beginGroup": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a group separator is displayed over the item."
        },
        "closeMenuOnClick": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies if a menu is closed when a user clicks the item."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the menu item is disabled."
        },
        "icon": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The name of an icon to be displayed on the menu item."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxContextMenuItemTemplate"
          ],
          "ItemComplexTypes": [
            "ContextMenuItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "Holds an array of menu items."
        },
        "selectable": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not a user can select a menu item."
        },
        "selected": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the item is selected."
        },
        "template": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies an item template that should be used to render this item only."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text inserted into the item element."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the menu item is visible."
        }
      }
    },
    "DataGridColumn": {
      "Options": {
        "alignment": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Aligns the content of the column."
        },
        "allowEditing": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can edit values in the column at runtime. By default, inherits the value of the editing.allowUpdating option."
        },
        "allowExporting": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether data from this column should be exported."
        },
        "allowFiltering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether data can be filtered by this column. Applies only if filterRow.visible is true."
        },
        "allowFixing": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can fix the column at runtime. Applies only if columnFixing.enabled is true."
        },
        "allowGrouping": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the user can group data by values of this column. Applies only when grouping is enabled."
        },
        "allowHeaderFiltering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the header filter can be used to filter data by this column. Applies only if headerFilter.visible is true. By default, inherits the value of the allowFiltering option."
        },
        "allowHiding": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can hide the column using the column chooser at runtime. Applies only if columnChooser.enabled is true."
        },
        "allowReordering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether this column can be used in column reordering at runtime. Applies only if allowColumnReordering is true."
        },
        "allowResizing": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can resize the column at runtime. Applies only if allowColumnResizing is true."
        },
        "allowSearch": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether this column can be searched. Applies only if searchPanel.visible is true. Inherits the value of the allowFiltering option by default."
        },
        "allowSorting": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can sort rows by this column at runtime. Applies only if sorting.mode differs from \"none\"."
        },
        "autoExpandGroup": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether groups appear expanded or not when records are grouped by a specific column. Setting this option makes sense only when grouping is allowed for this column."
        },
        "calculateCellValue": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Calculates custom values for column cells."
        },
        "calculateDisplayValue": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Calculates custom display values for column cells. Used when display and editing values should be different. Requires specifying the dataField or calculateCellValue option."
        },
        "calculateFilterExpression": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies the column's custom filtering rules."
        },
        "calculateGroupValue": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Specifies a field name or a function that returns a field name or a value to be used for grouping column cells."
        },
        "calculateSortValue": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Calculates custom values to be used in sorting."
        },
        "caption": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a caption for the column."
        },
        "cellTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for column cells."
        },
        "columns": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxDataGridColumn"
          ],
          "ItemComplexTypes": [
            "DataGridColumn"
          ],
          "IsCollection": true,
          "SingularName": "column",
          "Description": "An array of grid columns."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the column."
        },
        "customizeText": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Customizes the text displayed in column cells."
        },
        "dataField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Binds the column to a field of the dataSource."
        },
        "dataType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Casts column values to a specific data type."
        },
        "editCellTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for column cells in the editing state."
        },
        "editorOptions": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies options for the underlain editor."
        },
        "encodeHtml": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether HTML tags are displayed as plain text or applied to the values of the column."
        },
        "falseText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "In a boolean column, replaces all false items with a specified text. Applies only if showEditorAlways option is false."
        },
        "filterOperations": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "filterOperation",
          "Description": "Specifies a set of available filter operations. Applies only if filterRow.visible and allowFiltering are true."
        },
        "filterType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether a user changes the current filter by including (selecting) or excluding (clearing the selection of) values. Applies only if headerFilter.visible and allowHeaderFiltering are true."
        },
        "filterValue": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "Specifies the column's filter value displayed in the filter row."
        },
        "filterValues": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "filterValue",
          "Description": "Specifies values selected in the column's header filter."
        },
        "fixed": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Fixes the column."
        },
        "fixedPosition": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget's edge to which the column is fixed. Applies only if columns].[fixed is true."
        },
        "format": {
          "PrimitiveTypes": [
            "DevExpress.ui.format",
            "string"
          ],
          "ComplexTypes": [
            "Format"
          ],
          "Description": "Formats a value before it is displayed in a column cell."
        },
        "formItem": {
          "PrimitiveTypes": [
            "DevExpress.ui.dxFormSimpleItem"
          ],
          "ComplexTypes": [
            "FormSimpleItem"
          ],
          "Description": "Configures the form item that the column produces in the editing state. Applies only if editing.mode is \"form\" or \"popup\"."
        },
        "groupCellTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for group cells."
        },
        "groupIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "Specifies the index of a column when grid records are grouped by the values of this column."
        },
        "headerCellTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for column headers."
        },
        "headerFilter": {
          "Description": "Specifies data settings for the header filter.",
          "Options": {
            "allowSearch": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether searching is enabled in the header filter."
            },
            "dataSource": {
              "PrimitiveTypes": [
                "DevExpress.data.DataSourceOptions",
                "Function"
              ],
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsFunc": true,
              "IsDataSource": true,
              "Description": "Specifies a data source for the header filter."
            },
            "groupInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies how the header filter combines values into groups."
            },
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the popup menu containing filtering values."
            },
            "searchMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a comparison operation used to search header filter values."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the popup menu containing filtering values."
            }
          }
        },
        "hidingPriority": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the order in which columns are hidden when the widget adapts to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is \"widget\"."
        },
        "isBand": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the column bands other columns or not."
        },
        "lookup": {
          "Description": "Specifies options of a lookup column.",
          "Options": {
            "allowClearing": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can nullify values of the lookup column."
            },
            "dataSource": {
              "PrimitiveTypes": [
                "DevExpress.data.DataSourceOptions",
                "DevExpress.data.Store",
                "Function"
              ],
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsFunc": true,
              "IsDataSource": true,
              "Description": "Specifies the data source for the lookup column."
            },
            "displayExpr": {
              "PrimitiveTypes": [
                "Function",
                "string"
              ],
              "IsFunc": true,
              "Description": "Specifies the data source field whose values must be displayed."
            },
            "valueExpr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data source field whose values must be replaced."
            }
          }
        },
        "minWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the minimum width of the column."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the identifier of the column."
        },
        "ownerBand": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the band column that owns the current column. Accepts the index of the band column in the columns array."
        },
        "renderAsync": {
          "PrimitiveTypes": [
            "boolean"
          ]
        },
        "selectedFilterOperation": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsChangeable": true,
          "Description": "Specifies the column's filter operation displayed in the filter row."
        },
        "setCellValue": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies a function to be invoked after the user has edited a cell value, but before it will be saved in the data source."
        },
        "showEditorAlways": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the column displays its values using editors."
        },
        "showInColumnChooser": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the column chooser can contain the column header."
        },
        "showWhenGrouped": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to display the column when grid records are grouped by it."
        },
        "sortIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "Specifies the index according to which columns participate in sorting."
        },
        "sortingMethod": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies a custom comparison function for sorting. Applies only when sorting is performed on the client."
        },
        "sortOrder": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsChangeable": true,
          "Description": "Specifies the sort order of column values."
        },
        "trueText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "In a boolean column, replaces all true items with a specified text. Applies only if showEditorAlways option is false."
        },
        "validationRules": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.RequiredRule",
            "DevExpress.ui.NumericRule",
            "DevExpress.ui.RangeRule",
            "DevExpress.ui.StringLengthRule",
            "DevExpress.ui.CustomRule",
            "DevExpress.ui.CompareRule",
            "DevExpress.ui.PatternRule",
            "DevExpress.ui.EmailRule"
          ],
          "ItemComplexTypes": [
            "RequiredRule",
            "NumericRule",
            "RangeRule",
            "StringLengthRule",
            "CustomRule",
            "CompareRule",
            "PatternRule",
            "EmailRule"
          ],
          "IsCollection": true,
          "SingularName": "validationRule",
          "Description": "Specifies validation rules to be checked on updating cell values."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "Specifies whether the column is visible, that is, occupies space in the table."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "Specifies the position of the column regarding other columns in the resulting widget."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the column's width in pixels or as a percentage. Ignored if it is less than minWidth."
        }
      }
    },
    "FilterBuilderCustomOperation": {
      "Options": {
        "calculateFilterExpression": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies a function that returns a filter expression for this custom operation."
        },
        "caption": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the operation's caption."
        },
        "customizeText": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Customizes the field value's text representation."
        },
        "dataTypes": {
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "dataType",
          "Description": "Specifies for which data types the operation is available by default."
        },
        "editorTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for the widget used to edit the field value."
        },
        "hasValue": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the operation can have a value. If it can, the editor is displayed."
        },
        "icon": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies an icon that represents the operation. Accepts the name of an icon from the built-in icon library, a path to an image, or the CSS class of an icon stored in an external icon library."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the operation's identifier."
        }
      }
    },
    "FilterBuilderField": {
      "Description": "The FilterBuilder's field structure.",
      "Options": {
        "calculateFilterExpression": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies the field's custom filtering rules."
        },
        "caption": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data field's caption."
        },
        "customizeText": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Customizes the input value's display text."
        },
        "dataField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of a field to be filtered."
        },
        "dataType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Casts field values to a specific data type."
        },
        "editorOptions": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Configures the widget used to edit the field value."
        },
        "editorTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies the editor's custom template."
        },
        "falseText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the false value text. Applies only if dataType is \"boolean\"."
        },
        "filterOperations": {
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "filterOperation",
          "Description": "Specifies a set of available filter operations."
        },
        "format": {
          "PrimitiveTypes": [
            "DevExpress.ui.format",
            "string"
          ],
          "ComplexTypes": [
            "Format"
          ],
          "Description": "Formats a value before it is displayed."
        },
        "lookup": {
          "Description": "Configures the lookup field.",
          "Options": {
            "allowClearing": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can nullify the lookup values. Set to true only if your data source accepts null values."
            },
            "dataSource": {
              "PrimitiveTypes": [
                "DevExpress.data.DataSourceOptions"
              ],
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsDataSource": true,
              "Description": "Specifies the lookup data source."
            },
            "displayExpr": {
              "PrimitiveTypes": [
                "Function",
                "string"
              ],
              "IsFunc": true,
              "Description": "Specifies the data source field whose values are displayed."
            },
            "valueExpr": {
              "PrimitiveTypes": [
                "Function",
                "string"
              ],
              "IsFunc": true,
              "Description": "Specifies the data source field whose values should be replaced."
            }
          }
        },
        "trueText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the true value text. Applies only if dataType is \"boolean\"."
        }
      }
    },
    "FormButtonItem": {
      "Description": "Configures a button form item.",
      "Options": {
        "alignment": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsDeprecated": true,
          "Description": "Use horizontalAlignment instead."
        },
        "buttonOptions": {
          "PrimitiveTypes": [
            "DevExpress.ui.dxButtonOptions"
          ],
          "ComplexTypes": [
            "dxButtonOptions"
          ],
          "Description": "Configures the button."
        },
        "colSpan": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies how many columns the item spans."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the item."
        },
        "horizontalAlignment": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the button's horizontal alignment."
        },
        "itemType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the item's type. Set it to \"button\" to create a button item."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the item's identifier."
        },
        "verticalAlignment": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the button's vertical alignment."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the item is visible."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the item's position regarding other items in a group, tab, or the whole widget."
        }
      }
    },
    "FormEmptyItem": {
      "Description": "This article describes configuration options of an empty form item.",
      "Options": {
        "colSpan": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of columns spanned by the item."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the form item."
        },
        "itemType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the item's type. Set it to \"empty\" to create an empty item."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a name that identifies the form item."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the current form item is visible."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the sequence number of the item in a form, group or tab."
        }
      }
    },
    "FormGroupItem": {
      "Description": "This article describes configuration options of a group form item.",
      "Options": {
        "alignItemLabels": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not all group item labels are aligned."
        },
        "caption": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the group caption."
        },
        "colCount": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "The count of columns in the group layout."
        },
        "colCountByScreen": {
          "Description": "Specifies dependency between the screen factor and the count of columns in the group layout.",
          "Options": {
            "lg": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The count of columns for a large screen size."
            },
            "md": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The count of columns for a middle-sized screen."
            },
            "sm": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The count of columns for a small-sized screen."
            },
            "xs": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The count of columns for an extra small-sized screen."
            }
          }
        },
        "colSpan": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of columns spanned by the item."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the form item."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxFormSimpleItem",
            "DevExpress.ui.dxFormGroupItem",
            "DevExpress.ui.dxFormTabbedItem",
            "DevExpress.ui.dxFormEmptyItem",
            "DevExpress.ui.dxFormButtonItem"
          ],
          "ItemComplexTypes": [
            "FormSimpleItem",
            "FormGroupItem",
            "FormTabbedItem",
            "FormEmptyItem",
            "FormButtonItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "Holds an array of form items displayed within the group."
        },
        "itemType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the item's type. Set it to \"group\" to create a group item."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a name that identifies the form item."
        },
        "template": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "A template to be used for rendering a group item."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the current form item is visible."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the sequence number of the item in a form, group or tab."
        }
      }
    },
    "FormSimpleItem": {
      "Description": "This article describes configuration options of a simple form item.",
      "Options": {
        "colSpan": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of columns spanned by the item."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the form item."
        },
        "dataField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the path to the formData object field bound to the current form item."
        },
        "editorOptions": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies configuration options for the editor widget of the current form item."
        },
        "editorType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies which editor widget is used to display and edit the form item value."
        },
        "helpText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the help text displayed for the current form item."
        },
        "isRequired": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the current form item is required."
        },
        "itemType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the item's type. Set it to \"simple\" to create a simple item."
        },
        "label": {
          "Description": "Specifies options for the form item label.",
          "Options": {
            "alignment": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the label's horizontal alignment."
            },
            "location": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the location of a label against the editor."
            },
            "showColon": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not a colon is displayed at the end of the current label."
            },
            "text": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the label text."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not the label is visible."
            }
          }
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a name that identifies the form item."
        },
        "template": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "A template to be used for rendering the form item."
        },
        "validationRules": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.RequiredRule",
            "DevExpress.ui.NumericRule",
            "DevExpress.ui.RangeRule",
            "DevExpress.ui.StringLengthRule",
            "DevExpress.ui.CustomRule",
            "DevExpress.ui.CompareRule",
            "DevExpress.ui.PatternRule",
            "DevExpress.ui.EmailRule"
          ],
          "ItemComplexTypes": [
            "RequiredRule",
            "NumericRule",
            "RangeRule",
            "StringLengthRule",
            "CustomRule",
            "CompareRule",
            "PatternRule",
            "EmailRule"
          ],
          "IsCollection": true,
          "SingularName": "validationRule",
          "Description": "An array of validation rules to be checked for the form item editor."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the current form item is visible."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the sequence number of the item in a form, group or tab."
        }
      }
    },
    "FormTabbedItem": {
      "Description": "This article describes configuration options of a tabbed form item.",
      "Options": {
        "colSpan": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the number of columns spanned by the item."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the form item."
        },
        "itemType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the item's type. Set it to \"tabbed\" to create a tabbed item."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a name that identifies the form item."
        },
        "tabPanelOptions": {
          "PrimitiveTypes": [
            "DevExpress.ui.dxTabPanelOptions"
          ],
          "ComplexTypes": [
            "dxTabPanelOptions"
          ],
          "Description": "Holds a configuration object for the TabPanel widget used to display the current form item."
        },
        "tabs": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "SingularName": "tab",
          "Description": "An array of tab configuration objects.",
          "Options": {
            "alignItemLabels": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not labels of items displayed within the current tab are aligned."
            },
            "badge": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a badge text for the tab."
            },
            "colCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "The count of columns in the tab layout."
            },
            "colCountByScreen": {
              "Description": "Specifies dependency between the screen factor and the count of columns in the tab layout.",
              "Options": {
                "lg": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The count of columns for a large screen size."
                },
                "md": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The count of columns for a middle-sized screen."
                },
                "sm": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The count of columns for a small-sized screen."
                },
                "xs": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "The count of columns for an extra small-sized screen."
                }
              }
            },
            "disabled": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "A Boolean value specifying whether or not the tab can respond to user interaction."
            },
            "icon": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the icon to be displayed on the tab."
            },
            "items": {
              "ItemPrimitiveTypes": [
                "DevExpress.ui.dxFormSimpleItem",
                "DevExpress.ui.dxFormGroupItem",
                "DevExpress.ui.dxFormTabbedItem",
                "DevExpress.ui.dxFormEmptyItem",
                "DevExpress.ui.dxFormButtonItem"
              ],
              "ItemComplexTypes": [
                "FormSimpleItem",
                "FormGroupItem",
                "FormTabbedItem",
                "FormEmptyItem",
                "FormButtonItem"
              ],
              "IsCollection": true,
              "SingularName": "item",
              "Description": "Holds an array of form items displayed within the tab."
            },
            "tabTemplate": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "The template to be used for rendering the tab."
            },
            "template": {
              "PrimitiveTypes": [
                "any"
              ],
              "IsTemplate": true,
              "Description": "The template to be used for rendering the tab content."
            },
            "title": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the tab title."
            }
          }
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the current form item is visible."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the sequence number of the item in a form, group or tab."
        }
      }
    },
    "MenuItem": {
      "Description": "This section lists the data source fields that are used in a default item template.",
      "Options": {
        "beginGroup": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a group separator is displayed over the item."
        },
        "closeMenuOnClick": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies if a menu is closed when a user clicks the item."
        },
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the menu item is disabled."
        },
        "icon": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The name of an icon to be displayed on the menu item."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxMenuItemTemplate"
          ],
          "ItemComplexTypes": [
            "MenuItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "Holds an array of menu items."
        },
        "selectable": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not a user can select a menu item."
        },
        "selected": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the item is selected."
        },
        "template": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies an item template that should be used to render this item only."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the text inserted into the item element."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the menu item is visible."
        }
      }
    },
    "TreeListColumn": {
      "Options": {
        "alignment": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Aligns the content of the column."
        },
        "allowEditing": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can edit values in the column at runtime. By default, inherits the value of the editing.allowUpdating option."
        },
        "allowFiltering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether data can be filtered by this column. Applies only if filterRow.visible is true."
        },
        "allowFixing": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can fix the column at runtime. Applies only if columnFixing.enabled is true."
        },
        "allowHeaderFiltering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the header filter can be used to filter data by this column. Applies only if headerFilter.visible is true. By default, inherits the value of the allowFiltering option."
        },
        "allowHiding": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can hide the column using the column chooser at runtime. Applies only if columnChooser.enabled is true."
        },
        "allowReordering": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether this column can be used in column reordering at runtime. Applies only if allowColumnReordering is true."
        },
        "allowResizing": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can resize the column at runtime. Applies only if allowColumnResizing is true."
        },
        "allowSearch": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether this column can be searched. Applies only if searchPanel.visible is true. Inherits the value of the allowFiltering option by default."
        },
        "allowSorting": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a user can sort rows by this column at runtime. Applies only if sorting.mode differs from \"none\"."
        },
        "calculateCellValue": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Calculates custom values for column cells."
        },
        "calculateDisplayValue": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Calculates custom display values for column cells. Used when display and editing values should be different. Requires specifying the dataField or calculateCellValue option."
        },
        "calculateFilterExpression": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies the column's custom filtering rules."
        },
        "calculateSortValue": {
          "PrimitiveTypes": [
            "Function",
            "string"
          ],
          "IsFunc": true,
          "Description": "Calculates custom values to be used in sorting."
        },
        "caption": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a caption for the column."
        },
        "cellTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for column cells."
        },
        "columns": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxTreeListColumn"
          ],
          "ItemComplexTypes": [
            "TreeListColumn"
          ],
          "IsCollection": true,
          "SingularName": "column",
          "Description": "Configures columns."
        },
        "cssClass": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a CSS class to be applied to the column."
        },
        "customizeText": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Customizes the text displayed in column cells."
        },
        "dataField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Binds the column to a field of the dataSource."
        },
        "dataType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Casts column values to a specific data type."
        },
        "editCellTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for column cells in the editing state."
        },
        "editorOptions": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies options for the underlain editor."
        },
        "encodeHtml": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether HTML tags are displayed as plain text or applied to the values of the column."
        },
        "falseText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "In a boolean column, replaces all false items with a specified text. Applies only if showEditorAlways option is false."
        },
        "filterOperations": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "filterOperation",
          "Description": "Specifies a set of available filter operations. Applies only if filterRow.visible and allowFiltering are true."
        },
        "filterType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies whether a user changes the current filter by including (selecting) or excluding (clearing the selection of) values. Applies only if headerFilter.visible and allowHeaderFiltering are true."
        },
        "filterValue": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsChangeable": true,
          "Description": "Specifies the column's filter value displayed in the filter row."
        },
        "filterValues": {
          "ItemPrimitiveTypes": [
            "any"
          ],
          "IsCollection": true,
          "IsChangeable": true,
          "SingularName": "filterValue",
          "Description": "Specifies values selected in the column's header filter."
        },
        "fixed": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Fixes the column."
        },
        "fixedPosition": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the widget's edge to which the column is fixed. Applies only if columns].[fixed is true."
        },
        "format": {
          "PrimitiveTypes": [
            "DevExpress.ui.format",
            "string"
          ],
          "ComplexTypes": [
            "Format"
          ],
          "Description": "Formats a value before it is displayed in a column cell."
        },
        "formItem": {
          "PrimitiveTypes": [
            "DevExpress.ui.dxFormSimpleItem"
          ],
          "ComplexTypes": [
            "FormSimpleItem"
          ],
          "Description": "Configures the form item that the column produces in the editing state. Applies only if editing.mode is \"form\" or \"popup\"."
        },
        "headerCellTemplate": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies a custom template for column headers."
        },
        "headerFilter": {
          "Description": "Specifies data settings for the header filter.",
          "Options": {
            "allowSearch": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether searching is enabled in the header filter."
            },
            "dataSource": {
              "PrimitiveTypes": [
                "DevExpress.data.DataSourceOptions",
                "Function"
              ],
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsFunc": true,
              "IsDataSource": true,
              "Description": "Specifies a data source for the header filter."
            },
            "groupInterval": {
              "PrimitiveTypes": [
                "number",
                "string"
              ],
              "Description": "Specifies how the header filter combines values into groups."
            },
            "height": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the height of the popup menu containing filtering values."
            },
            "searchMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a comparison operation used to search header filter values."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the popup menu containing filtering values."
            }
          }
        },
        "hidingPriority": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the order in which columns are hidden when the widget adapts to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is \"widget\"."
        },
        "isBand": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the column bands other columns or not."
        },
        "lookup": {
          "Description": "Specifies options of a lookup column.",
          "Options": {
            "allowClearing": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether a user can nullify values of the lookup column."
            },
            "dataSource": {
              "PrimitiveTypes": [
                "DevExpress.data.DataSourceOptions",
                "DevExpress.data.Store",
                "Function"
              ],
              "ItemPrimitiveTypes": [
                "any"
              ],
              "IsFunc": true,
              "IsDataSource": true,
              "Description": "Specifies the data source for the lookup column."
            },
            "displayExpr": {
              "PrimitiveTypes": [
                "Function",
                "string"
              ],
              "IsFunc": true,
              "Description": "Specifies the data source field whose values must be displayed."
            },
            "valueExpr": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data source field whose values must be replaced."
            }
          }
        },
        "minWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the minimum width of the column."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the identifier of the column."
        },
        "ownerBand": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the band column that owns the current column. Accepts the index of the band column in the columns array."
        },
        "renderAsync": {
          "PrimitiveTypes": [
            "boolean"
          ]
        },
        "selectedFilterOperation": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsChangeable": true,
          "Description": "Specifies the column's filter operation displayed in the filter row."
        },
        "setCellValue": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies a function to be invoked after the user has edited a cell value, but before it will be saved in the data source."
        },
        "showEditorAlways": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the column displays its values using editors."
        },
        "showInColumnChooser": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether the column chooser can contain the column header."
        },
        "sortIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "Specifies the index according to which columns participate in sorting."
        },
        "sortingMethod": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies a custom comparison function for sorting. Applies only when sorting is performed on the client."
        },
        "sortOrder": {
          "PrimitiveTypes": [
            "string"
          ],
          "IsChangeable": true,
          "Description": "Specifies the sort order of column values."
        },
        "trueText": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "In a boolean column, replaces all true items with a specified text. Applies only if showEditorAlways option is false."
        },
        "validationRules": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.RequiredRule",
            "DevExpress.ui.NumericRule",
            "DevExpress.ui.RangeRule",
            "DevExpress.ui.StringLengthRule",
            "DevExpress.ui.CustomRule",
            "DevExpress.ui.CompareRule",
            "DevExpress.ui.PatternRule",
            "DevExpress.ui.EmailRule"
          ],
          "ItemComplexTypes": [
            "RequiredRule",
            "NumericRule",
            "RangeRule",
            "StringLengthRule",
            "CustomRule",
            "CompareRule",
            "PatternRule",
            "EmailRule"
          ],
          "IsCollection": true,
          "SingularName": "validationRule",
          "Description": "Specifies validation rules to be checked on updating cell values."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "IsChangeable": true,
          "Description": "Specifies whether the column is visible, that is, occupies space in the table."
        },
        "visibleIndex": {
          "PrimitiveTypes": [
            "number"
          ],
          "IsChangeable": true,
          "Description": "Specifies the position of the column regarding other columns in the resulting widget."
        },
        "width": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies the column's width in pixels or as a percentage. Ignored if it is less than minWidth."
        }
      }
    },
    "TreeViewItem": {
      "Description": "This section lists the data source fields that are used in a default item template.",
      "Options": {
        "disabled": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not a widget item must be displayed disabled."
        },
        "expanded": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the tree view item is displayed expanded."
        },
        "hasItems": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the tree view item has children."
        },
        "html": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies html code inserted into the widget item element."
        },
        "icon": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The name of an icon to be displayed on the tree view item."
        },
        "items": {
          "ItemPrimitiveTypes": [
            "DevExpress.ui.dxTreeViewItemTemplate"
          ],
          "ItemComplexTypes": [
            "TreeViewItem"
          ],
          "IsCollection": true,
          "SingularName": "item",
          "Description": "Holds an array of tree view items."
        },
        "parentId": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Holds the key of the parent item."
        },
        "selected": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not the tree view item is displayed selected."
        },
        "template": {
          "PrimitiveTypes": [
            "any"
          ],
          "IsTemplate": true,
          "Description": "Specifies an item template that should be used to render this item only."
        },
        "text": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies text displayed for the widget item."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not a widget item must be displayed."
        }
      }
    },
    "EmailRule": {
      "Description": "A validation rule that demands that the validated field match the Email pattern.",
      "IsCollection": true,
      "Options": {
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "VizFont": {
      "Description": "Font options.",
      "Options": {
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies font color."
        },
        "family": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies font family."
        },
        "opacity": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies font opacity."
        },
        "size": {
          "PrimitiveTypes": [
            "number",
            "string"
          ],
          "Description": "Specifies font size."
        },
        "weight": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies font weight. Accepts values from 100 to 900 in increments of 100. Higher values increase boldness."
        }
      }
    },
    "Format": {
      "Description": "Formats values.",
      "Options": {
        "currency": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the currency code. Applies only if the type is \"currency\"."
        },
        "formatter": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Specifies a custom format."
        },
        "parser": {
          "PrimitiveTypes": [
            "Function"
          ],
          "IsFunc": true,
          "Description": "Parses string values into numeric or date-time values. Can be used with formatter or one of the predefined formats."
        },
        "precision": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a precision for values of a numeric format."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a predefined format. Does not apply if you have specified the formatter function."
        }
      }
    },
    "GaugeIndicator": {
      "Description": "A base object for gauge value and subvalue indicators. Includes the options of indicators of all types.",
      "Options": {
        "arrowLength": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the length of an arrow for the indicator of the textCloud type in pixels."
        },
        "backgroundColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the background color for the indicator of the rangeBar type."
        },
        "baseValue": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the base value for the indicator of the rangeBar type."
        },
        "beginAdaptingAtRadius": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a radius small enough for the indicator to begin adapting."
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a color of the indicator."
        },
        "horizontalOrientation": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the orientation of the rangeBar indicator. Applies only if the geometry.orientation option is \"vertical\"."
        },
        "indentFromCenter": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the distance between the needle and the center of a gauge for the indicator of a needle-like type."
        },
        "length": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the indicator length."
        },
        "offset": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the distance between the indicator and the invisible scale line."
        },
        "palette": {
          "PrimitiveTypes": [
            "string"
          ],
          "ItemPrimitiveTypes": [
            "string"
          ],
          "IsCollection": true,
          "SingularName": "palette",
          "Description": "Sets the palette to be used to colorize indicators differently."
        },
        "secondColor": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the second color for the indicator of the twoColorNeedle type."
        },
        "secondFraction": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the length of a twoNeedleColor type indicator tip as a percentage."
        },
        "size": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the range bar size for an indicator of the rangeBar type."
        },
        "spindleGapSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the inner diameter in pixels, so that the spindle has the shape of a ring."
        },
        "spindleSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the spindle's diameter in pixels for the indicator of a needle-like type."
        },
        "text": {
          "Description": "Specifies the appearance of the text displayed in an indicator of the rangeBar type.",
          "Options": {
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed in an indicator."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed by the indicator."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed in an indicator. Accepts only numeric formats."
            },
            "indent": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the range bar's label indent in pixels."
            }
          }
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ]
        },
        "verticalOrientation": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the orientation of the rangeBar indicator. Applies only if the geometry.orientation option is \"horizontal\"."
        },
        "width": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the width of an indicator in pixels."
        }
      }
    },
    "NumericRule": {
      "Description": "A validation rule that demands that the validated field has a numeric value.",
      "IsCollection": true,
      "Options": {
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "PatternRule": {
      "Description": "A validation rule that demands that the validated field match a specified pattern.",
      "IsCollection": true,
      "Options": {
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "pattern": {
          "PrimitiveTypes": [
            "RegExp",
            "string"
          ],
          "Description": "Specifies the regular expression that the validated value must match."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "PieChartCommonSeriesSettings": {
      "Description": "An object defining the configuration options that are common for all series of the PieChart widget.",
      "Options": {
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides arguments for series points."
        },
        "argumentType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the required type for series arguments."
        },
        "border": {
          "Description": "An object defining the series border configuration options.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a border color for a series."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a dash style for the border of a series point."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Sets border visibility for a series."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Sets a border width for a series in pixels."
            }
          }
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a series color."
        },
        "hoverMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the chart elements to highlight when a series is hovered over."
        },
        "hoverStyle": {
          "Description": "An object defining configuration options for a hovered series.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a hovered series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for the series when it is hovered over."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for the border of a series point when this point is hovered over."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets border visibility for a hovered series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a border width for a hovered series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for the series when it is hovered over."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a point is hovered over.",
              "Options": {
                "direction": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies how to apply hatching to highlight the hovered point."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the distance between two hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            }
          }
        },
        "label": {
          "Description": "An object defining the label configuration options.",
          "Options": {
            "argumentFormat": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats the point argument before it is displayed in the point label. To format the point value, use the format option."
            },
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the point labels' background. The default color is inherited from the points."
            },
            "border": {
              "Description": "Specifies border options for point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a border color for point labels."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not borders are visible in point labels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the border width for point labels."
                }
              }
            },
            "connector": {
              "Description": "Specifies connector options for series point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of label connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not label connectors are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of label connectors."
                }
              }
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by point labels."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in point labels."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed in a point label."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a label position relative to the chart."
            },
            "radialOffset": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how to shift labels from their initial position in a radial direction in pixels."
            },
            "rotationAngle": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the angle used to rotate point labels from their initial position."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies the visibility of point labels."
            }
          }
        },
        "maxLabelCount": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed."
        },
        "minSegmentSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a minimal size of a displayed pie segment."
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the chart elements to highlight when the series is selected."
        },
        "selectionStyle": {
          "Description": "An object defining configuration options for the series when it is selected.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a selected series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for a selected series."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for the border of a selected series point."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets a border visibility for a selected series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a border width for a selected series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for a series when it is selected."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a point is selected.",
              "Options": {
                "direction": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies how to apply hatching to highlight the selected point."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the distance between two hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            }
          }
        },
        "smallValuesGrouping": {
          "Description": "Specifies chart segment grouping options.",
          "Options": {
            "groupName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the grouped chart segment. This name represents the segment in the chart legend."
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the segment grouping mode."
            },
            "threshold": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a threshold for segment values."
            },
            "topCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many segments must not be grouped."
            }
          }
        },
        "tagField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides data about a point."
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides values for series points."
        }
      }
    },
    "PieChartSeries": {
      "Description": "Specifies options for the series of the PieChart widget.",
      "IsCollection": true,
      "Options": {
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides arguments for series points."
        },
        "argumentType": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the required type for series arguments."
        },
        "border": {
          "Description": "An object defining the series border configuration options.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a border color for a series."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a dash style for the border of a series point."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Sets border visibility for a series."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Sets a border width for a series in pixels."
            }
          }
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a series color."
        },
        "hoverMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the chart elements to highlight when a series is hovered over."
        },
        "hoverStyle": {
          "Description": "An object defining configuration options for a hovered series.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a hovered series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for the series when it is hovered over."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for the border of a series point when this point is hovered over."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets border visibility for a hovered series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a border width for a hovered series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for the series when it is hovered over."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a point is hovered over.",
              "Options": {
                "direction": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies how to apply hatching to highlight the hovered point."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the distance between two hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            }
          }
        },
        "label": {
          "Description": "An object defining the label configuration options.",
          "Options": {
            "argumentFormat": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats the point argument before it is displayed in the point label. To format the point value, use the format option."
            },
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the point labels' background. The default color is inherited from the points."
            },
            "border": {
              "Description": "Specifies border options for point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a border color for point labels."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not borders are visible in point labels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the border width for point labels."
                }
              }
            },
            "connector": {
              "Description": "Specifies connector options for series point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of label connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not label connectors are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of label connectors."
                }
              }
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by point labels."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in point labels."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed in a point label."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a label position relative to the chart."
            },
            "radialOffset": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how to shift labels from their initial position in a radial direction in pixels."
            },
            "rotationAngle": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the angle used to rotate point labels from their initial position."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies the visibility of point labels."
            }
          }
        },
        "maxLabelCount": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed."
        },
        "minSegmentSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a minimal size of a displayed pie segment."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name that identifies the series."
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the chart elements to highlight when the series is selected."
        },
        "selectionStyle": {
          "Description": "An object defining configuration options for the series when it is selected.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a selected series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for a selected series."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for the border of a selected series point."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets a border visibility for a selected series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a border width for a selected series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for a series when it is selected."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a point is selected.",
              "Options": {
                "direction": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies how to apply hatching to highlight the selected point."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the distance between two hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            }
          }
        },
        "smallValuesGrouping": {
          "Description": "Specifies chart segment grouping options.",
          "Options": {
            "groupName": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the name of the grouped chart segment. This name represents the segment in the chart legend."
            },
            "mode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the segment grouping mode."
            },
            "threshold": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies a threshold for segment values."
            },
            "topCount": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies how many segments must not be grouped."
            }
          }
        },
        "tag": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies data about a series."
        },
        "tagField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides data about a point."
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides values for series points."
        }
      }
    },
    "PolarChartCommonSeriesSettings": {
      "Description": "An object defining the configuration options that are common for all series of the PolarChart widget.",
      "Options": {
        "area": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "PolarChartCommonSeriesSettings"
          ],
          "Description": "An object that specifies configuration options for all series of the area type in the chart."
        },
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides arguments for series points."
        },
        "bar": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "PolarChartCommonSeriesSettings"
          ],
          "Description": "An object that specifies configuration options for all series of the 'bar' type in the chart."
        },
        "barPadding": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Controls the padding and consequently the angular width of all bars in a series using relative units. Ignored if the barWidth option is set."
        },
        "barWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a fixed angular width for all bars in a series, measured in degrees. Takes precedence over the barPadding option."
        },
        "border": {
          "Description": "An object defining the series border configuration options.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a border color for a series."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a dash style for the borders of series points."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Sets border visibility for a series."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Sets a border width for a series in pixels."
            }
          }
        },
        "closed": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to close the chart by joining the end point with the first point."
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a series color."
        },
        "dashStyle": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the dash style of the series' line."
        },
        "hoverMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the series elements to highlight when a series is hovered over."
        },
        "hoverStyle": {
          "Description": "An object defining configuration options for a hovered series.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a hovered series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for a hovered series."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets a border visibility for a hovered series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a border width for a hovered series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for a series when it is hovered over."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the dash style for the line in a hovered series."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a series is hovered over.",
              "Options": {
                "direction": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies how to apply hatching to highlight the hovered series."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the distance between hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of a line in a hovered series."
            }
          }
        },
        "ignoreEmptyPoints": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a chart ignores null data points or not."
        },
        "label": {
          "Description": "An object defining the label configuration options.",
          "Options": {
            "argumentFormat": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats the point argument before it is displayed in the point label. To format the point value, use the format option."
            },
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the point labels' background. The default color is inherited from the points."
            },
            "border": {
              "Description": "Specifies border options for point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a border color for point labels."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether borders are visible in point labels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the border width for point labels."
                }
              }
            },
            "connector": {
              "Description": "Specifies connector options for series point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of label connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not label connectors are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of label connectors."
                }
              }
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by point labels."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in point labels."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed in a point label."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a label position in bar-like series."
            },
            "rotationAngle": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the angle used to rotate point labels from their initial position."
            },
            "showForZeroValues": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to show a label when the point has a zero value."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies the visibility of point labels."
            }
          }
        },
        "line": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "PolarChartCommonSeriesSettings"
          ],
          "Description": "An object that specifies configuration options for all series of the 'line' type in the chart."
        },
        "maxLabelCount": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed."
        },
        "minBarSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the minimal length of a displayed bar in pixels."
        },
        "opacity": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies opacity for a series."
        },
        "point": {
          "Description": "An object defining configuration options for points in line and area series.",
          "Options": {
            "border": {
              "Description": "Specifies border options for points in the line and area series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for points in the line and area series."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets border visibility for points in the line and area series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a border width for points in the line or area series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the points color."
            },
            "hoverMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies what series points to highlight when a point is hovered over."
            },
            "hoverStyle": {
              "Description": "An object defining configuration options for a hovered point.",
              "Options": {
                "border": {
                  "Description": "An object defining the border options for a hovered point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Sets a border color for a hovered point."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Sets border visibility for a hovered point."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Sets a border width for a hovered point."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a color for a point when it is hovered over."
                },
                "size": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the diameter of a hovered point in the series that represents data points as symbols (not as bars for instance)."
                }
              }
            },
            "image": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "An object specifying the parameters of an image that is used as a point marker.",
              "Options": {
                "height": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the height of an image that is used as a point marker."
                },
                "url": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a URL leading to the image to be used as a point marker."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of an image that is used as a point marker."
                }
              }
            },
            "selectionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies what series points to highlight when a point is selected."
            },
            "selectionStyle": {
              "Description": "An object defining configuration options for a selected point.",
              "Options": {
                "border": {
                  "Description": "An object defining the border options for a selected point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Sets a border color for a selected point."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Sets border visibility for a selected point."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Sets a border width for a selected point."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a color for a point when it is selected."
                },
                "size": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the diameter of a selected point in the series that represents data points as symbols (not as bars for instance)."
                }
              }
            },
            "size": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the point diameter in pixels for those series that represent data points as symbols (not as bars for instance)."
            },
            "symbol": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a symbol for presenting points of the line and area series."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies the points visibility for a line and area series."
            }
          }
        },
        "scatter": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "PolarChartCommonSeriesSettings"
          ],
          "Description": "An object that specifies configuration options for all series of the 'scatter' type in the chart."
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the series elements to highlight when the series is selected."
        },
        "selectionStyle": {
          "Description": "An object defining configuration options for a selected series.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a selected series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for a selected series."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets border visibility for a selected series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a border width for a selected series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for a series when it is selected."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the dash style for the line in a selected series."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a series is selected.",
              "Options": {
                "direction": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies how to apply hatching to highlight a selected series."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the distance between hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of a line in a selected series."
            }
          }
        },
        "showInLegend": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to show the series in the chart's legend."
        },
        "stack": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the stack where the values of the 'stackedBar' series must be located."
        },
        "stackedbar": {
          "PrimitiveTypes": [
            "any"
          ],
          "ComplexTypes": [
            "PolarChartCommonSeriesSettings"
          ],
          "Description": "An object that specifies configuration options for all series of the 'stackedBar' type in the chart."
        },
        "tagField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides data about a point."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets a series type."
        },
        "valueErrorBar": {
          "Description": "Configures error bars.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of error bars."
            },
            "displayMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether error bars must be displayed in full or partially."
            },
            "edgeLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of the lines that indicate the error bar edges."
            },
            "highValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data field that provides data for high error values."
            },
            "lineWidth": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the error bar line."
            },
            "lowValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data field that provides data for low error values."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the opacity of error bars."
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies how error bar values must be calculated."
            },
            "value": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the value to be used for generating error bars."
            }
          }
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides values for series points."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies the visibility of a series."
        },
        "width": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a line width."
        }
      }
    },
    "PolarChartSeries": {
      "Description": "Specifies options for PolarChart widget series.",
      "IsCollection": true,
      "Options": {
        "argumentField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides arguments for series points."
        },
        "barPadding": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Controls the padding and consequently the angular width of all bars in a series using relative units. Ignored if the barWidth option is set."
        },
        "barWidth": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a fixed angular width for all bars in a series, measured in degrees. Takes precedence over the barPadding option."
        },
        "border": {
          "Description": "An object defining the series border configuration options.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a border color for a series."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a dash style for the borders of series points."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Sets border visibility for a series."
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Sets a border width for a series in pixels."
            }
          }
        },
        "closed": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to close the chart by joining the end point with the first point."
        },
        "color": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies a series color."
        },
        "dashStyle": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the dash style of the series' line."
        },
        "hoverMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the series elements to highlight when a series is hovered over."
        },
        "hoverStyle": {
          "Description": "An object defining configuration options for a hovered series.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a hovered series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for a hovered series."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets a border visibility for a hovered series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a border width for a hovered series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for a series when it is hovered over."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the dash style for the line in a hovered series."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a series is hovered over.",
              "Options": {
                "direction": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies how to apply hatching to highlight the hovered series."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the distance between hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of a line in a hovered series."
            }
          }
        },
        "ignoreEmptyPoints": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether a chart ignores null data points or not."
        },
        "label": {
          "Description": "An object defining the label configuration options.",
          "Options": {
            "argumentFormat": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats the point argument before it is displayed in the point label. To format the point value, use the format option."
            },
            "backgroundColor": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Colors the point labels' background. The default color is inherited from the points."
            },
            "border": {
              "Description": "Specifies border options for point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a border color for point labels."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether borders are visible in point labels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the border width for point labels."
                }
              }
            },
            "connector": {
              "Description": "Specifies connector options for series point labels.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies the color of label connectors."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Indicates whether or not label connectors are visible."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of label connectors."
                }
              }
            },
            "customizeText": {
              "PrimitiveTypes": [
                "Function"
              ],
              "IsFunc": true,
              "Description": "Specifies a callback function that returns the text to be displayed by point labels."
            },
            "font": {
              "PrimitiveTypes": [
                "DevExpress.viz.Font"
              ],
              "ComplexTypes": [
                "VizFont"
              ],
              "Description": "Specifies font options for the text displayed in point labels."
            },
            "format": {
              "PrimitiveTypes": [
                "DevExpress.ui.format",
                "string"
              ],
              "ComplexTypes": [
                "Format"
              ],
              "Description": "Formats a value before it is displayed in a point label."
            },
            "position": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a label position in bar-like series."
            },
            "rotationAngle": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the angle used to rotate point labels from their initial position."
            },
            "showForZeroValues": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies whether or not to show a label when the point has a zero value."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies the visibility of point labels."
            }
          }
        },
        "maxLabelCount": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed."
        },
        "minBarSize": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the minimal length of a displayed bar in pixels."
        },
        "name": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name that identifies the series."
        },
        "opacity": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies opacity for a series."
        },
        "point": {
          "Description": "An object defining configuration options for points in line and area series.",
          "Options": {
            "border": {
              "Description": "Specifies border options for points in the line and area series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for points in the line and area series."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets border visibility for points in the line and area series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a border width for points in the line or area series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the points color."
            },
            "hoverMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies what series points to highlight when a point is hovered over."
            },
            "hoverStyle": {
              "Description": "An object defining configuration options for a hovered point.",
              "Options": {
                "border": {
                  "Description": "An object defining the border options for a hovered point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Sets a border color for a hovered point."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Sets border visibility for a hovered point."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Sets a border width for a hovered point."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a color for a point when it is hovered over."
                },
                "size": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the diameter of a hovered point in the series that represents data points as symbols (not as bars for instance)."
                }
              }
            },
            "image": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "An object specifying the parameters of an image that is used as a point marker.",
              "Options": {
                "height": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the height of an image that is used as a point marker."
                },
                "url": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a URL leading to the image to be used as a point marker."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of an image that is used as a point marker."
                }
              }
            },
            "selectionMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies what series points to highlight when a point is selected."
            },
            "selectionStyle": {
              "Description": "An object defining configuration options for a selected point.",
              "Options": {
                "border": {
                  "Description": "An object defining the border options for a selected point.",
                  "Options": {
                    "color": {
                      "PrimitiveTypes": [
                        "string"
                      ],
                      "Description": "Sets a border color for a selected point."
                    },
                    "visible": {
                      "PrimitiveTypes": [
                        "boolean"
                      ],
                      "Description": "Sets border visibility for a selected point."
                    },
                    "width": {
                      "PrimitiveTypes": [
                        "number"
                      ],
                      "Description": "Sets a border width for a selected point."
                    }
                  }
                },
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a color for a point when it is selected."
                },
                "size": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the diameter of a selected point in the series that represents data points as symbols (not as bars for instance)."
                }
              }
            },
            "size": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the point diameter in pixels for those series that represent data points as symbols (not as bars for instance)."
            },
            "symbol": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies a symbol for presenting points of the line and area series."
            },
            "visible": {
              "PrimitiveTypes": [
                "boolean"
              ],
              "Description": "Specifies the points visibility for a line and area series."
            }
          }
        },
        "selectionMode": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the series elements to highlight when the series is selected."
        },
        "selectionStyle": {
          "Description": "An object defining configuration options for a selected series.",
          "Options": {
            "border": {
              "Description": "An object defining the border options for a selected series.",
              "Options": {
                "color": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Sets a border color for a selected series."
                },
                "dashStyle": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies a dash style for the borders of point labels."
                },
                "visible": {
                  "PrimitiveTypes": [
                    "boolean"
                  ],
                  "Description": "Sets border visibility for a selected series."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Sets a border width for a selected series."
                }
              }
            },
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Sets a color for a series when it is selected."
            },
            "dashStyle": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the dash style for the line in a selected series."
            },
            "hatching": {
              "Description": "Specifies the hatching options to be applied when a series is selected.",
              "Options": {
                "direction": {
                  "PrimitiveTypes": [
                    "string"
                  ],
                  "Description": "Specifies how to apply hatching to highlight a selected series."
                },
                "opacity": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the opacity of hatching lines."
                },
                "step": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the distance between hatching lines in pixels."
                },
                "width": {
                  "PrimitiveTypes": [
                    "number"
                  ],
                  "Description": "Specifies the width of hatching lines in pixels."
                }
              }
            },
            "width": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of a line in a selected series."
            }
          }
        },
        "showInLegend": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies whether or not to show the series in the chart's legend."
        },
        "stack": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the stack where the values of the 'stackedBar' series must be located."
        },
        "tag": {
          "PrimitiveTypes": [
            "any"
          ],
          "Description": "Specifies data about a series."
        },
        "tagField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the name of the data source field that provides data about a point."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Sets the series type."
        },
        "valueErrorBar": {
          "Description": "Configures error bars.",
          "Options": {
            "color": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the color of error bars."
            },
            "displayMode": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies whether error bars must be displayed in full or partially."
            },
            "edgeLength": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the length of the lines that indicate the error bar edges."
            },
            "highValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data field that provides data for high error values."
            },
            "lineWidth": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the width of the error bar line."
            },
            "lowValueField": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the data field that provides data for low error values."
            },
            "opacity": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the opacity of error bars."
            },
            "type": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies how error bar values must be calculated."
            },
            "value": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the value to be used for generating error bars."
            }
          }
        },
        "valueField": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the data source field that provides values for series points."
        },
        "visible": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Specifies the visibility of a series."
        },
        "width": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies a line width."
        }
      }
    },
    "PositionConfig": {
      "Description": "The position object specifies the widget positioning options.",
      "Options": {
        "at": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The target element position that the widget is positioned against.",
          "Options": {
            "x": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Holds the horizontal position specifier."
            },
            "y": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Holds the vertical position specifier."
            }
          }
        },
        "boundary": {
          "PrimitiveTypes": [
            "Element",
            "JQuery",
            "Window"
          ],
          "Description": "The element within which the widget is positioned."
        },
        "boundaryOffset": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the horizontal and vertical offset from the window's boundaries.",
          "Options": {
            "x": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the horizontal offset."
            },
            "y": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the vertical offset."
            }
          }
        },
        "collision": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies how to move the widget if it overflows the screen.",
          "Options": {
            "x": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the horizontal collision handler."
            },
            "y": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Specifies the vertical collision handler."
            }
          }
        },
        "my": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "The position of the widget to align against the target element.",
          "Options": {
            "x": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Holds the horizontal position specifier."
            },
            "y": {
              "PrimitiveTypes": [
                "string"
              ],
              "Description": "Holds the vertical position specifier."
            }
          }
        },
        "of": {
          "PrimitiveTypes": [
            "Element",
            "JQuery",
            "Window"
          ],
          "Description": "The target element that the widget is positioned against."
        },
        "offset": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies horizontal and vertical offset in pixels.",
          "Options": {
            "x": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the horizontal offset."
            },
            "y": {
              "PrimitiveTypes": [
                "number"
              ],
              "Description": "Specifies the vertical offset."
            }
          }
        }
      }
    },
    "RangeRule": {
      "Description": "A validation rule that demands the target value be within the specified value range (including the range's end points).",
      "IsCollection": true,
      "Options": {
        "max": {
          "PrimitiveTypes": [
            "Date",
            "number"
          ],
          "Description": "Specifies the maximum value allowed for the validated value."
        },
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown to end-users if the current rule is broken."
        },
        "min": {
          "PrimitiveTypes": [
            "Date",
            "number"
          ],
          "Description": "Specifies the minimum value allowed for the validated value."
        },
        "reevaluate": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Indicates whether the rule should be always checked for the target value or only when the target value changes."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "RequiredRule": {
      "Description": "A validation rule that demands that a validated field has a value.",
      "IsCollection": true,
      "Options": {
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "trim": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Indicates whether to remove the Space characters from the validated value."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the type of the current rule."
        }
      }
    },
    "StringLengthRule": {
      "Description": "A validation rule that demands the target value length be within the specified value range (including the range's end points).",
      "IsCollection": true,
      "Options": {
        "max": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the maximum length allowed for the validated value."
        },
        "message": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the message that is shown for end-users if the current rule is broken."
        },
        "min": {
          "PrimitiveTypes": [
            "number"
          ],
          "Description": "Specifies the minimum length allowed for the validated value."
        },
        "trim": {
          "PrimitiveTypes": [
            "boolean"
          ],
          "Description": "Indicates whether or not to remove the Space characters from the validated value."
        },
        "type": {
          "PrimitiveTypes": [
            "string"
          ],
          "Description": "Specifies the type of the current rule."
        }
      }
    }
  }
}